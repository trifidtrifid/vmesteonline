/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Topic implements org.apache.thrift.TBase<Topic, Topic._Fields>, java.io.Serializable, Cloneable, Comparable<Topic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topic");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("messageNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VIEWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("viewers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField USERS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("usersNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastUpdate", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("likes", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UNLIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikes", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RUBRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("rubric", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TopicTupleSchemeFactory());
  }

  public long id; // required
  public Message message; // required
  public int messageNum; // required
  public int viewers; // required
  public int usersNum; // required
  public int lastUpdate; // required
  public int likes; // required
  public int unlikes; // required
  public long rubric; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MESSAGE((short)2, "message"),
    MESSAGE_NUM((short)3, "messageNum"),
    VIEWERS((short)4, "viewers"),
    USERS_NUM((short)5, "usersNum"),
    LAST_UPDATE((short)6, "lastUpdate"),
    LIKES((short)7, "likes"),
    UNLIKES((short)8, "unlikes"),
    RUBRIC((short)9, "rubric");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // MESSAGE_NUM
          return MESSAGE_NUM;
        case 4: // VIEWERS
          return VIEWERS;
        case 5: // USERS_NUM
          return USERS_NUM;
        case 6: // LAST_UPDATE
          return LAST_UPDATE;
        case 7: // LIKES
          return LIKES;
        case 8: // UNLIKES
          return UNLIKES;
        case 9: // RUBRIC
          return RUBRIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __MESSAGENUM_ISSET_ID = 1;
  private static final int __VIEWERS_ISSET_ID = 2;
  private static final int __USERSNUM_ISSET_ID = 3;
  private static final int __LASTUPDATE_ISSET_ID = 4;
  private static final int __LIKES_ISSET_ID = 5;
  private static final int __UNLIKES_ISSET_ID = 6;
  private static final int __RUBRIC_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RUBRIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
    tmpMap.put(_Fields.MESSAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("messageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWERS, new org.apache.thrift.meta_data.FieldMetaData("viewers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERS_NUM, new org.apache.thrift.meta_data.FieldMetaData("usersNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("lastUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIKES, new org.apache.thrift.meta_data.FieldMetaData("likes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIKES, new org.apache.thrift.meta_data.FieldMetaData("unlikes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUBRIC, new org.apache.thrift.meta_data.FieldMetaData("rubric", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topic.class, metaDataMap);
  }

  public Topic() {
  }

  public Topic(
    long id,
    Message message,
    int messageNum,
    int viewers,
    int usersNum,
    int lastUpdate,
    int likes,
    int unlikes)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.message = message;
    this.messageNum = messageNum;
    setMessageNumIsSet(true);
    this.viewers = viewers;
    setViewersIsSet(true);
    this.usersNum = usersNum;
    setUsersNumIsSet(true);
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    this.likes = likes;
    setLikesIsSet(true);
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topic(Topic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
    this.messageNum = other.messageNum;
    this.viewers = other.viewers;
    this.usersNum = other.usersNum;
    this.lastUpdate = other.lastUpdate;
    this.likes = other.likes;
    this.unlikes = other.unlikes;
    this.rubric = other.rubric;
  }

  public Topic deepCopy() {
    return new Topic(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.message = null;
    setMessageNumIsSet(false);
    this.messageNum = 0;
    setViewersIsSet(false);
    this.viewers = 0;
    setUsersNumIsSet(false);
    this.usersNum = 0;
    setLastUpdateIsSet(false);
    this.lastUpdate = 0;
    setLikesIsSet(false);
    this.likes = 0;
    setUnlikesIsSet(false);
    this.unlikes = 0;
    setRubricIsSet(false);
    this.rubric = 0;
  }

  public long getId() {
    return this.id;
  }

  public Topic setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public Message getMessage() {
    return this.message;
  }

  public Topic setMessage(Message message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public int getMessageNum() {
    return this.messageNum;
  }

  public Topic setMessageNum(int messageNum) {
    this.messageNum = messageNum;
    setMessageNumIsSet(true);
    return this;
  }

  public void unsetMessageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGENUM_ISSET_ID);
  }

  /** Returns true if field messageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGENUM_ISSET_ID);
  }

  public void setMessageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGENUM_ISSET_ID, value);
  }

  public int getViewers() {
    return this.viewers;
  }

  public Topic setViewers(int viewers) {
    this.viewers = viewers;
    setViewersIsSet(true);
    return this;
  }

  public void unsetViewers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWERS_ISSET_ID);
  }

  /** Returns true if field viewers is set (has been assigned a value) and false otherwise */
  public boolean isSetViewers() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWERS_ISSET_ID);
  }

  public void setViewersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWERS_ISSET_ID, value);
  }

  public int getUsersNum() {
    return this.usersNum;
  }

  public Topic setUsersNum(int usersNum) {
    this.usersNum = usersNum;
    setUsersNumIsSet(true);
    return this;
  }

  public void unsetUsersNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSNUM_ISSET_ID);
  }

  /** Returns true if field usersNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUsersNum() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSNUM_ISSET_ID);
  }

  public void setUsersNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSNUM_ISSET_ID, value);
  }

  public int getLastUpdate() {
    return this.lastUpdate;
  }

  public Topic setLastUpdate(int lastUpdate) {
    this.lastUpdate = lastUpdate;
    setLastUpdateIsSet(true);
    return this;
  }

  public void unsetLastUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  /** Returns true if field lastUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTUPDATE_ISSET_ID);
  }

  public void setLastUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTUPDATE_ISSET_ID, value);
  }

  public int getLikes() {
    return this.likes;
  }

  public Topic setLikes(int likes) {
    this.likes = likes;
    setLikesIsSet(true);
    return this;
  }

  public void unsetLikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  /** Returns true if field likes is set (has been assigned a value) and false otherwise */
  public boolean isSetLikes() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  public void setLikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKES_ISSET_ID, value);
  }

  public int getUnlikes() {
    return this.unlikes;
  }

  public Topic setUnlikes(int unlikes) {
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
    return this;
  }

  public void unsetUnlikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  /** Returns true if field unlikes is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikes() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  public void setUnlikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKES_ISSET_ID, value);
  }

  public long getRubric() {
    return this.rubric;
  }

  public Topic setRubric(long rubric) {
    this.rubric = rubric;
    setRubricIsSet(true);
    return this;
  }

  public void unsetRubric() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  /** Returns true if field rubric is set (has been assigned a value) and false otherwise */
  public boolean isSetRubric() {
    return EncodingUtils.testBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  public void setRubricIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRIC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Message)value);
      }
      break;

    case MESSAGE_NUM:
      if (value == null) {
        unsetMessageNum();
      } else {
        setMessageNum((Integer)value);
      }
      break;

    case VIEWERS:
      if (value == null) {
        unsetViewers();
      } else {
        setViewers((Integer)value);
      }
      break;

    case USERS_NUM:
      if (value == null) {
        unsetUsersNum();
      } else {
        setUsersNum((Integer)value);
      }
      break;

    case LAST_UPDATE:
      if (value == null) {
        unsetLastUpdate();
      } else {
        setLastUpdate((Integer)value);
      }
      break;

    case LIKES:
      if (value == null) {
        unsetLikes();
      } else {
        setLikes((Integer)value);
      }
      break;

    case UNLIKES:
      if (value == null) {
        unsetUnlikes();
      } else {
        setUnlikes((Integer)value);
      }
      break;

    case RUBRIC:
      if (value == null) {
        unsetRubric();
      } else {
        setRubric((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case MESSAGE:
      return getMessage();

    case MESSAGE_NUM:
      return Integer.valueOf(getMessageNum());

    case VIEWERS:
      return Integer.valueOf(getViewers());

    case USERS_NUM:
      return Integer.valueOf(getUsersNum());

    case LAST_UPDATE:
      return Integer.valueOf(getLastUpdate());

    case LIKES:
      return Integer.valueOf(getLikes());

    case UNLIKES:
      return Integer.valueOf(getUnlikes());

    case RUBRIC:
      return Long.valueOf(getRubric());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MESSAGE:
      return isSetMessage();
    case MESSAGE_NUM:
      return isSetMessageNum();
    case VIEWERS:
      return isSetViewers();
    case USERS_NUM:
      return isSetUsersNum();
    case LAST_UPDATE:
      return isSetLastUpdate();
    case LIKES:
      return isSetLikes();
    case UNLIKES:
      return isSetUnlikes();
    case RUBRIC:
      return isSetRubric();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Topic)
      return this.equals((Topic)that);
    return false;
  }

  public boolean equals(Topic that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_messageNum = true;
    boolean that_present_messageNum = true;
    if (this_present_messageNum || that_present_messageNum) {
      if (!(this_present_messageNum && that_present_messageNum))
        return false;
      if (this.messageNum != that.messageNum)
        return false;
    }

    boolean this_present_viewers = true;
    boolean that_present_viewers = true;
    if (this_present_viewers || that_present_viewers) {
      if (!(this_present_viewers && that_present_viewers))
        return false;
      if (this.viewers != that.viewers)
        return false;
    }

    boolean this_present_usersNum = true;
    boolean that_present_usersNum = true;
    if (this_present_usersNum || that_present_usersNum) {
      if (!(this_present_usersNum && that_present_usersNum))
        return false;
      if (this.usersNum != that.usersNum)
        return false;
    }

    boolean this_present_lastUpdate = true;
    boolean that_present_lastUpdate = true;
    if (this_present_lastUpdate || that_present_lastUpdate) {
      if (!(this_present_lastUpdate && that_present_lastUpdate))
        return false;
      if (this.lastUpdate != that.lastUpdate)
        return false;
    }

    boolean this_present_likes = true;
    boolean that_present_likes = true;
    if (this_present_likes || that_present_likes) {
      if (!(this_present_likes && that_present_likes))
        return false;
      if (this.likes != that.likes)
        return false;
    }

    boolean this_present_unlikes = true;
    boolean that_present_unlikes = true;
    if (this_present_unlikes || that_present_unlikes) {
      if (!(this_present_unlikes && that_present_unlikes))
        return false;
      if (this.unlikes != that.unlikes)
        return false;
    }

    boolean this_present_rubric = true && this.isSetRubric();
    boolean that_present_rubric = true && that.isSetRubric();
    if (this_present_rubric || that_present_rubric) {
      if (!(this_present_rubric && that_present_rubric))
        return false;
      if (this.rubric != that.rubric)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Topic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageNum()).compareTo(other.isSetMessageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageNum, other.messageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewers()).compareTo(other.isSetViewers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewers, other.viewers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsersNum()).compareTo(other.isSetUsersNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsersNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usersNum, other.usersNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastUpdate()).compareTo(other.isSetLastUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastUpdate, other.lastUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikes()).compareTo(other.isSetLikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likes, other.likes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikes()).compareTo(other.isSetUnlikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikes, other.unlikes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRubric()).compareTo(other.isSetRubric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRubric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubric, other.rubric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Topic(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageNum:");
    sb.append(this.messageNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewers:");
    sb.append(this.viewers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usersNum:");
    sb.append(this.usersNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastUpdate:");
    sb.append(this.lastUpdate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("likes:");
    sb.append(this.likes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikes:");
    sb.append(this.unlikes);
    first = false;
    if (isSetRubric()) {
      if (!first) sb.append(", ");
      sb.append("rubric:");
      sb.append(this.rubric);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (message != null) {
      message.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicStandardSchemeFactory implements SchemeFactory {
    public TopicStandardScheme getScheme() {
      return new TopicStandardScheme();
    }
  }

  private static class TopicStandardScheme extends StandardScheme<Topic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new Message();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageNum = iprot.readI32();
              struct.setMessageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIEWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewers = iprot.readI32();
              struct.setViewersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usersNum = iprot.readI32();
              struct.setUsersNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastUpdate = iprot.readI32();
              struct.setLastUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likes = iprot.readI32();
              struct.setLikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UNLIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlikes = iprot.readI32();
              struct.setUnlikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RUBRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rubric = iprot.readI64();
              struct.setRubricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        struct.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.messageNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEWERS_FIELD_DESC);
      oprot.writeI32(struct.viewers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USERS_NUM_FIELD_DESC);
      oprot.writeI32(struct.usersNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATE_FIELD_DESC);
      oprot.writeI32(struct.lastUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKES_FIELD_DESC);
      oprot.writeI32(struct.likes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_FIELD_DESC);
      oprot.writeI32(struct.unlikes);
      oprot.writeFieldEnd();
      if (struct.isSetRubric()) {
        oprot.writeFieldBegin(RUBRIC_FIELD_DESC);
        oprot.writeI64(struct.rubric);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicTupleSchemeFactory implements SchemeFactory {
    public TopicTupleScheme getScheme() {
      return new TopicTupleScheme();
    }
  }

  private static class TopicTupleScheme extends TupleScheme<Topic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetMessageNum()) {
        optionals.set(2);
      }
      if (struct.isSetViewers()) {
        optionals.set(3);
      }
      if (struct.isSetUsersNum()) {
        optionals.set(4);
      }
      if (struct.isSetLastUpdate()) {
        optionals.set(5);
      }
      if (struct.isSetLikes()) {
        optionals.set(6);
      }
      if (struct.isSetUnlikes()) {
        optionals.set(7);
      }
      if (struct.isSetRubric()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
      if (struct.isSetMessageNum()) {
        oprot.writeI32(struct.messageNum);
      }
      if (struct.isSetViewers()) {
        oprot.writeI32(struct.viewers);
      }
      if (struct.isSetUsersNum()) {
        oprot.writeI32(struct.usersNum);
      }
      if (struct.isSetLastUpdate()) {
        oprot.writeI32(struct.lastUpdate);
      }
      if (struct.isSetLikes()) {
        oprot.writeI32(struct.likes);
      }
      if (struct.isSetUnlikes()) {
        oprot.writeI32(struct.unlikes);
      }
      if (struct.isSetRubric()) {
        oprot.writeI64(struct.rubric);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = new Message();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.messageNum = iprot.readI32();
        struct.setMessageNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.viewers = iprot.readI32();
        struct.setViewersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usersNum = iprot.readI32();
        struct.setUsersNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastUpdate = iprot.readI32();
        struct.setLastUpdateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.likes = iprot.readI32();
        struct.setLikesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.unlikes = iprot.readI32();
        struct.setUnlikesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rubric = iprot.readI64();
        struct.setRubricIsSet(true);
      }
    }
  }

}

