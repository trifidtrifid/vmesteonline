/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserMessage implements org.apache.thrift.TBase<UserMessage, UserMessage._Fields>, java.io.Serializable, Cloneable, Comparable<UserMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserMessage");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField UNINTRESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("unintrested", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("like", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField UNLIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("unlike", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserMessageTupleSchemeFactory());
  }

  public long userId; // required
  public long messageId; // required
  public boolean read; // required
  public boolean unintrested; // required
  public boolean like; // required
  public boolean unlike; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    MESSAGE_ID((short)2, "messageId"),
    READ((short)3, "read"),
    UNINTRESTED((short)4, "unintrested"),
    LIKE((short)5, "like"),
    UNLIKE((short)6, "unlike");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // MESSAGE_ID
          return MESSAGE_ID;
        case 3: // READ
          return READ;
        case 4: // UNINTRESTED
          return UNINTRESTED;
        case 5: // LIKE
          return LIKE;
        case 6: // UNLIKE
          return UNLIKE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __MESSAGEID_ISSET_ID = 1;
  private static final int __READ_ISSET_ID = 2;
  private static final int __UNINTRESTED_ISSET_ID = 3;
  private static final int __LIKE_ISSET_ID = 4;
  private static final int __UNLIKE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UNINTRESTED, new org.apache.thrift.meta_data.FieldMetaData("unintrested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIKE, new org.apache.thrift.meta_data.FieldMetaData("like", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UNLIKE, new org.apache.thrift.meta_data.FieldMetaData("unlike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserMessage.class, metaDataMap);
  }

  public UserMessage() {
  }

  public UserMessage(
    long userId,
    long messageId,
    boolean read,
    boolean unintrested,
    boolean like,
    boolean unlike)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.messageId = messageId;
    setMessageIdIsSet(true);
    this.read = read;
    setReadIsSet(true);
    this.unintrested = unintrested;
    setUnintrestedIsSet(true);
    this.like = like;
    setLikeIsSet(true);
    this.unlike = unlike;
    setUnlikeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserMessage(UserMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.messageId = other.messageId;
    this.read = other.read;
    this.unintrested = other.unintrested;
    this.like = other.like;
    this.unlike = other.unlike;
  }

  public UserMessage deepCopy() {
    return new UserMessage(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setMessageIdIsSet(false);
    this.messageId = 0;
    setReadIsSet(false);
    this.read = false;
    setUnintrestedIsSet(false);
    this.unintrested = false;
    setLikeIsSet(false);
    this.like = false;
    setUnlikeIsSet(false);
    this.unlike = false;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserMessage setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getMessageId() {
    return this.messageId;
  }

  public UserMessage setMessageId(long messageId) {
    this.messageId = messageId;
    setMessageIdIsSet(true);
    return this;
  }

  public void unsetMessageId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
  }

  public void setMessageIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
  }

  public boolean isRead() {
    return this.read;
  }

  public UserMessage setRead(boolean read) {
    this.read = read;
    setReadIsSet(true);
    return this;
  }

  public void unsetRead() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_ISSET_ID);
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_ISSET_ID);
  }

  public void setReadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_ISSET_ID, value);
  }

  public boolean isUnintrested() {
    return this.unintrested;
  }

  public UserMessage setUnintrested(boolean unintrested) {
    this.unintrested = unintrested;
    setUnintrestedIsSet(true);
    return this;
  }

  public void unsetUnintrested() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNINTRESTED_ISSET_ID);
  }

  /** Returns true if field unintrested is set (has been assigned a value) and false otherwise */
  public boolean isSetUnintrested() {
    return EncodingUtils.testBit(__isset_bitfield, __UNINTRESTED_ISSET_ID);
  }

  public void setUnintrestedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNINTRESTED_ISSET_ID, value);
  }

  public boolean isLike() {
    return this.like;
  }

  public UserMessage setLike(boolean like) {
    this.like = like;
    setLikeIsSet(true);
    return this;
  }

  public void unsetLike() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKE_ISSET_ID);
  }

  /** Returns true if field like is set (has been assigned a value) and false otherwise */
  public boolean isSetLike() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKE_ISSET_ID);
  }

  public void setLikeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKE_ISSET_ID, value);
  }

  public boolean isUnlike() {
    return this.unlike;
  }

  public UserMessage setUnlike(boolean unlike) {
    this.unlike = unlike;
    setUnlikeIsSet(true);
    return this;
  }

  public void unsetUnlike() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKE_ISSET_ID);
  }

  /** Returns true if field unlike is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlike() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKE_ISSET_ID);
  }

  public void setUnlikeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case MESSAGE_ID:
      if (value == null) {
        unsetMessageId();
      } else {
        setMessageId((Long)value);
      }
      break;

    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((Boolean)value);
      }
      break;

    case UNINTRESTED:
      if (value == null) {
        unsetUnintrested();
      } else {
        setUnintrested((Boolean)value);
      }
      break;

    case LIKE:
      if (value == null) {
        unsetLike();
      } else {
        setLike((Boolean)value);
      }
      break;

    case UNLIKE:
      if (value == null) {
        unsetUnlike();
      } else {
        setUnlike((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case MESSAGE_ID:
      return Long.valueOf(getMessageId());

    case READ:
      return Boolean.valueOf(isRead());

    case UNINTRESTED:
      return Boolean.valueOf(isUnintrested());

    case LIKE:
      return Boolean.valueOf(isLike());

    case UNLIKE:
      return Boolean.valueOf(isUnlike());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case MESSAGE_ID:
      return isSetMessageId();
    case READ:
      return isSetRead();
    case UNINTRESTED:
      return isSetUnintrested();
    case LIKE:
      return isSetLike();
    case UNLIKE:
      return isSetUnlike();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserMessage)
      return this.equals((UserMessage)that);
    return false;
  }

  public boolean equals(UserMessage that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_messageId = true;
    boolean that_present_messageId = true;
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (this.messageId != that.messageId)
        return false;
    }

    boolean this_present_read = true;
    boolean that_present_read = true;
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (this.read != that.read)
        return false;
    }

    boolean this_present_unintrested = true;
    boolean that_present_unintrested = true;
    if (this_present_unintrested || that_present_unintrested) {
      if (!(this_present_unintrested && that_present_unintrested))
        return false;
      if (this.unintrested != that.unintrested)
        return false;
    }

    boolean this_present_like = true;
    boolean that_present_like = true;
    if (this_present_like || that_present_like) {
      if (!(this_present_like && that_present_like))
        return false;
      if (this.like != that.like)
        return false;
    }

    boolean this_present_unlike = true;
    boolean that_present_unlike = true;
    if (this_present_unlike || that_present_unlike) {
      if (!(this_present_unlike && that_present_unlike))
        return false;
      if (this.unlike != that.unlike)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnintrested()).compareTo(other.isSetUnintrested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnintrested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unintrested, other.unintrested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLike()).compareTo(other.isSetLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.like, other.like);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlike()).compareTo(other.isSetUnlike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlike, other.unlike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserMessage(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageId:");
    sb.append(this.messageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("read:");
    sb.append(this.read);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unintrested:");
    sb.append(this.unintrested);
    first = false;
    if (!first) sb.append(", ");
    sb.append("like:");
    sb.append(this.like);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlike:");
    sb.append(this.unlike);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserMessageStandardSchemeFactory implements SchemeFactory {
    public UserMessageStandardScheme getScheme() {
      return new UserMessageStandardScheme();
    }
  }

  private static class UserMessageStandardScheme extends StandardScheme<UserMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.messageId = iprot.readI64();
              struct.setMessageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.read = iprot.readBool();
              struct.setReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNINTRESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unintrested = iprot.readBool();
              struct.setUnintrestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.like = iprot.readBool();
              struct.setLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNLIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unlike = iprot.readBool();
              struct.setUnlikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeI64(struct.messageId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_FIELD_DESC);
      oprot.writeBool(struct.read);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNINTRESTED_FIELD_DESC);
      oprot.writeBool(struct.unintrested);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKE_FIELD_DESC);
      oprot.writeBool(struct.like);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKE_FIELD_DESC);
      oprot.writeBool(struct.unlike);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserMessageTupleSchemeFactory implements SchemeFactory {
    public UserMessageTupleScheme getScheme() {
      return new UserMessageTupleScheme();
    }
  }

  private static class UserMessageTupleScheme extends TupleScheme<UserMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetMessageId()) {
        optionals.set(1);
      }
      if (struct.isSetRead()) {
        optionals.set(2);
      }
      if (struct.isSetUnintrested()) {
        optionals.set(3);
      }
      if (struct.isSetLike()) {
        optionals.set(4);
      }
      if (struct.isSetUnlike()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetMessageId()) {
        oprot.writeI64(struct.messageId);
      }
      if (struct.isSetRead()) {
        oprot.writeBool(struct.read);
      }
      if (struct.isSetUnintrested()) {
        oprot.writeBool(struct.unintrested);
      }
      if (struct.isSetLike()) {
        oprot.writeBool(struct.like);
      }
      if (struct.isSetUnlike()) {
        oprot.writeBool(struct.unlike);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageId = iprot.readI64();
        struct.setMessageIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.read = iprot.readBool();
        struct.setReadIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unintrested = iprot.readBool();
        struct.setUnintrestedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.like = iprot.readBool();
        struct.setLikeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unlike = iprot.readBool();
        struct.setUnlikeIsSet(true);
      }
    }
  }

}

