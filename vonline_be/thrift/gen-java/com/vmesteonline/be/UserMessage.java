/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-2-4")
public class UserMessage implements org.apache.thrift.TBase<UserMessage, UserMessage._Fields>, java.io.Serializable, Cloneable, Comparable<UserMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserMessage");

  private static final org.apache.thrift.protocol.TField READ_FIELD_DESC = new org.apache.thrift.protocol.TField("read", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField LIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("likes", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField UNLIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikes", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserMessageTupleSchemeFactory());
  }

  public boolean read; // required
  public boolean likes; // required
  public boolean unlikes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    READ((short)1, "read"),
    LIKES((short)2, "likes"),
    UNLIKES((short)3, "unlikes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READ
          return READ;
        case 2: // LIKES
          return LIKES;
        case 3: // UNLIKES
          return UNLIKES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READ_ISSET_ID = 0;
  private static final int __LIKES_ISSET_ID = 1;
  private static final int __UNLIKES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READ, new org.apache.thrift.meta_data.FieldMetaData("read", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIKES, new org.apache.thrift.meta_data.FieldMetaData("likes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.UNLIKES, new org.apache.thrift.meta_data.FieldMetaData("unlikes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserMessage.class, metaDataMap);
  }

  public UserMessage() {
  }

  public UserMessage(
    boolean read,
    boolean likes,
    boolean unlikes)
  {
    this();
    this.read = read;
    setReadIsSet(true);
    this.likes = likes;
    setLikesIsSet(true);
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserMessage(UserMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    this.read = other.read;
    this.likes = other.likes;
    this.unlikes = other.unlikes;
  }

  public UserMessage deepCopy() {
    return new UserMessage(this);
  }

  @Override
  public void clear() {
    setReadIsSet(false);
    this.read = false;
    setLikesIsSet(false);
    this.likes = false;
    setUnlikesIsSet(false);
    this.unlikes = false;
  }

  public boolean isRead() {
    return this.read;
  }

  public UserMessage setRead(boolean read) {
    this.read = read;
    setReadIsSet(true);
    return this;
  }

  public void unsetRead() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READ_ISSET_ID);
  }

  /** Returns true if field read is set (has been assigned a value) and false otherwise */
  public boolean isSetRead() {
    return EncodingUtils.testBit(__isset_bitfield, __READ_ISSET_ID);
  }

  public void setReadIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READ_ISSET_ID, value);
  }

  public boolean isLikes() {
    return this.likes;
  }

  public UserMessage setLikes(boolean likes) {
    this.likes = likes;
    setLikesIsSet(true);
    return this;
  }

  public void unsetLikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  /** Returns true if field likes is set (has been assigned a value) and false otherwise */
  public boolean isSetLikes() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  public void setLikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKES_ISSET_ID, value);
  }

  public boolean isUnlikes() {
    return this.unlikes;
  }

  public UserMessage setUnlikes(boolean unlikes) {
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
    return this;
  }

  public void unsetUnlikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  /** Returns true if field unlikes is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikes() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  public void setUnlikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case READ:
      if (value == null) {
        unsetRead();
      } else {
        setRead((Boolean)value);
      }
      break;

    case LIKES:
      if (value == null) {
        unsetLikes();
      } else {
        setLikes((Boolean)value);
      }
      break;

    case UNLIKES:
      if (value == null) {
        unsetUnlikes();
      } else {
        setUnlikes((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case READ:
      return Boolean.valueOf(isRead());

    case LIKES:
      return Boolean.valueOf(isLikes());

    case UNLIKES:
      return Boolean.valueOf(isUnlikes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case READ:
      return isSetRead();
    case LIKES:
      return isSetLikes();
    case UNLIKES:
      return isSetUnlikes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserMessage)
      return this.equals((UserMessage)that);
    return false;
  }

  public boolean equals(UserMessage that) {
    if (that == null)
      return false;

    boolean this_present_read = true;
    boolean that_present_read = true;
    if (this_present_read || that_present_read) {
      if (!(this_present_read && that_present_read))
        return false;
      if (this.read != that.read)
        return false;
    }

    boolean this_present_likes = true;
    boolean that_present_likes = true;
    if (this_present_likes || that_present_likes) {
      if (!(this_present_likes && that_present_likes))
        return false;
      if (this.likes != that.likes)
        return false;
    }

    boolean this_present_unlikes = true;
    boolean that_present_unlikes = true;
    if (this_present_unlikes || that_present_unlikes) {
      if (!(this_present_unlikes && that_present_unlikes))
        return false;
      if (this.unlikes != that.unlikes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_read = true;
    list.add(present_read);
    if (present_read)
      list.add(read);

    boolean present_likes = true;
    list.add(present_likes);
    if (present_likes)
      list.add(likes);

    boolean present_unlikes = true;
    list.add(present_unlikes);
    if (present_unlikes)
      list.add(unlikes);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRead()).compareTo(other.isSetRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read, other.read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikes()).compareTo(other.isSetLikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likes, other.likes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikes()).compareTo(other.isSetUnlikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikes, other.unlikes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserMessage(");
    boolean first = true;

    sb.append("read:");
    sb.append(this.read);
    first = false;
    if (!first) sb.append(", ");
    sb.append("likes:");
    sb.append(this.likes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikes:");
    sb.append(this.unlikes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserMessageStandardSchemeFactory implements SchemeFactory {
    public UserMessageStandardScheme getScheme() {
      return new UserMessageStandardScheme();
    }
  }

  private static class UserMessageStandardScheme extends StandardScheme<UserMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.read = iprot.readBool();
              struct.setReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.likes = iprot.readBool();
              struct.setLikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNLIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.unlikes = iprot.readBool();
              struct.setUnlikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(READ_FIELD_DESC);
      oprot.writeBool(struct.read);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIKES_FIELD_DESC);
      oprot.writeBool(struct.likes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_FIELD_DESC);
      oprot.writeBool(struct.unlikes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserMessageTupleSchemeFactory implements SchemeFactory {
    public UserMessageTupleScheme getScheme() {
      return new UserMessageTupleScheme();
    }
  }

  private static class UserMessageTupleScheme extends TupleScheme<UserMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRead()) {
        optionals.set(0);
      }
      if (struct.isSetLikes()) {
        optionals.set(1);
      }
      if (struct.isSetUnlikes()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRead()) {
        oprot.writeBool(struct.read);
      }
      if (struct.isSetLikes()) {
        oprot.writeBool(struct.likes);
      }
      if (struct.isSetUnlikes()) {
        oprot.writeBool(struct.unlikes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.read = iprot.readBool();
        struct.setReadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.likes = iprot.readBool();
        struct.setLikesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.unlikes = iprot.readBool();
        struct.setUnlikesIsSet(true);
      }
    }
  }

}

