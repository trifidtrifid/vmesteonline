/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserTopic implements org.apache.thrift.TBase<UserTopic, UserTopic._Fields>, java.io.Serializable, Cloneable, Comparable<UserTopic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTopic");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("messagesNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("lastActivity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOLIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("dolike", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField READ_MESSAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("readMessageNum", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserTopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTopicTupleSchemeFactory());
  }

  public long userId; // required
  public long topicId; // required
  public boolean archived; // required
  public int messagesNum; // required
  public int lastActivity; // required
  public byte dolike; // required
  public int readMessageNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    TOPIC_ID((short)2, "topicId"),
    ARCHIVED((short)3, "archived"),
    MESSAGES_NUM((short)4, "messagesNum"),
    LAST_ACTIVITY((short)5, "lastActivity"),
    DOLIKE((short)6, "dolike"),
    READ_MESSAGE_NUM((short)7, "readMessageNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // TOPIC_ID
          return TOPIC_ID;
        case 3: // ARCHIVED
          return ARCHIVED;
        case 4: // MESSAGES_NUM
          return MESSAGES_NUM;
        case 5: // LAST_ACTIVITY
          return LAST_ACTIVITY;
        case 6: // DOLIKE
          return DOLIKE;
        case 7: // READ_MESSAGE_NUM
          return READ_MESSAGE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __TOPICID_ISSET_ID = 1;
  private static final int __ARCHIVED_ISSET_ID = 2;
  private static final int __MESSAGESNUM_ISSET_ID = 3;
  private static final int __LASTACTIVITY_ISSET_ID = 4;
  private static final int __DOLIKE_ISSET_ID = 5;
  private static final int __READMESSAGENUM_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGES_NUM, new org.apache.thrift.meta_data.FieldMetaData("messagesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("lastActivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOLIKE, new org.apache.thrift.meta_data.FieldMetaData("dolike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.READ_MESSAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("readMessageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTopic.class, metaDataMap);
  }

  public UserTopic() {
  }

  public UserTopic(
    long userId,
    long topicId,
    boolean archived,
    int messagesNum,
    int lastActivity,
    byte dolike,
    int readMessageNum)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.topicId = topicId;
    setTopicIdIsSet(true);
    this.archived = archived;
    setArchivedIsSet(true);
    this.messagesNum = messagesNum;
    setMessagesNumIsSet(true);
    this.lastActivity = lastActivity;
    setLastActivityIsSet(true);
    this.dolike = dolike;
    setDolikeIsSet(true);
    this.readMessageNum = readMessageNum;
    setReadMessageNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTopic(UserTopic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.topicId = other.topicId;
    this.archived = other.archived;
    this.messagesNum = other.messagesNum;
    this.lastActivity = other.lastActivity;
    this.dolike = other.dolike;
    this.readMessageNum = other.readMessageNum;
  }

  public UserTopic deepCopy() {
    return new UserTopic(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setTopicIdIsSet(false);
    this.topicId = 0;
    setArchivedIsSet(false);
    this.archived = false;
    setMessagesNumIsSet(false);
    this.messagesNum = 0;
    setLastActivityIsSet(false);
    this.lastActivity = 0;
    setDolikeIsSet(false);
    this.dolike = 0;
    setReadMessageNumIsSet(false);
    this.readMessageNum = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserTopic setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getTopicId() {
    return this.topicId;
  }

  public UserTopic setTopicId(long topicId) {
    this.topicId = topicId;
    setTopicIdIsSet(true);
    return this;
  }

  public void unsetTopicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicId() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  public void setTopicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
  }

  public boolean isArchived() {
    return this.archived;
  }

  public UserTopic setArchived(boolean archived) {
    this.archived = archived;
    setArchivedIsSet(true);
    return this;
  }

  public void unsetArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
  }

  /** Returns true if field archived is set (has been assigned a value) and false otherwise */
  public boolean isSetArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
  }

  public void setArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
  }

  public int getMessagesNum() {
    return this.messagesNum;
  }

  public UserTopic setMessagesNum(int messagesNum) {
    this.messagesNum = messagesNum;
    setMessagesNumIsSet(true);
    return this;
  }

  public void unsetMessagesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID);
  }

  /** Returns true if field messagesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMessagesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID);
  }

  public void setMessagesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID, value);
  }

  public int getLastActivity() {
    return this.lastActivity;
  }

  public UserTopic setLastActivity(int lastActivity) {
    this.lastActivity = lastActivity;
    setLastActivityIsSet(true);
    return this;
  }

  public void unsetLastActivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID);
  }

  /** Returns true if field lastActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetLastActivity() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID);
  }

  public void setLastActivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID, value);
  }

  public byte getDolike() {
    return this.dolike;
  }

  public UserTopic setDolike(byte dolike) {
    this.dolike = dolike;
    setDolikeIsSet(true);
    return this;
  }

  public void unsetDolike() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOLIKE_ISSET_ID);
  }

  /** Returns true if field dolike is set (has been assigned a value) and false otherwise */
  public boolean isSetDolike() {
    return EncodingUtils.testBit(__isset_bitfield, __DOLIKE_ISSET_ID);
  }

  public void setDolikeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOLIKE_ISSET_ID, value);
  }

  public int getReadMessageNum() {
    return this.readMessageNum;
  }

  public UserTopic setReadMessageNum(int readMessageNum) {
    this.readMessageNum = readMessageNum;
    setReadMessageNumIsSet(true);
    return this;
  }

  public void unsetReadMessageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READMESSAGENUM_ISSET_ID);
  }

  /** Returns true if field readMessageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetReadMessageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __READMESSAGENUM_ISSET_ID);
  }

  public void setReadMessageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READMESSAGENUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case TOPIC_ID:
      if (value == null) {
        unsetTopicId();
      } else {
        setTopicId((Long)value);
      }
      break;

    case ARCHIVED:
      if (value == null) {
        unsetArchived();
      } else {
        setArchived((Boolean)value);
      }
      break;

    case MESSAGES_NUM:
      if (value == null) {
        unsetMessagesNum();
      } else {
        setMessagesNum((Integer)value);
      }
      break;

    case LAST_ACTIVITY:
      if (value == null) {
        unsetLastActivity();
      } else {
        setLastActivity((Integer)value);
      }
      break;

    case DOLIKE:
      if (value == null) {
        unsetDolike();
      } else {
        setDolike((Byte)value);
      }
      break;

    case READ_MESSAGE_NUM:
      if (value == null) {
        unsetReadMessageNum();
      } else {
        setReadMessageNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case TOPIC_ID:
      return Long.valueOf(getTopicId());

    case ARCHIVED:
      return Boolean.valueOf(isArchived());

    case MESSAGES_NUM:
      return Integer.valueOf(getMessagesNum());

    case LAST_ACTIVITY:
      return Integer.valueOf(getLastActivity());

    case DOLIKE:
      return Byte.valueOf(getDolike());

    case READ_MESSAGE_NUM:
      return Integer.valueOf(getReadMessageNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case TOPIC_ID:
      return isSetTopicId();
    case ARCHIVED:
      return isSetArchived();
    case MESSAGES_NUM:
      return isSetMessagesNum();
    case LAST_ACTIVITY:
      return isSetLastActivity();
    case DOLIKE:
      return isSetDolike();
    case READ_MESSAGE_NUM:
      return isSetReadMessageNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTopic)
      return this.equals((UserTopic)that);
    return false;
  }

  public boolean equals(UserTopic that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_topicId = true;
    boolean that_present_topicId = true;
    if (this_present_topicId || that_present_topicId) {
      if (!(this_present_topicId && that_present_topicId))
        return false;
      if (this.topicId != that.topicId)
        return false;
    }

    boolean this_present_archived = true;
    boolean that_present_archived = true;
    if (this_present_archived || that_present_archived) {
      if (!(this_present_archived && that_present_archived))
        return false;
      if (this.archived != that.archived)
        return false;
    }

    boolean this_present_messagesNum = true;
    boolean that_present_messagesNum = true;
    if (this_present_messagesNum || that_present_messagesNum) {
      if (!(this_present_messagesNum && that_present_messagesNum))
        return false;
      if (this.messagesNum != that.messagesNum)
        return false;
    }

    boolean this_present_lastActivity = true;
    boolean that_present_lastActivity = true;
    if (this_present_lastActivity || that_present_lastActivity) {
      if (!(this_present_lastActivity && that_present_lastActivity))
        return false;
      if (this.lastActivity != that.lastActivity)
        return false;
    }

    boolean this_present_dolike = true;
    boolean that_present_dolike = true;
    if (this_present_dolike || that_present_dolike) {
      if (!(this_present_dolike && that_present_dolike))
        return false;
      if (this.dolike != that.dolike)
        return false;
    }

    boolean this_present_readMessageNum = true;
    boolean that_present_readMessageNum = true;
    if (this_present_readMessageNum || that_present_readMessageNum) {
      if (!(this_present_readMessageNum && that_present_readMessageNum))
        return false;
      if (this.readMessageNum != that.readMessageNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserTopic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessagesNum()).compareTo(other.isSetMessagesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessagesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messagesNum, other.messagesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastActivity()).compareTo(other.isSetLastActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastActivity, other.lastActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDolike()).compareTo(other.isSetDolike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDolike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dolike, other.dolike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReadMessageNum()).compareTo(other.isSetReadMessageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadMessageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readMessageNum, other.readMessageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserTopic(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicId:");
    sb.append(this.topicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archived:");
    sb.append(this.archived);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messagesNum:");
    sb.append(this.messagesNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastActivity:");
    sb.append(this.lastActivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dolike:");
    sb.append(this.dolike);
    first = false;
    if (!first) sb.append(", ");
    sb.append("readMessageNum:");
    sb.append(this.readMessageNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTopicStandardSchemeFactory implements SchemeFactory {
    public UserTopicStandardScheme getScheme() {
      return new UserTopicStandardScheme();
    }
  }

  private static class UserTopicStandardScheme extends StandardScheme<UserTopic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTopic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.topicId = iprot.readI64();
              struct.setTopicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.archived = iprot.readBool();
              struct.setArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messagesNum = iprot.readI32();
              struct.setMessagesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastActivity = iprot.readI32();
              struct.setLastActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOLIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.dolike = iprot.readByte();
              struct.setDolikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // READ_MESSAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readMessageNum = iprot.readI32();
              struct.setReadMessageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTopic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
      oprot.writeI64(struct.topicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
      oprot.writeBool(struct.archived);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_NUM_FIELD_DESC);
      oprot.writeI32(struct.messagesNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACTIVITY_FIELD_DESC);
      oprot.writeI32(struct.lastActivity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOLIKE_FIELD_DESC);
      oprot.writeByte(struct.dolike);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(READ_MESSAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.readMessageNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTopicTupleSchemeFactory implements SchemeFactory {
    public UserTopicTupleScheme getScheme() {
      return new UserTopicTupleScheme();
    }
  }

  private static class UserTopicTupleScheme extends TupleScheme<UserTopic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetTopicId()) {
        optionals.set(1);
      }
      if (struct.isSetArchived()) {
        optionals.set(2);
      }
      if (struct.isSetMessagesNum()) {
        optionals.set(3);
      }
      if (struct.isSetLastActivity()) {
        optionals.set(4);
      }
      if (struct.isSetDolike()) {
        optionals.set(5);
      }
      if (struct.isSetReadMessageNum()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetTopicId()) {
        oprot.writeI64(struct.topicId);
      }
      if (struct.isSetArchived()) {
        oprot.writeBool(struct.archived);
      }
      if (struct.isSetMessagesNum()) {
        oprot.writeI32(struct.messagesNum);
      }
      if (struct.isSetLastActivity()) {
        oprot.writeI32(struct.lastActivity);
      }
      if (struct.isSetDolike()) {
        oprot.writeByte(struct.dolike);
      }
      if (struct.isSetReadMessageNum()) {
        oprot.writeI32(struct.readMessageNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topicId = iprot.readI64();
        struct.setTopicIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.archived = iprot.readBool();
        struct.setArchivedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messagesNum = iprot.readI32();
        struct.setMessagesNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastActivity = iprot.readI32();
        struct.setLastActivityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dolike = iprot.readByte();
        struct.setDolikeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.readMessageNum = iprot.readI32();
        struct.setReadMessageNumIsSet(true);
      }
    }
  }

}

