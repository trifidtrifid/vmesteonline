/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserTopic implements org.apache.thrift.TBase<UserTopic, UserTopic._Fields>, java.io.Serializable, Cloneable, Comparable<UserTopic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserTopic");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("lastActivity", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOLIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("dolike", org.apache.thrift.protocol.TType.BYTE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserTopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTopicTupleSchemeFactory());
  }

  public int user; // required
  public int topic; // required
  public boolean archived; // required
  public int messages; // required
  public int lastActivity; // required
  public byte dolike; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    TOPIC((short)2, "topic"),
    ARCHIVED((short)3, "archived"),
    MESSAGES((short)4, "messages"),
    LAST_ACTIVITY((short)5, "lastActivity"),
    DOLIKE((short)6, "dolike");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // TOPIC
          return TOPIC;
        case 3: // ARCHIVED
          return ARCHIVED;
        case 4: // MESSAGES
          return MESSAGES;
        case 5: // LAST_ACTIVITY
          return LAST_ACTIVITY;
        case 6: // DOLIKE
          return DOLIKE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ISSET_ID = 0;
  private static final int __TOPIC_ISSET_ID = 1;
  private static final int __ARCHIVED_ISSET_ID = 2;
  private static final int __MESSAGES_ISSET_ID = 3;
  private static final int __LASTACTIVITY_ISSET_ID = 4;
  private static final int __DOLIKE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("lastActivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOLIKE, new org.apache.thrift.meta_data.FieldMetaData("dolike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserTopic.class, metaDataMap);
  }

  public UserTopic() {
  }

  public UserTopic(
    int user,
    int topic,
    boolean archived,
    int messages,
    int lastActivity,
    byte dolike)
  {
    this();
    this.user = user;
    setUserIsSet(true);
    this.topic = topic;
    setTopicIsSet(true);
    this.archived = archived;
    setArchivedIsSet(true);
    this.messages = messages;
    setMessagesIsSet(true);
    this.lastActivity = lastActivity;
    setLastActivityIsSet(true);
    this.dolike = dolike;
    setDolikeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserTopic(UserTopic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user = other.user;
    this.topic = other.topic;
    this.archived = other.archived;
    this.messages = other.messages;
    this.lastActivity = other.lastActivity;
    this.dolike = other.dolike;
  }

  public UserTopic deepCopy() {
    return new UserTopic(this);
  }

  @Override
  public void clear() {
    setUserIsSet(false);
    this.user = 0;
    setTopicIsSet(false);
    this.topic = 0;
    setArchivedIsSet(false);
    this.archived = false;
    setMessagesIsSet(false);
    this.messages = 0;
    setLastActivityIsSet(false);
    this.lastActivity = 0;
    setDolikeIsSet(false);
    this.dolike = 0;
  }

  public int getUser() {
    return this.user;
  }

  public UserTopic setUser(int user) {
    this.user = user;
    setUserIsSet(true);
    return this;
  }

  public void unsetUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
  }

  public void setUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
  }

  public int getTopic() {
    return this.topic;
  }

  public UserTopic setTopic(int topic) {
    this.topic = topic;
    setTopicIsSet(true);
    return this;
  }

  public void unsetTopic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPIC_ISSET_ID);
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPIC_ISSET_ID);
  }

  public void setTopicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPIC_ISSET_ID, value);
  }

  public boolean isArchived() {
    return this.archived;
  }

  public UserTopic setArchived(boolean archived) {
    this.archived = archived;
    setArchivedIsSet(true);
    return this;
  }

  public void unsetArchived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
  }

  /** Returns true if field archived is set (has been assigned a value) and false otherwise */
  public boolean isSetArchived() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
  }

  public void setArchivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
  }

  public int getMessages() {
    return this.messages;
  }

  public UserTopic setMessages(int messages) {
    this.messages = messages;
    setMessagesIsSet(true);
    return this;
  }

  public void unsetMessages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGES_ISSET_ID);
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGES_ISSET_ID);
  }

  public void setMessagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGES_ISSET_ID, value);
  }

  public int getLastActivity() {
    return this.lastActivity;
  }

  public UserTopic setLastActivity(int lastActivity) {
    this.lastActivity = lastActivity;
    setLastActivityIsSet(true);
    return this;
  }

  public void unsetLastActivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID);
  }

  /** Returns true if field lastActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetLastActivity() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID);
  }

  public void setLastActivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACTIVITY_ISSET_ID, value);
  }

  public byte getDolike() {
    return this.dolike;
  }

  public UserTopic setDolike(byte dolike) {
    this.dolike = dolike;
    setDolikeIsSet(true);
    return this;
  }

  public void unsetDolike() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOLIKE_ISSET_ID);
  }

  /** Returns true if field dolike is set (has been assigned a value) and false otherwise */
  public boolean isSetDolike() {
    return EncodingUtils.testBit(__isset_bitfield, __DOLIKE_ISSET_ID);
  }

  public void setDolikeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOLIKE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((Integer)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((Integer)value);
      }
      break;

    case ARCHIVED:
      if (value == null) {
        unsetArchived();
      } else {
        setArchived((Boolean)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((Integer)value);
      }
      break;

    case LAST_ACTIVITY:
      if (value == null) {
        unsetLastActivity();
      } else {
        setLastActivity((Integer)value);
      }
      break;

    case DOLIKE:
      if (value == null) {
        unsetDolike();
      } else {
        setDolike((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return Integer.valueOf(getUser());

    case TOPIC:
      return Integer.valueOf(getTopic());

    case ARCHIVED:
      return Boolean.valueOf(isArchived());

    case MESSAGES:
      return Integer.valueOf(getMessages());

    case LAST_ACTIVITY:
      return Integer.valueOf(getLastActivity());

    case DOLIKE:
      return Byte.valueOf(getDolike());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case TOPIC:
      return isSetTopic();
    case ARCHIVED:
      return isSetArchived();
    case MESSAGES:
      return isSetMessages();
    case LAST_ACTIVITY:
      return isSetLastActivity();
    case DOLIKE:
      return isSetDolike();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserTopic)
      return this.equals((UserTopic)that);
    return false;
  }

  public boolean equals(UserTopic that) {
    if (that == null)
      return false;

    boolean this_present_user = true;
    boolean that_present_user = true;
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (this.user != that.user)
        return false;
    }

    boolean this_present_topic = true;
    boolean that_present_topic = true;
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (this.topic != that.topic)
        return false;
    }

    boolean this_present_archived = true;
    boolean that_present_archived = true;
    if (this_present_archived || that_present_archived) {
      if (!(this_present_archived && that_present_archived))
        return false;
      if (this.archived != that.archived)
        return false;
    }

    boolean this_present_messages = true;
    boolean that_present_messages = true;
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (this.messages != that.messages)
        return false;
    }

    boolean this_present_lastActivity = true;
    boolean that_present_lastActivity = true;
    if (this_present_lastActivity || that_present_lastActivity) {
      if (!(this_present_lastActivity && that_present_lastActivity))
        return false;
      if (this.lastActivity != that.lastActivity)
        return false;
    }

    boolean this_present_dolike = true;
    boolean that_present_dolike = true;
    if (this_present_dolike || that_present_dolike) {
      if (!(this_present_dolike && that_present_dolike))
        return false;
      if (this.dolike != that.dolike)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserTopic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastActivity()).compareTo(other.isSetLastActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastActivity, other.lastActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDolike()).compareTo(other.isSetDolike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDolike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dolike, other.dolike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserTopic(");
    boolean first = true;

    sb.append("user:");
    sb.append(this.user);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    sb.append(this.topic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archived:");
    sb.append(this.archived);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    sb.append(this.messages);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastActivity:");
    sb.append(this.lastActivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dolike:");
    sb.append(this.dolike);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserTopicStandardSchemeFactory implements SchemeFactory {
    public UserTopicStandardScheme getScheme() {
      return new UserTopicStandardScheme();
    }
  }

  private static class UserTopicStandardScheme extends StandardScheme<UserTopic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserTopic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user = iprot.readI32();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topic = iprot.readI32();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARCHIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.archived = iprot.readBool();
              struct.setArchivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messages = iprot.readI32();
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastActivity = iprot.readI32();
              struct.setLastActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOLIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.dolike = iprot.readByte();
              struct.setDolikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserTopic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_FIELD_DESC);
      oprot.writeI32(struct.user);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPIC_FIELD_DESC);
      oprot.writeI32(struct.topic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
      oprot.writeBool(struct.archived);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
      oprot.writeI32(struct.messages);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_ACTIVITY_FIELD_DESC);
      oprot.writeI32(struct.lastActivity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOLIKE_FIELD_DESC);
      oprot.writeByte(struct.dolike);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTopicTupleSchemeFactory implements SchemeFactory {
    public UserTopicTupleScheme getScheme() {
      return new UserTopicTupleScheme();
    }
  }

  private static class UserTopicTupleScheme extends TupleScheme<UserTopic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetTopic()) {
        optionals.set(1);
      }
      if (struct.isSetArchived()) {
        optionals.set(2);
      }
      if (struct.isSetMessages()) {
        optionals.set(3);
      }
      if (struct.isSetLastActivity()) {
        optionals.set(4);
      }
      if (struct.isSetDolike()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUser()) {
        oprot.writeI32(struct.user);
      }
      if (struct.isSetTopic()) {
        oprot.writeI32(struct.topic);
      }
      if (struct.isSetArchived()) {
        oprot.writeBool(struct.archived);
      }
      if (struct.isSetMessages()) {
        oprot.writeI32(struct.messages);
      }
      if (struct.isSetLastActivity()) {
        oprot.writeI32(struct.lastActivity);
      }
      if (struct.isSetDolike()) {
        oprot.writeByte(struct.dolike);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.user = iprot.readI32();
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topic = iprot.readI32();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.archived = iprot.readBool();
        struct.setArchivedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messages = iprot.readI32();
        struct.setMessagesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastActivity = iprot.readI32();
        struct.setLastActivityIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dolike = iprot.readByte();
        struct.setDolikeIsSet(true);
      }
    }
  }

}

