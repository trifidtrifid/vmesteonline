/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Session implements org.apache.thrift.TBase<Session, Session._Fields>, java.io.Serializable, Cloneable, Comparable<Session> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Session");

  private static final org.apache.thrift.protocol.TField SALT_FIELD_DESC = new org.apache.thrift.protocol.TField("salt", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField USER_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userAgent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACCESS_GRANTED_FIELD_DESC = new org.apache.thrift.protocol.TField("accessGranted", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SessionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SessionTupleSchemeFactory());
  }

  public String salt; // required
  public User user; // required
  public int created; // required
  public String userAgent; // optional
  public String cookie; // optional
  public boolean accessGranted; // required
  public String error; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALT((short)1, "salt"),
    USER((short)2, "user"),
    CREATED((short)3, "created"),
    USER_AGENT((short)4, "userAgent"),
    COOKIE((short)5, "cookie"),
    ACCESS_GRANTED((short)6, "accessGranted"),
    ERROR((short)7, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALT
          return SALT;
        case 2: // USER
          return USER;
        case 3: // CREATED
          return CREATED;
        case 4: // USER_AGENT
          return USER_AGENT;
        case 5: // COOKIE
          return COOKIE;
        case 6: // ACCESS_GRANTED
          return ACCESS_GRANTED;
        case 7: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATED_ISSET_ID = 0;
  private static final int __ACCESSGRANTED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER_AGENT,_Fields.COOKIE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALT, new org.apache.thrift.meta_data.FieldMetaData("salt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_AGENT, new org.apache.thrift.meta_data.FieldMetaData("userAgent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_GRANTED, new org.apache.thrift.meta_data.FieldMetaData("accessGranted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Session.class, metaDataMap);
  }

  public Session() {
  }

  public Session(
    String salt,
    User user,
    int created,
    boolean accessGranted,
    String error)
  {
    this();
    this.salt = salt;
    this.user = user;
    this.created = created;
    setCreatedIsSet(true);
    this.accessGranted = accessGranted;
    setAccessGrantedIsSet(true);
    this.error = error;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Session(Session other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSalt()) {
      this.salt = other.salt;
    }
    if (other.isSetUser()) {
      this.user = new User(other.user);
    }
    this.created = other.created;
    if (other.isSetUserAgent()) {
      this.userAgent = other.userAgent;
    }
    if (other.isSetCookie()) {
      this.cookie = other.cookie;
    }
    this.accessGranted = other.accessGranted;
    if (other.isSetError()) {
      this.error = other.error;
    }
  }

  public Session deepCopy() {
    return new Session(this);
  }

  @Override
  public void clear() {
    this.salt = null;
    this.user = null;
    setCreatedIsSet(false);
    this.created = 0;
    this.userAgent = null;
    this.cookie = null;
    setAccessGrantedIsSet(false);
    this.accessGranted = false;
    this.error = null;
  }

  public String getSalt() {
    return this.salt;
  }

  public Session setSalt(String salt) {
    this.salt = salt;
    return this;
  }

  public void unsetSalt() {
    this.salt = null;
  }

  /** Returns true if field salt is set (has been assigned a value) and false otherwise */
  public boolean isSetSalt() {
    return this.salt != null;
  }

  public void setSaltIsSet(boolean value) {
    if (!value) {
      this.salt = null;
    }
  }

  public User getUser() {
    return this.user;
  }

  public Session setUser(User user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public int getCreated() {
    return this.created;
  }

  public Session setCreated(int created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public String getUserAgent() {
    return this.userAgent;
  }

  public Session setUserAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  public void unsetUserAgent() {
    this.userAgent = null;
  }

  /** Returns true if field userAgent is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgent() {
    return this.userAgent != null;
  }

  public void setUserAgentIsSet(boolean value) {
    if (!value) {
      this.userAgent = null;
    }
  }

  public String getCookie() {
    return this.cookie;
  }

  public Session setCookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

  public void unsetCookie() {
    this.cookie = null;
  }

  /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
  public boolean isSetCookie() {
    return this.cookie != null;
  }

  public void setCookieIsSet(boolean value) {
    if (!value) {
      this.cookie = null;
    }
  }

  public boolean isAccessGranted() {
    return this.accessGranted;
  }

  public Session setAccessGranted(boolean accessGranted) {
    this.accessGranted = accessGranted;
    setAccessGrantedIsSet(true);
    return this;
  }

  public void unsetAccessGranted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCESSGRANTED_ISSET_ID);
  }

  /** Returns true if field accessGranted is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessGranted() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCESSGRANTED_ISSET_ID);
  }

  public void setAccessGrantedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCESSGRANTED_ISSET_ID, value);
  }

  public String getError() {
    return this.error;
  }

  public Session setError(String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SALT:
      if (value == null) {
        unsetSalt();
      } else {
        setSalt((String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((User)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Integer)value);
      }
      break;

    case USER_AGENT:
      if (value == null) {
        unsetUserAgent();
      } else {
        setUserAgent((String)value);
      }
      break;

    case COOKIE:
      if (value == null) {
        unsetCookie();
      } else {
        setCookie((String)value);
      }
      break;

    case ACCESS_GRANTED:
      if (value == null) {
        unsetAccessGranted();
      } else {
        setAccessGranted((Boolean)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SALT:
      return getSalt();

    case USER:
      return getUser();

    case CREATED:
      return Integer.valueOf(getCreated());

    case USER_AGENT:
      return getUserAgent();

    case COOKIE:
      return getCookie();

    case ACCESS_GRANTED:
      return Boolean.valueOf(isAccessGranted());

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SALT:
      return isSetSalt();
    case USER:
      return isSetUser();
    case CREATED:
      return isSetCreated();
    case USER_AGENT:
      return isSetUserAgent();
    case COOKIE:
      return isSetCookie();
    case ACCESS_GRANTED:
      return isSetAccessGranted();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Session)
      return this.equals((Session)that);
    return false;
  }

  public boolean equals(Session that) {
    if (that == null)
      return false;

    boolean this_present_salt = true && this.isSetSalt();
    boolean that_present_salt = true && that.isSetSalt();
    if (this_present_salt || that_present_salt) {
      if (!(this_present_salt && that_present_salt))
        return false;
      if (!this.salt.equals(that.salt))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_userAgent = true && this.isSetUserAgent();
    boolean that_present_userAgent = true && that.isSetUserAgent();
    if (this_present_userAgent || that_present_userAgent) {
      if (!(this_present_userAgent && that_present_userAgent))
        return false;
      if (!this.userAgent.equals(that.userAgent))
        return false;
    }

    boolean this_present_cookie = true && this.isSetCookie();
    boolean that_present_cookie = true && that.isSetCookie();
    if (this_present_cookie || that_present_cookie) {
      if (!(this_present_cookie && that_present_cookie))
        return false;
      if (!this.cookie.equals(that.cookie))
        return false;
    }

    boolean this_present_accessGranted = true;
    boolean that_present_accessGranted = true;
    if (this_present_accessGranted || that_present_accessGranted) {
      if (!(this_present_accessGranted && that_present_accessGranted))
        return false;
      if (this.accessGranted != that.accessGranted)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Session other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSalt()).compareTo(other.isSetSalt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salt, other.salt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserAgent()).compareTo(other.isSetUserAgent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userAgent, other.userAgent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCookie()).compareTo(other.isSetCookie());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookie()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, other.cookie);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessGranted()).compareTo(other.isSetAccessGranted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessGranted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessGranted, other.accessGranted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Session(");
    boolean first = true;

    sb.append("salt:");
    if (this.salt == null) {
      sb.append("null");
    } else {
      sb.append(this.salt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user:");
    if (this.user == null) {
      sb.append("null");
    } else {
      sb.append(this.user);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (isSetUserAgent()) {
      if (!first) sb.append(", ");
      sb.append("userAgent:");
      if (this.userAgent == null) {
        sb.append("null");
      } else {
        sb.append(this.userAgent);
      }
      first = false;
    }
    if (isSetCookie()) {
      if (!first) sb.append(", ");
      sb.append("cookie:");
      if (this.cookie == null) {
        sb.append("null");
      } else {
        sb.append(this.cookie);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("accessGranted:");
    sb.append(this.accessGranted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (user != null) {
      user.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SessionStandardSchemeFactory implements SchemeFactory {
    public SessionStandardScheme getScheme() {
      return new SessionStandardScheme();
    }
  }

  private static class SessionStandardScheme extends StandardScheme<Session> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Session struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.salt = iprot.readString();
              struct.setSaltIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.user = new User();
              struct.user.read(iprot);
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.created = iprot.readI32();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_AGENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userAgent = iprot.readString();
              struct.setUserAgentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COOKIE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookie = iprot.readString();
              struct.setCookieIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCESS_GRANTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.accessGranted = iprot.readBool();
              struct.setAccessGrantedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Session struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.salt != null) {
        oprot.writeFieldBegin(SALT_FIELD_DESC);
        oprot.writeString(struct.salt);
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        struct.user.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI32(struct.created);
      oprot.writeFieldEnd();
      if (struct.userAgent != null) {
        if (struct.isSetUserAgent()) {
          oprot.writeFieldBegin(USER_AGENT_FIELD_DESC);
          oprot.writeString(struct.userAgent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cookie != null) {
        if (struct.isSetCookie()) {
          oprot.writeFieldBegin(COOKIE_FIELD_DESC);
          oprot.writeString(struct.cookie);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(ACCESS_GRANTED_FIELD_DESC);
      oprot.writeBool(struct.accessGranted);
      oprot.writeFieldEnd();
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeString(struct.error);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SessionTupleSchemeFactory implements SchemeFactory {
    public SessionTupleScheme getScheme() {
      return new SessionTupleScheme();
    }
  }

  private static class SessionTupleScheme extends TupleScheme<Session> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Session struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSalt()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetCreated()) {
        optionals.set(2);
      }
      if (struct.isSetUserAgent()) {
        optionals.set(3);
      }
      if (struct.isSetCookie()) {
        optionals.set(4);
      }
      if (struct.isSetAccessGranted()) {
        optionals.set(5);
      }
      if (struct.isSetError()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSalt()) {
        oprot.writeString(struct.salt);
      }
      if (struct.isSetUser()) {
        struct.user.write(oprot);
      }
      if (struct.isSetCreated()) {
        oprot.writeI32(struct.created);
      }
      if (struct.isSetUserAgent()) {
        oprot.writeString(struct.userAgent);
      }
      if (struct.isSetCookie()) {
        oprot.writeString(struct.cookie);
      }
      if (struct.isSetAccessGranted()) {
        oprot.writeBool(struct.accessGranted);
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Session struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.salt = iprot.readString();
        struct.setSaltIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = new User();
        struct.user.read(iprot);
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.created = iprot.readI32();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userAgent = iprot.readString();
        struct.setUserAgentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cookie = iprot.readString();
        struct.setCookieIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accessGranted = iprot.readBool();
        struct.setAccessGrantedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
    }
  }

}

