/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Friendship implements org.apache.thrift.TBase<Friendship, Friendship._Fields>, java.io.Serializable, Cloneable, Comparable<Friendship> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Friendship");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FriendshipStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FriendshipTupleSchemeFactory());
  }

  public int user; // required
  public int friend; // required
  /**
   * 
   * @see FriendshipType
   */
  public FriendshipType state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    FRIEND((short)2, "friend"),
    /**
     * 
     * @see FriendshipType
     */
    STATE((short)3, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // FRIEND
          return FRIEND;
        case 3: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ISSET_ID = 0;
  private static final int __FRIEND_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FriendshipType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Friendship.class, metaDataMap);
  }

  public Friendship() {
  }

  public Friendship(
    int user,
    int friend,
    FriendshipType state)
  {
    this();
    this.user = user;
    setUserIsSet(true);
    this.friend = friend;
    setFriendIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Friendship(Friendship other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user = other.user;
    this.friend = other.friend;
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public Friendship deepCopy() {
    return new Friendship(this);
  }

  @Override
  public void clear() {
    setUserIsSet(false);
    this.user = 0;
    setFriendIsSet(false);
    this.friend = 0;
    this.state = null;
  }

  public int getUser() {
    return this.user;
  }

  public Friendship setUser(int user) {
    this.user = user;
    setUserIsSet(true);
    return this;
  }

  public void unsetUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
  }

  public void setUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
  }

  public int getFriend() {
    return this.friend;
  }

  public Friendship setFriend(int friend) {
    this.friend = friend;
    setFriendIsSet(true);
    return this;
  }

  public void unsetFriend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRIEND_ISSET_ID);
  }

  /** Returns true if field friend is set (has been assigned a value) and false otherwise */
  public boolean isSetFriend() {
    return EncodingUtils.testBit(__isset_bitfield, __FRIEND_ISSET_ID);
  }

  public void setFriendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRIEND_ISSET_ID, value);
  }

  /**
   * 
   * @see FriendshipType
   */
  public FriendshipType getState() {
    return this.state;
  }

  /**
   * 
   * @see FriendshipType
   */
  public Friendship setState(FriendshipType state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((Integer)value);
      }
      break;

    case FRIEND:
      if (value == null) {
        unsetFriend();
      } else {
        setFriend((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((FriendshipType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return Integer.valueOf(getUser());

    case FRIEND:
      return Integer.valueOf(getFriend());

    case STATE:
      return getState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case FRIEND:
      return isSetFriend();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Friendship)
      return this.equals((Friendship)that);
    return false;
  }

  public boolean equals(Friendship that) {
    if (that == null)
      return false;

    boolean this_present_user = true;
    boolean that_present_user = true;
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (this.user != that.user)
        return false;
    }

    boolean this_present_friend = true;
    boolean that_present_friend = true;
    if (this_present_friend || that_present_friend) {
      if (!(this_present_friend && that_present_friend))
        return false;
      if (this.friend != that.friend)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Friendship other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFriend()).compareTo(other.isSetFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, other.friend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Friendship(");
    boolean first = true;

    sb.append("user:");
    sb.append(this.user);
    first = false;
    if (!first) sb.append(", ");
    sb.append("friend:");
    sb.append(this.friend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FriendshipStandardSchemeFactory implements SchemeFactory {
    public FriendshipStandardScheme getScheme() {
      return new FriendshipStandardScheme();
    }
  }

  private static class FriendshipStandardScheme extends StandardScheme<Friendship> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Friendship struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user = iprot.readI32();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.friend = iprot.readI32();
              struct.setFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = FriendshipType.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Friendship struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_FIELD_DESC);
      oprot.writeI32(struct.user);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FRIEND_FIELD_DESC);
      oprot.writeI32(struct.friend);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FriendshipTupleSchemeFactory implements SchemeFactory {
    public FriendshipTupleScheme getScheme() {
      return new FriendshipTupleScheme();
    }
  }

  private static class FriendshipTupleScheme extends TupleScheme<Friendship> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Friendship struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetFriend()) {
        optionals.set(1);
      }
      if (struct.isSetState()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUser()) {
        oprot.writeI32(struct.user);
      }
      if (struct.isSetFriend()) {
        oprot.writeI32(struct.friend);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Friendship struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.user = iprot.readI32();
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.friend = iprot.readI32();
        struct.setFriendIsSet(true);
      }
      if (incoming.get(2)) {
        struct.state = FriendshipType.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

}

