/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageService {

  public interface Iface {

    /**
     * МЕтод для создаия нового сообщения
     * 
     * 
     * 
     * @param topicId
     * @param parentId
     * @param groupId
     * @param type
     * @param content
     * @param linkedMessages
     * @param tags
     * @param recipientId
     */
    public Message createMessage(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Cоздание нового или обновление старого сообщения
     * 
     * 
     * @param msg
     */
    public long postMessage(Message msg) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public Topic createTopic(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId) throws org.apache.thrift.TException;

    public long postTopic(Topic topic) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * checkUpdates запрашивает наличие обновлений с момента предыдущего запроса, который возвращает сервер в ответе
     * если обновлений нет - в ответ приходит новое значение таймстампа формирования ответа на сервере.
     * При наличии обновлений возвращается 0
     * 
     * 
     * @param lastResposeTimestamp
     */
    public int checkUpdates(int lastResposeTimestamp) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public GroupUpdates getUpdates() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public TopicListPart getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Загрузка части преставления дерева сообщений в виде дерева. parentID указывает на сообщение топика или на сообщение первого уровня
     * 
     * 
     * @param topicId
     * @param groupId
     * @param messageType
     * @param lastLoadedId
     * @param archived
     * @param length
     */
    public MessageListPart getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public MessageListPart getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public UserOpinion likeOrDislikeMessage(long messageId, int opinion) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public UserOpinion likeOrDislikeTopic(long topicId, int opinion) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long markReadMessage(long messageId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long markReadTopic(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long moveTopicToArchive(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long restoreTopicFromArchive(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long markTopicUnintrested(long topicId, boolean interested) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long makeMessageLinked(long message1Id, long message2Id) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createMessage(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createTopic(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void postTopic(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkUpdates(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUpdates(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void likeOrDislikeMessage(long messageId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void likeOrDislikeTopic(long topicId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markReadMessage(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markReadTopic(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void moveTopicToArchive(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void restoreTopicFromArchive(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void markTopicUnintrested(long topicId, boolean interested, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void makeMessageLinked(long message1Id, long message2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Message createMessage(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_createMessage(topicId, parentId, groupId, type, content, linkedMessages, tags, recipientId);
      return recv_createMessage();
    }

    public void send_createMessage(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId) throws org.apache.thrift.TException
    {
      createMessage_args args = new createMessage_args();
      args.setTopicId(topicId);
      args.setParentId(parentId);
      args.setGroupId(groupId);
      args.setType(type);
      args.setContent(content);
      args.setLinkedMessages(linkedMessages);
      args.setTags(tags);
      args.setRecipientId(recipientId);
      sendBase("createMessage", args);
    }

    public Message recv_createMessage() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      createMessage_result result = new createMessage_result();
      receiveBase(result, "createMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createMessage failed: unknown result");
    }

    public long postMessage(Message msg) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_postMessage(msg);
      return recv_postMessage();
    }

    public void send_postMessage(Message msg) throws org.apache.thrift.TException
    {
      postMessage_args args = new postMessage_args();
      args.setMsg(msg);
      sendBase("postMessage", args);
    }

    public long recv_postMessage() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      postMessage_result result = new postMessage_result();
      receiveBase(result, "postMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postMessage failed: unknown result");
    }

    public Topic createTopic(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId) throws org.apache.thrift.TException
    {
      send_createTopic(groupId, subject, type, content, linkedMessages, tags, rubricId, communityId);
      return recv_createTopic();
    }

    public void send_createTopic(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId) throws org.apache.thrift.TException
    {
      createTopic_args args = new createTopic_args();
      args.setGroupId(groupId);
      args.setSubject(subject);
      args.setType(type);
      args.setContent(content);
      args.setLinkedMessages(linkedMessages);
      args.setTags(tags);
      args.setRubricId(rubricId);
      args.setCommunityId(communityId);
      sendBase("createTopic", args);
    }

    public Topic recv_createTopic() throws org.apache.thrift.TException
    {
      createTopic_result result = new createTopic_result();
      receiveBase(result, "createTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createTopic failed: unknown result");
    }

    public long postTopic(Topic topic) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_postTopic(topic);
      return recv_postTopic();
    }

    public void send_postTopic(Topic topic) throws org.apache.thrift.TException
    {
      postTopic_args args = new postTopic_args();
      args.setTopic(topic);
      sendBase("postTopic", args);
    }

    public long recv_postTopic() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      postTopic_result result = new postTopic_result();
      receiveBase(result, "postTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "postTopic failed: unknown result");
    }

    public int checkUpdates(int lastResposeTimestamp) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_checkUpdates(lastResposeTimestamp);
      return recv_checkUpdates();
    }

    public void send_checkUpdates(int lastResposeTimestamp) throws org.apache.thrift.TException
    {
      checkUpdates_args args = new checkUpdates_args();
      args.setLastResposeTimestamp(lastResposeTimestamp);
      sendBase("checkUpdates", args);
    }

    public int recv_checkUpdates() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      checkUpdates_result result = new checkUpdates_result();
      receiveBase(result, "checkUpdates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUpdates failed: unknown result");
    }

    public GroupUpdates getUpdates() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getUpdates();
      return recv_getUpdates();
    }

    public void send_getUpdates() throws org.apache.thrift.TException
    {
      getUpdates_args args = new getUpdates_args();
      sendBase("getUpdates", args);
    }

    public GroupUpdates recv_getUpdates() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getUpdates_result result = new getUpdates_result();
      receiveBase(result, "getUpdates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUpdates failed: unknown result");
    }

    public TopicListPart getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getTopics(groupId, rubricId, commmunityId, lastLoadedTopicId, length);
      return recv_getTopics();
    }

    public void send_getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length) throws org.apache.thrift.TException
    {
      getTopics_args args = new getTopics_args();
      args.setGroupId(groupId);
      args.setRubricId(rubricId);
      args.setCommmunityId(commmunityId);
      args.setLastLoadedTopicId(lastLoadedTopicId);
      args.setLength(length);
      sendBase("getTopics", args);
    }

    public TopicListPart recv_getTopics() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getTopics_result result = new getTopics_result();
      receiveBase(result, "getTopics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTopics failed: unknown result");
    }

    public MessageListPart getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getMessages(topicId, groupId, messageType, lastLoadedId, archived, length);
      return recv_getMessages();
    }

    public void send_getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws org.apache.thrift.TException
    {
      getMessages_args args = new getMessages_args();
      args.setTopicId(topicId);
      args.setGroupId(groupId);
      args.setMessageType(messageType);
      args.setLastLoadedId(lastLoadedId);
      args.setArchived(archived);
      args.setLength(length);
      sendBase("getMessages", args);
    }

    public MessageListPart recv_getMessages() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getMessages_result result = new getMessages_result();
      receiveBase(result, "getMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessages failed: unknown result");
    }

    public MessageListPart getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getFirstLevelMessages(topicId, groupId, messageType, lastLoadedId, archived, length);
      return recv_getFirstLevelMessages();
    }

    public void send_getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length) throws org.apache.thrift.TException
    {
      getFirstLevelMessages_args args = new getFirstLevelMessages_args();
      args.setTopicId(topicId);
      args.setGroupId(groupId);
      args.setMessageType(messageType);
      args.setLastLoadedId(lastLoadedId);
      args.setArchived(archived);
      args.setLength(length);
      sendBase("getFirstLevelMessages", args);
    }

    public MessageListPart recv_getFirstLevelMessages() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getFirstLevelMessages_result result = new getFirstLevelMessages_result();
      receiveBase(result, "getFirstLevelMessages");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFirstLevelMessages failed: unknown result");
    }

    public UserOpinion likeOrDislikeMessage(long messageId, int opinion) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_likeOrDislikeMessage(messageId, opinion);
      return recv_likeOrDislikeMessage();
    }

    public void send_likeOrDislikeMessage(long messageId, int opinion) throws org.apache.thrift.TException
    {
      likeOrDislikeMessage_args args = new likeOrDislikeMessage_args();
      args.setMessageId(messageId);
      args.setOpinion(opinion);
      sendBase("likeOrDislikeMessage", args);
    }

    public UserOpinion recv_likeOrDislikeMessage() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      likeOrDislikeMessage_result result = new likeOrDislikeMessage_result();
      receiveBase(result, "likeOrDislikeMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "likeOrDislikeMessage failed: unknown result");
    }

    public UserOpinion likeOrDislikeTopic(long topicId, int opinion) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_likeOrDislikeTopic(topicId, opinion);
      return recv_likeOrDislikeTopic();
    }

    public void send_likeOrDislikeTopic(long topicId, int opinion) throws org.apache.thrift.TException
    {
      likeOrDislikeTopic_args args = new likeOrDislikeTopic_args();
      args.setTopicId(topicId);
      args.setOpinion(opinion);
      sendBase("likeOrDislikeTopic", args);
    }

    public UserOpinion recv_likeOrDislikeTopic() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      likeOrDislikeTopic_result result = new likeOrDislikeTopic_result();
      receiveBase(result, "likeOrDislikeTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "likeOrDislikeTopic failed: unknown result");
    }

    public long markReadMessage(long messageId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_markReadMessage(messageId);
      return recv_markReadMessage();
    }

    public void send_markReadMessage(long messageId) throws org.apache.thrift.TException
    {
      markReadMessage_args args = new markReadMessage_args();
      args.setMessageId(messageId);
      sendBase("markReadMessage", args);
    }

    public long recv_markReadMessage() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      markReadMessage_result result = new markReadMessage_result();
      receiveBase(result, "markReadMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markReadMessage failed: unknown result");
    }

    public long markReadTopic(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_markReadTopic(topicId);
      return recv_markReadTopic();
    }

    public void send_markReadTopic(long topicId) throws org.apache.thrift.TException
    {
      markReadTopic_args args = new markReadTopic_args();
      args.setTopicId(topicId);
      sendBase("markReadTopic", args);
    }

    public long recv_markReadTopic() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      markReadTopic_result result = new markReadTopic_result();
      receiveBase(result, "markReadTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markReadTopic failed: unknown result");
    }

    public long moveTopicToArchive(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_moveTopicToArchive(topicId);
      return recv_moveTopicToArchive();
    }

    public void send_moveTopicToArchive(long topicId) throws org.apache.thrift.TException
    {
      moveTopicToArchive_args args = new moveTopicToArchive_args();
      args.setTopicId(topicId);
      sendBase("moveTopicToArchive", args);
    }

    public long recv_moveTopicToArchive() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      moveTopicToArchive_result result = new moveTopicToArchive_result();
      receiveBase(result, "moveTopicToArchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveTopicToArchive failed: unknown result");
    }

    public long restoreTopicFromArchive(long topicId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_restoreTopicFromArchive(topicId);
      return recv_restoreTopicFromArchive();
    }

    public void send_restoreTopicFromArchive(long topicId) throws org.apache.thrift.TException
    {
      restoreTopicFromArchive_args args = new restoreTopicFromArchive_args();
      args.setTopicId(topicId);
      sendBase("restoreTopicFromArchive", args);
    }

    public long recv_restoreTopicFromArchive() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      restoreTopicFromArchive_result result = new restoreTopicFromArchive_result();
      receiveBase(result, "restoreTopicFromArchive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "restoreTopicFromArchive failed: unknown result");
    }

    public long markTopicUnintrested(long topicId, boolean interested) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_markTopicUnintrested(topicId, interested);
      return recv_markTopicUnintrested();
    }

    public void send_markTopicUnintrested(long topicId, boolean interested) throws org.apache.thrift.TException
    {
      markTopicUnintrested_args args = new markTopicUnintrested_args();
      args.setTopicId(topicId);
      args.setInterested(interested);
      sendBase("markTopicUnintrested", args);
    }

    public long recv_markTopicUnintrested() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      markTopicUnintrested_result result = new markTopicUnintrested_result();
      receiveBase(result, "markTopicUnintrested");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markTopicUnintrested failed: unknown result");
    }

    public long makeMessageLinked(long message1Id, long message2Id) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_makeMessageLinked(message1Id, message2Id);
      return recv_makeMessageLinked();
    }

    public void send_makeMessageLinked(long message1Id, long message2Id) throws org.apache.thrift.TException
    {
      makeMessageLinked_args args = new makeMessageLinked_args();
      args.setMessage1Id(message1Id);
      args.setMessage2Id(message2Id);
      sendBase("makeMessageLinked", args);
    }

    public long recv_makeMessageLinked() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      makeMessageLinked_result result = new makeMessageLinked_result();
      receiveBase(result, "makeMessageLinked");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "makeMessageLinked failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createMessage(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createMessage_call method_call = new createMessage_call(topicId, parentId, groupId, type, content, linkedMessages, tags, recipientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private long parentId;
      private long groupId;
      private MessageType type;
      private String content;
      private Map<MessageType,Long> linkedMessages;
      private Map<Long,String> tags;
      private long recipientId;
      public createMessage_call(long topicId, long parentId, long groupId, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long recipientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.parentId = parentId;
        this.groupId = groupId;
        this.type = type;
        this.content = content;
        this.linkedMessages = linkedMessages;
        this.tags = tags;
        this.recipientId = recipientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createMessage_args args = new createMessage_args();
        args.setTopicId(topicId);
        args.setParentId(parentId);
        args.setGroupId(groupId);
        args.setType(type);
        args.setContent(content);
        args.setLinkedMessages(linkedMessages);
        args.setTags(tags);
        args.setRecipientId(recipientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Message getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createMessage();
      }
    }

    public void postMessage(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postMessage_call method_call = new postMessage_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Message msg;
      public postMessage_call(Message msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postMessage_args args = new postMessage_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postMessage();
      }
    }

    public void createTopic(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createTopic_call method_call = new createTopic_call(groupId, subject, type, content, linkedMessages, tags, rubricId, communityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private String subject;
      private MessageType type;
      private String content;
      private Map<MessageType,Long> linkedMessages;
      private Map<Long,String> tags;
      private long rubricId;
      private long communityId;
      public createTopic_call(long groupId, String subject, MessageType type, String content, Map<MessageType,Long> linkedMessages, Map<Long,String> tags, long rubricId, long communityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.subject = subject;
        this.type = type;
        this.content = content;
        this.linkedMessages = linkedMessages;
        this.tags = tags;
        this.rubricId = rubricId;
        this.communityId = communityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createTopic_args args = new createTopic_args();
        args.setGroupId(groupId);
        args.setSubject(subject);
        args.setType(type);
        args.setContent(content);
        args.setLinkedMessages(linkedMessages);
        args.setTags(tags);
        args.setRubricId(rubricId);
        args.setCommunityId(communityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Topic getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createTopic();
      }
    }

    public void postTopic(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      postTopic_call method_call = new postTopic_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class postTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Topic topic;
      public postTopic_call(Topic topic, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("postTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        postTopic_args args = new postTopic_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_postTopic();
      }
    }

    public void checkUpdates(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUpdates_call method_call = new checkUpdates_call(lastResposeTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUpdates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int lastResposeTimestamp;
      public checkUpdates_call(int lastResposeTimestamp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lastResposeTimestamp = lastResposeTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUpdates_args args = new checkUpdates_args();
        args.setLastResposeTimestamp(lastResposeTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUpdates();
      }
    }

    public void getUpdates(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUpdates_call method_call = new getUpdates_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUpdates_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUpdates_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUpdates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUpdates_args args = new getUpdates_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GroupUpdates getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUpdates();
      }
    }

    public void getTopics(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTopics_call method_call = new getTopics_call(groupId, rubricId, commmunityId, lastLoadedTopicId, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTopics_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long groupId;
      private long rubricId;
      private int commmunityId;
      private long lastLoadedTopicId;
      private int length;
      public getTopics_call(long groupId, long rubricId, int commmunityId, long lastLoadedTopicId, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
        this.rubricId = rubricId;
        this.commmunityId = commmunityId;
        this.lastLoadedTopicId = lastLoadedTopicId;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTopics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTopics_args args = new getTopics_args();
        args.setGroupId(groupId);
        args.setRubricId(rubricId);
        args.setCommmunityId(commmunityId);
        args.setLastLoadedTopicId(lastLoadedTopicId);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TopicListPart getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTopics();
      }
    }

    public void getMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessages_call method_call = new getMessages_call(topicId, groupId, messageType, lastLoadedId, archived, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private long groupId;
      private MessageType messageType;
      private long lastLoadedId;
      private boolean archived;
      private int length;
      public getMessages_call(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.groupId = groupId;
        this.messageType = messageType;
        this.lastLoadedId = lastLoadedId;
        this.archived = archived;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessages_args args = new getMessages_args();
        args.setTopicId(topicId);
        args.setGroupId(groupId);
        args.setMessageType(messageType);
        args.setLastLoadedId(lastLoadedId);
        args.setArchived(archived);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageListPart getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessages();
      }
    }

    public void getFirstLevelMessages(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFirstLevelMessages_call method_call = new getFirstLevelMessages_call(topicId, groupId, messageType, lastLoadedId, archived, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFirstLevelMessages_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private long groupId;
      private MessageType messageType;
      private long lastLoadedId;
      private boolean archived;
      private int length;
      public getFirstLevelMessages_call(long topicId, long groupId, MessageType messageType, long lastLoadedId, boolean archived, int length, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.groupId = groupId;
        this.messageType = messageType;
        this.lastLoadedId = lastLoadedId;
        this.archived = archived;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFirstLevelMessages", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFirstLevelMessages_args args = new getFirstLevelMessages_args();
        args.setTopicId(topicId);
        args.setGroupId(groupId);
        args.setMessageType(messageType);
        args.setLastLoadedId(lastLoadedId);
        args.setArchived(archived);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MessageListPart getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFirstLevelMessages();
      }
    }

    public void likeOrDislikeMessage(long messageId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      likeOrDislikeMessage_call method_call = new likeOrDislikeMessage_call(messageId, opinion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class likeOrDislikeMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      private int opinion;
      public likeOrDislikeMessage_call(long messageId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
        this.opinion = opinion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("likeOrDislikeMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        likeOrDislikeMessage_args args = new likeOrDislikeMessage_args();
        args.setMessageId(messageId);
        args.setOpinion(opinion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserOpinion getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_likeOrDislikeMessage();
      }
    }

    public void likeOrDislikeTopic(long topicId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      likeOrDislikeTopic_call method_call = new likeOrDislikeTopic_call(topicId, opinion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class likeOrDislikeTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private int opinion;
      public likeOrDislikeTopic_call(long topicId, int opinion, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.opinion = opinion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("likeOrDislikeTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        likeOrDislikeTopic_args args = new likeOrDislikeTopic_args();
        args.setTopicId(topicId);
        args.setOpinion(opinion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserOpinion getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_likeOrDislikeTopic();
      }
    }

    public void markReadMessage(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markReadMessage_call method_call = new markReadMessage_call(messageId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markReadMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long messageId;
      public markReadMessage_call(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.messageId = messageId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markReadMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markReadMessage_args args = new markReadMessage_args();
        args.setMessageId(messageId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markReadMessage();
      }
    }

    public void markReadTopic(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markReadTopic_call method_call = new markReadTopic_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markReadTopic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      public markReadTopic_call(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markReadTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markReadTopic_args args = new markReadTopic_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markReadTopic();
      }
    }

    public void moveTopicToArchive(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveTopicToArchive_call method_call = new moveTopicToArchive_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveTopicToArchive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      public moveTopicToArchive_call(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveTopicToArchive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveTopicToArchive_args args = new moveTopicToArchive_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_moveTopicToArchive();
      }
    }

    public void restoreTopicFromArchive(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      restoreTopicFromArchive_call method_call = new restoreTopicFromArchive_call(topicId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class restoreTopicFromArchive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      public restoreTopicFromArchive_call(long topicId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("restoreTopicFromArchive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        restoreTopicFromArchive_args args = new restoreTopicFromArchive_args();
        args.setTopicId(topicId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_restoreTopicFromArchive();
      }
    }

    public void markTopicUnintrested(long topicId, boolean interested, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markTopicUnintrested_call method_call = new markTopicUnintrested_call(topicId, interested, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markTopicUnintrested_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long topicId;
      private boolean interested;
      public markTopicUnintrested_call(long topicId, boolean interested, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicId = topicId;
        this.interested = interested;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markTopicUnintrested", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markTopicUnintrested_args args = new markTopicUnintrested_args();
        args.setTopicId(topicId);
        args.setInterested(interested);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markTopicUnintrested();
      }
    }

    public void makeMessageLinked(long message1Id, long message2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makeMessageLinked_call method_call = new makeMessageLinked_call(message1Id, message2Id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makeMessageLinked_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long message1Id;
      private long message2Id;
      public makeMessageLinked_call(long message1Id, long message2Id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.message1Id = message1Id;
        this.message2Id = message2Id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makeMessageLinked", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makeMessageLinked_args args = new makeMessageLinked_args();
        args.setMessage1Id(message1Id);
        args.setMessage2Id(message2Id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_makeMessageLinked();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createMessage", new createMessage());
      processMap.put("postMessage", new postMessage());
      processMap.put("createTopic", new createTopic());
      processMap.put("postTopic", new postTopic());
      processMap.put("checkUpdates", new checkUpdates());
      processMap.put("getUpdates", new getUpdates());
      processMap.put("getTopics", new getTopics());
      processMap.put("getMessages", new getMessages());
      processMap.put("getFirstLevelMessages", new getFirstLevelMessages());
      processMap.put("likeOrDislikeMessage", new likeOrDislikeMessage());
      processMap.put("likeOrDislikeTopic", new likeOrDislikeTopic());
      processMap.put("markReadMessage", new markReadMessage());
      processMap.put("markReadTopic", new markReadTopic());
      processMap.put("moveTopicToArchive", new moveTopicToArchive());
      processMap.put("restoreTopicFromArchive", new restoreTopicFromArchive());
      processMap.put("markTopicUnintrested", new markTopicUnintrested());
      processMap.put("makeMessageLinked", new makeMessageLinked());
      return processMap;
    }

    public static class createMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createMessage_args> {
      public createMessage() {
        super("createMessage");
      }

      public createMessage_args getEmptyArgsInstance() {
        return new createMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createMessage_result getResult(I iface, createMessage_args args) throws org.apache.thrift.TException {
        createMessage_result result = new createMessage_result();
        try {
          result.success = iface.createMessage(args.topicId, args.parentId, args.groupId, args.type, args.content, args.linkedMessages, args.tags, args.recipientId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class postMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postMessage_args> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postMessage_result getResult(I iface, postMessage_args args) throws org.apache.thrift.TException {
        postMessage_result result = new postMessage_result();
        try {
          result.success = iface.postMessage(args.msg);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class createTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTopic_args> {
      public createTopic() {
        super("createTopic");
      }

      public createTopic_args getEmptyArgsInstance() {
        return new createTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createTopic_result getResult(I iface, createTopic_args args) throws org.apache.thrift.TException {
        createTopic_result result = new createTopic_result();
        result.success = iface.createTopic(args.groupId, args.subject, args.type, args.content, args.linkedMessages, args.tags, args.rubricId, args.communityId);
        return result;
      }
    }

    public static class postTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, postTopic_args> {
      public postTopic() {
        super("postTopic");
      }

      public postTopic_args getEmptyArgsInstance() {
        return new postTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public postTopic_result getResult(I iface, postTopic_args args) throws org.apache.thrift.TException {
        postTopic_result result = new postTopic_result();
        try {
          result.success = iface.postTopic(args.topic);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class checkUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUpdates_args> {
      public checkUpdates() {
        super("checkUpdates");
      }

      public checkUpdates_args getEmptyArgsInstance() {
        return new checkUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkUpdates_result getResult(I iface, checkUpdates_args args) throws org.apache.thrift.TException {
        checkUpdates_result result = new checkUpdates_result();
        try {
          result.success = iface.checkUpdates(args.lastResposeTimestamp);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getUpdates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUpdates_args> {
      public getUpdates() {
        super("getUpdates");
      }

      public getUpdates_args getEmptyArgsInstance() {
        return new getUpdates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUpdates_result getResult(I iface, getUpdates_args args) throws org.apache.thrift.TException {
        getUpdates_result result = new getUpdates_result();
        try {
          result.success = iface.getUpdates();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getTopics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTopics_args> {
      public getTopics() {
        super("getTopics");
      }

      public getTopics_args getEmptyArgsInstance() {
        return new getTopics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTopics_result getResult(I iface, getTopics_args args) throws org.apache.thrift.TException {
        getTopics_result result = new getTopics_result();
        try {
          result.success = iface.getTopics(args.groupId, args.rubricId, args.commmunityId, args.lastLoadedTopicId, args.length);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessages_args> {
      public getMessages() {
        super("getMessages");
      }

      public getMessages_args getEmptyArgsInstance() {
        return new getMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessages_result getResult(I iface, getMessages_args args) throws org.apache.thrift.TException {
        getMessages_result result = new getMessages_result();
        try {
          result.success = iface.getMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getFirstLevelMessages<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFirstLevelMessages_args> {
      public getFirstLevelMessages() {
        super("getFirstLevelMessages");
      }

      public getFirstLevelMessages_args getEmptyArgsInstance() {
        return new getFirstLevelMessages_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFirstLevelMessages_result getResult(I iface, getFirstLevelMessages_args args) throws org.apache.thrift.TException {
        getFirstLevelMessages_result result = new getFirstLevelMessages_result();
        try {
          result.success = iface.getFirstLevelMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class likeOrDislikeMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, likeOrDislikeMessage_args> {
      public likeOrDislikeMessage() {
        super("likeOrDislikeMessage");
      }

      public likeOrDislikeMessage_args getEmptyArgsInstance() {
        return new likeOrDislikeMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public likeOrDislikeMessage_result getResult(I iface, likeOrDislikeMessage_args args) throws org.apache.thrift.TException {
        likeOrDislikeMessage_result result = new likeOrDislikeMessage_result();
        try {
          result.success = iface.likeOrDislikeMessage(args.messageId, args.opinion);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class likeOrDislikeTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, likeOrDislikeTopic_args> {
      public likeOrDislikeTopic() {
        super("likeOrDislikeTopic");
      }

      public likeOrDislikeTopic_args getEmptyArgsInstance() {
        return new likeOrDislikeTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public likeOrDislikeTopic_result getResult(I iface, likeOrDislikeTopic_args args) throws org.apache.thrift.TException {
        likeOrDislikeTopic_result result = new likeOrDislikeTopic_result();
        try {
          result.success = iface.likeOrDislikeTopic(args.topicId, args.opinion);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class markReadMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markReadMessage_args> {
      public markReadMessage() {
        super("markReadMessage");
      }

      public markReadMessage_args getEmptyArgsInstance() {
        return new markReadMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markReadMessage_result getResult(I iface, markReadMessage_args args) throws org.apache.thrift.TException {
        markReadMessage_result result = new markReadMessage_result();
        try {
          result.success = iface.markReadMessage(args.messageId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class markReadTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markReadTopic_args> {
      public markReadTopic() {
        super("markReadTopic");
      }

      public markReadTopic_args getEmptyArgsInstance() {
        return new markReadTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markReadTopic_result getResult(I iface, markReadTopic_args args) throws org.apache.thrift.TException {
        markReadTopic_result result = new markReadTopic_result();
        try {
          result.success = iface.markReadTopic(args.topicId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class moveTopicToArchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveTopicToArchive_args> {
      public moveTopicToArchive() {
        super("moveTopicToArchive");
      }

      public moveTopicToArchive_args getEmptyArgsInstance() {
        return new moveTopicToArchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public moveTopicToArchive_result getResult(I iface, moveTopicToArchive_args args) throws org.apache.thrift.TException {
        moveTopicToArchive_result result = new moveTopicToArchive_result();
        try {
          result.success = iface.moveTopicToArchive(args.topicId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class restoreTopicFromArchive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, restoreTopicFromArchive_args> {
      public restoreTopicFromArchive() {
        super("restoreTopicFromArchive");
      }

      public restoreTopicFromArchive_args getEmptyArgsInstance() {
        return new restoreTopicFromArchive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public restoreTopicFromArchive_result getResult(I iface, restoreTopicFromArchive_args args) throws org.apache.thrift.TException {
        restoreTopicFromArchive_result result = new restoreTopicFromArchive_result();
        try {
          result.success = iface.restoreTopicFromArchive(args.topicId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class markTopicUnintrested<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markTopicUnintrested_args> {
      public markTopicUnintrested() {
        super("markTopicUnintrested");
      }

      public markTopicUnintrested_args getEmptyArgsInstance() {
        return new markTopicUnintrested_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public markTopicUnintrested_result getResult(I iface, markTopicUnintrested_args args) throws org.apache.thrift.TException {
        markTopicUnintrested_result result = new markTopicUnintrested_result();
        try {
          result.success = iface.markTopicUnintrested(args.topicId, args.interested);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class makeMessageLinked<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makeMessageLinked_args> {
      public makeMessageLinked() {
        super("makeMessageLinked");
      }

      public makeMessageLinked_args getEmptyArgsInstance() {
        return new makeMessageLinked_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makeMessageLinked_result getResult(I iface, makeMessageLinked_args args) throws org.apache.thrift.TException {
        makeMessageLinked_result result = new makeMessageLinked_result();
        try {
          result.success = iface.makeMessageLinked(args.message1Id, args.message2Id);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createMessage", new createMessage());
      processMap.put("postMessage", new postMessage());
      processMap.put("createTopic", new createTopic());
      processMap.put("postTopic", new postTopic());
      processMap.put("checkUpdates", new checkUpdates());
      processMap.put("getUpdates", new getUpdates());
      processMap.put("getTopics", new getTopics());
      processMap.put("getMessages", new getMessages());
      processMap.put("getFirstLevelMessages", new getFirstLevelMessages());
      processMap.put("likeOrDislikeMessage", new likeOrDislikeMessage());
      processMap.put("likeOrDislikeTopic", new likeOrDislikeTopic());
      processMap.put("markReadMessage", new markReadMessage());
      processMap.put("markReadTopic", new markReadTopic());
      processMap.put("moveTopicToArchive", new moveTopicToArchive());
      processMap.put("restoreTopicFromArchive", new restoreTopicFromArchive());
      processMap.put("markTopicUnintrested", new markTopicUnintrested());
      processMap.put("makeMessageLinked", new makeMessageLinked());
      return processMap;
    }

    public static class createMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createMessage_args, Message> {
      public createMessage() {
        super("createMessage");
      }

      public createMessage_args getEmptyArgsInstance() {
        return new createMessage_args();
      }

      public AsyncMethodCallback<Message> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Message>() { 
          public void onComplete(Message o) {
            createMessage_result result = new createMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createMessage_result result = new createMessage_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler) throws TException {
        iface.createMessage(args.topicId, args.parentId, args.groupId, args.type, args.content, args.linkedMessages, args.tags, args.recipientId,resultHandler);
      }
    }

    public static class postMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postMessage_args, Long> {
      public postMessage() {
        super("postMessage");
      }

      public postMessage_args getEmptyArgsInstance() {
        return new postMessage_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            postMessage_result result = new postMessage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postMessage_result result = new postMessage_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.postMessage(args.msg,resultHandler);
      }
    }

    public static class createTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTopic_args, Topic> {
      public createTopic() {
        super("createTopic");
      }

      public createTopic_args getEmptyArgsInstance() {
        return new createTopic_args();
      }

      public AsyncMethodCallback<Topic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Topic>() { 
          public void onComplete(Topic o) {
            createTopic_result result = new createTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createTopic_result result = new createTopic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Topic> resultHandler) throws TException {
        iface.createTopic(args.groupId, args.subject, args.type, args.content, args.linkedMessages, args.tags, args.rubricId, args.communityId,resultHandler);
      }
    }

    public static class postTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, postTopic_args, Long> {
      public postTopic() {
        super("postTopic");
      }

      public postTopic_args getEmptyArgsInstance() {
        return new postTopic_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            postTopic_result result = new postTopic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            postTopic_result result = new postTopic_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, postTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.postTopic(args.topic,resultHandler);
      }
    }

    public static class checkUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUpdates_args, Integer> {
      public checkUpdates() {
        super("checkUpdates");
      }

      public checkUpdates_args getEmptyArgsInstance() {
        return new checkUpdates_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkUpdates_result result = new checkUpdates_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkUpdates_result result = new checkUpdates_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkUpdates(args.lastResposeTimestamp,resultHandler);
      }
    }

    public static class getUpdates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUpdates_args, GroupUpdates> {
      public getUpdates() {
        super("getUpdates");
      }

      public getUpdates_args getEmptyArgsInstance() {
        return new getUpdates_args();
      }

      public AsyncMethodCallback<GroupUpdates> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GroupUpdates>() { 
          public void onComplete(GroupUpdates o) {
            getUpdates_result result = new getUpdates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUpdates_result result = new getUpdates_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUpdates_args args, org.apache.thrift.async.AsyncMethodCallback<GroupUpdates> resultHandler) throws TException {
        iface.getUpdates(resultHandler);
      }
    }

    public static class getTopics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTopics_args, TopicListPart> {
      public getTopics() {
        super("getTopics");
      }

      public getTopics_args getEmptyArgsInstance() {
        return new getTopics_args();
      }

      public AsyncMethodCallback<TopicListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TopicListPart>() { 
          public void onComplete(TopicListPart o) {
            getTopics_result result = new getTopics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTopics_result result = new getTopics_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTopics_args args, org.apache.thrift.async.AsyncMethodCallback<TopicListPart> resultHandler) throws TException {
        iface.getTopics(args.groupId, args.rubricId, args.commmunityId, args.lastLoadedTopicId, args.length,resultHandler);
      }
    }

    public static class getMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessages_args, MessageListPart> {
      public getMessages() {
        super("getMessages");
      }

      public getMessages_args getEmptyArgsInstance() {
        return new getMessages_args();
      }

      public AsyncMethodCallback<MessageListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageListPart>() { 
          public void onComplete(MessageListPart o) {
            getMessages_result result = new getMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessages_result result = new getMessages_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessages_args args, org.apache.thrift.async.AsyncMethodCallback<MessageListPart> resultHandler) throws TException {
        iface.getMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length,resultHandler);
      }
    }

    public static class getFirstLevelMessages<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFirstLevelMessages_args, MessageListPart> {
      public getFirstLevelMessages() {
        super("getFirstLevelMessages");
      }

      public getFirstLevelMessages_args getEmptyArgsInstance() {
        return new getFirstLevelMessages_args();
      }

      public AsyncMethodCallback<MessageListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MessageListPart>() { 
          public void onComplete(MessageListPart o) {
            getFirstLevelMessages_result result = new getFirstLevelMessages_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFirstLevelMessages_result result = new getFirstLevelMessages_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFirstLevelMessages_args args, org.apache.thrift.async.AsyncMethodCallback<MessageListPart> resultHandler) throws TException {
        iface.getFirstLevelMessages(args.topicId, args.groupId, args.messageType, args.lastLoadedId, args.archived, args.length,resultHandler);
      }
    }

    public static class likeOrDislikeMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, likeOrDislikeMessage_args, UserOpinion> {
      public likeOrDislikeMessage() {
        super("likeOrDislikeMessage");
      }

      public likeOrDislikeMessage_args getEmptyArgsInstance() {
        return new likeOrDislikeMessage_args();
      }

      public AsyncMethodCallback<UserOpinion> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserOpinion>() { 
          public void onComplete(UserOpinion o) {
            likeOrDislikeMessage_result result = new likeOrDislikeMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            likeOrDislikeMessage_result result = new likeOrDislikeMessage_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, likeOrDislikeMessage_args args, org.apache.thrift.async.AsyncMethodCallback<UserOpinion> resultHandler) throws TException {
        iface.likeOrDislikeMessage(args.messageId, args.opinion,resultHandler);
      }
    }

    public static class likeOrDislikeTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, likeOrDislikeTopic_args, UserOpinion> {
      public likeOrDislikeTopic() {
        super("likeOrDislikeTopic");
      }

      public likeOrDislikeTopic_args getEmptyArgsInstance() {
        return new likeOrDislikeTopic_args();
      }

      public AsyncMethodCallback<UserOpinion> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserOpinion>() { 
          public void onComplete(UserOpinion o) {
            likeOrDislikeTopic_result result = new likeOrDislikeTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            likeOrDislikeTopic_result result = new likeOrDislikeTopic_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, likeOrDislikeTopic_args args, org.apache.thrift.async.AsyncMethodCallback<UserOpinion> resultHandler) throws TException {
        iface.likeOrDislikeTopic(args.topicId, args.opinion,resultHandler);
      }
    }

    public static class markReadMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markReadMessage_args, Long> {
      public markReadMessage() {
        super("markReadMessage");
      }

      public markReadMessage_args getEmptyArgsInstance() {
        return new markReadMessage_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            markReadMessage_result result = new markReadMessage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markReadMessage_result result = new markReadMessage_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markReadMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.markReadMessage(args.messageId,resultHandler);
      }
    }

    public static class markReadTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markReadTopic_args, Long> {
      public markReadTopic() {
        super("markReadTopic");
      }

      public markReadTopic_args getEmptyArgsInstance() {
        return new markReadTopic_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            markReadTopic_result result = new markReadTopic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markReadTopic_result result = new markReadTopic_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markReadTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.markReadTopic(args.topicId,resultHandler);
      }
    }

    public static class moveTopicToArchive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveTopicToArchive_args, Long> {
      public moveTopicToArchive() {
        super("moveTopicToArchive");
      }

      public moveTopicToArchive_args getEmptyArgsInstance() {
        return new moveTopicToArchive_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            moveTopicToArchive_result result = new moveTopicToArchive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            moveTopicToArchive_result result = new moveTopicToArchive_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveTopicToArchive_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.moveTopicToArchive(args.topicId,resultHandler);
      }
    }

    public static class restoreTopicFromArchive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, restoreTopicFromArchive_args, Long> {
      public restoreTopicFromArchive() {
        super("restoreTopicFromArchive");
      }

      public restoreTopicFromArchive_args getEmptyArgsInstance() {
        return new restoreTopicFromArchive_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            restoreTopicFromArchive_result result = new restoreTopicFromArchive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            restoreTopicFromArchive_result result = new restoreTopicFromArchive_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, restoreTopicFromArchive_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.restoreTopicFromArchive(args.topicId,resultHandler);
      }
    }

    public static class markTopicUnintrested<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markTopicUnintrested_args, Long> {
      public markTopicUnintrested() {
        super("markTopicUnintrested");
      }

      public markTopicUnintrested_args getEmptyArgsInstance() {
        return new markTopicUnintrested_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            markTopicUnintrested_result result = new markTopicUnintrested_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            markTopicUnintrested_result result = new markTopicUnintrested_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markTopicUnintrested_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.markTopicUnintrested(args.topicId, args.interested,resultHandler);
      }
    }

    public static class makeMessageLinked<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makeMessageLinked_args, Long> {
      public makeMessageLinked() {
        super("makeMessageLinked");
      }

      public makeMessageLinked_args getEmptyArgsInstance() {
        return new makeMessageLinked_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            makeMessageLinked_result result = new makeMessageLinked_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            makeMessageLinked_result result = new makeMessageLinked_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makeMessageLinked_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.makeMessageLinked(args.message1Id, args.message2Id,resultHandler);
      }
    }

  }

  public static class createMessage_args implements org.apache.thrift.TBase<createMessage_args, createMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<createMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMessage_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LINKED_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("linkedMessages", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)7);
    private static final org.apache.thrift.protocol.TField RECIPIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recipientId", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMessage_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public long parentId; // required
    public long groupId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType type; // required
    public String content; // required
    public Map<MessageType,Long> linkedMessages; // required
    public Map<Long,String> tags; // required
    public long recipientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      PARENT_ID((short)2, "parentId"),
      GROUP_ID((short)3, "groupId"),
      /**
       * 
       * @see MessageType
       */
      TYPE((short)4, "type"),
      CONTENT((short)5, "content"),
      LINKED_MESSAGES((short)6, "linkedMessages"),
      TAGS((short)7, "tags"),
      RECIPIENT_ID((short)8, "recipientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // PARENT_ID
            return PARENT_ID;
          case 3: // GROUP_ID
            return GROUP_ID;
          case 4: // TYPE
            return TYPE;
          case 5: // CONTENT
            return CONTENT;
          case 6: // LINKED_MESSAGES
            return LINKED_MESSAGES;
          case 7: // TAGS
            return TAGS;
          case 8: // RECIPIENT_ID
            return RECIPIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __PARENTID_ISSET_ID = 1;
    private static final int __GROUPID_ISSET_ID = 2;
    private static final int __RECIPIENTID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINKED_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("linkedMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.RECIPIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("recipientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMessage_args.class, metaDataMap);
    }

    public createMessage_args() {
    }

    public createMessage_args(
      long topicId,
      long parentId,
      long groupId,
      MessageType type,
      String content,
      Map<MessageType,Long> linkedMessages,
      Map<Long,String> tags,
      long recipientId)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.parentId = parentId;
      setParentIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.type = type;
      this.content = content;
      this.linkedMessages = linkedMessages;
      this.tags = tags;
      this.recipientId = recipientId;
      setRecipientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMessage_args(createMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.parentId = other.parentId;
      this.groupId = other.groupId;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetLinkedMessages()) {
        Map<MessageType,Long> __this__linkedMessages = new HashMap<MessageType,Long>(other.linkedMessages.size());
        for (Map.Entry<MessageType, Long> other_element : other.linkedMessages.entrySet()) {

          MessageType other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          MessageType __this__linkedMessages_copy_key = other_element_key;

          Long __this__linkedMessages_copy_value = other_element_value;

          __this__linkedMessages.put(__this__linkedMessages_copy_key, __this__linkedMessages_copy_value);
        }
        this.linkedMessages = __this__linkedMessages;
      }
      if (other.isSetTags()) {
        Map<Long,String> __this__tags = new HashMap<Long,String>(other.tags);
        this.tags = __this__tags;
      }
      this.recipientId = other.recipientId;
    }

    public createMessage_args deepCopy() {
      return new createMessage_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setParentIdIsSet(false);
      this.parentId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.type = null;
      this.content = null;
      this.linkedMessages = null;
      this.tags = null;
      setRecipientIdIsSet(false);
      this.recipientId = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public createMessage_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getParentId() {
      return this.parentId;
    }

    public createMessage_args setParentId(long parentId) {
      this.parentId = parentId;
      setParentIdIsSet(true);
      return this;
    }

    public void unsetParentId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
    public boolean isSetParentId() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
    }

    public void setParentIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public createMessage_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getType() {
      return this.type;
    }

    /**
     * 
     * @see MessageType
     */
    public createMessage_args setType(MessageType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public createMessage_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getLinkedMessagesSize() {
      return (this.linkedMessages == null) ? 0 : this.linkedMessages.size();
    }

    public void putToLinkedMessages(MessageType key, long val) {
      if (this.linkedMessages == null) {
        this.linkedMessages = new HashMap<MessageType,Long>();
      }
      this.linkedMessages.put(key, val);
    }

    public Map<MessageType,Long> getLinkedMessages() {
      return this.linkedMessages;
    }

    public createMessage_args setLinkedMessages(Map<MessageType,Long> linkedMessages) {
      this.linkedMessages = linkedMessages;
      return this;
    }

    public void unsetLinkedMessages() {
      this.linkedMessages = null;
    }

    /** Returns true if field linkedMessages is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkedMessages() {
      return this.linkedMessages != null;
    }

    public void setLinkedMessagesIsSet(boolean value) {
      if (!value) {
        this.linkedMessages = null;
      }
    }

    public int getTagsSize() {
      return (this.tags == null) ? 0 : this.tags.size();
    }

    public void putToTags(long key, String val) {
      if (this.tags == null) {
        this.tags = new HashMap<Long,String>();
      }
      this.tags.put(key, val);
    }

    public Map<Long,String> getTags() {
      return this.tags;
    }

    public createMessage_args setTags(Map<Long,String> tags) {
      this.tags = tags;
      return this;
    }

    public void unsetTags() {
      this.tags = null;
    }

    /** Returns true if field tags is set (has been assigned a value) and false otherwise */
    public boolean isSetTags() {
      return this.tags != null;
    }

    public void setTagsIsSet(boolean value) {
      if (!value) {
        this.tags = null;
      }
    }

    public long getRecipientId() {
      return this.recipientId;
    }

    public createMessage_args setRecipientId(long recipientId) {
      this.recipientId = recipientId;
      setRecipientIdIsSet(true);
      return this;
    }

    public void unsetRecipientId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
    }

    /** Returns true if field recipientId is set (has been assigned a value) and false otherwise */
    public boolean isSetRecipientId() {
      return EncodingUtils.testBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
    }

    public void setRecipientIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case PARENT_ID:
        if (value == null) {
          unsetParentId();
        } else {
          setParentId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((MessageType)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case LINKED_MESSAGES:
        if (value == null) {
          unsetLinkedMessages();
        } else {
          setLinkedMessages((Map<MessageType,Long>)value);
        }
        break;

      case TAGS:
        if (value == null) {
          unsetTags();
        } else {
          setTags((Map<Long,String>)value);
        }
        break;

      case RECIPIENT_ID:
        if (value == null) {
          unsetRecipientId();
        } else {
          setRecipientId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case PARENT_ID:
        return Long.valueOf(getParentId());

      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case TYPE:
        return getType();

      case CONTENT:
        return getContent();

      case LINKED_MESSAGES:
        return getLinkedMessages();

      case TAGS:
        return getTags();

      case RECIPIENT_ID:
        return Long.valueOf(getRecipientId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case PARENT_ID:
        return isSetParentId();
      case GROUP_ID:
        return isSetGroupId();
      case TYPE:
        return isSetType();
      case CONTENT:
        return isSetContent();
      case LINKED_MESSAGES:
        return isSetLinkedMessages();
      case TAGS:
        return isSetTags();
      case RECIPIENT_ID:
        return isSetRecipientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMessage_args)
        return this.equals((createMessage_args)that);
      return false;
    }

    public boolean equals(createMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_parentId = true;
      boolean that_present_parentId = true;
      if (this_present_parentId || that_present_parentId) {
        if (!(this_present_parentId && that_present_parentId))
          return false;
        if (this.parentId != that.parentId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_linkedMessages = true && this.isSetLinkedMessages();
      boolean that_present_linkedMessages = true && that.isSetLinkedMessages();
      if (this_present_linkedMessages || that_present_linkedMessages) {
        if (!(this_present_linkedMessages && that_present_linkedMessages))
          return false;
        if (!this.linkedMessages.equals(that.linkedMessages))
          return false;
      }

      boolean this_present_tags = true && this.isSetTags();
      boolean that_present_tags = true && that.isSetTags();
      if (this_present_tags || that_present_tags) {
        if (!(this_present_tags && that_present_tags))
          return false;
        if (!this.tags.equals(that.tags))
          return false;
      }

      boolean this_present_recipientId = true;
      boolean that_present_recipientId = true;
      if (this_present_recipientId || that_present_recipientId) {
        if (!(this_present_recipientId && that_present_recipientId))
          return false;
        if (this.recipientId != that.recipientId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedMessages()).compareTo(other.isSetLinkedMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkedMessages, other.linkedMessages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRecipientId()).compareTo(other.isSetRecipientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecipientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipientId, other.recipientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMessage_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parentId:");
      sb.append(this.parentId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedMessages:");
      if (this.linkedMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedMessages);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("recipientId:");
      sb.append(this.recipientId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMessage_argsStandardSchemeFactory implements SchemeFactory {
      public createMessage_argsStandardScheme getScheme() {
        return new createMessage_argsStandardScheme();
      }
    }

    private static class createMessage_argsStandardScheme extends StandardScheme<createMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.parentId = iprot.readI64();
                struct.setParentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = MessageType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LINKED_MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                  struct.linkedMessages = new HashMap<MessageType,Long>(2*_map46.size);
                  for (int _i47 = 0; _i47 < _map46.size; ++_i47)
                  {
                    MessageType _key48;
                    long _val49;
                    _key48 = MessageType.findByValue(iprot.readI32());
                    _val49 = iprot.readI64();
                    struct.linkedMessages.put(_key48, _val49);
                  }
                  iprot.readMapEnd();
                }
                struct.setLinkedMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.tags = new HashMap<Long,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    long _key52;
                    String _val53;
                    _key52 = iprot.readI64();
                    _val53 = iprot.readString();
                    struct.tags.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setTagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RECIPIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.recipientId = iprot.readI64();
                struct.setRecipientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeI64(struct.parentId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.linkedMessages != null) {
          oprot.writeFieldBegin(LINKED_MESSAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.linkedMessages.size()));
            for (Map.Entry<MessageType, Long> _iter54 : struct.linkedMessages.entrySet())
            {
              oprot.writeI32(_iter54.getKey().getValue());
              oprot.writeI64(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tags != null) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (Map.Entry<Long, String> _iter55 : struct.tags.entrySet())
            {
              oprot.writeI64(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECIPIENT_ID_FIELD_DESC);
        oprot.writeI64(struct.recipientId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMessage_argsTupleSchemeFactory implements SchemeFactory {
      public createMessage_argsTupleScheme getScheme() {
        return new createMessage_argsTupleScheme();
      }
    }

    private static class createMessage_argsTupleScheme extends TupleScheme<createMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetParentId()) {
          optionals.set(1);
        }
        if (struct.isSetGroupId()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetContent()) {
          optionals.set(4);
        }
        if (struct.isSetLinkedMessages()) {
          optionals.set(5);
        }
        if (struct.isSetTags()) {
          optionals.set(6);
        }
        if (struct.isSetRecipientId()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetParentId()) {
          oprot.writeI64(struct.parentId);
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetLinkedMessages()) {
          {
            oprot.writeI32(struct.linkedMessages.size());
            for (Map.Entry<MessageType, Long> _iter56 : struct.linkedMessages.entrySet())
            {
              oprot.writeI32(_iter56.getKey().getValue());
              oprot.writeI64(_iter56.getValue());
            }
          }
        }
        if (struct.isSetTags()) {
          {
            oprot.writeI32(struct.tags.size());
            for (Map.Entry<Long, String> _iter57 : struct.tags.entrySet())
            {
              oprot.writeI64(_iter57.getKey());
              oprot.writeString(_iter57.getValue());
            }
          }
        }
        if (struct.isSetRecipientId()) {
          oprot.writeI64(struct.recipientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parentId = iprot.readI64();
          struct.setParentIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = MessageType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map58 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.linkedMessages = new HashMap<MessageType,Long>(2*_map58.size);
            for (int _i59 = 0; _i59 < _map58.size; ++_i59)
            {
              MessageType _key60;
              long _val61;
              _key60 = MessageType.findByValue(iprot.readI32());
              _val61 = iprot.readI64();
              struct.linkedMessages.put(_key60, _val61);
            }
          }
          struct.setLinkedMessagesIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TMap _map62 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tags = new HashMap<Long,String>(2*_map62.size);
            for (int _i63 = 0; _i63 < _map62.size; ++_i63)
            {
              long _key64;
              String _val65;
              _key64 = iprot.readI64();
              _val65 = iprot.readString();
              struct.tags.put(_key64, _val65);
            }
          }
          struct.setTagsIsSet(true);
        }
        if (incoming.get(7)) {
          struct.recipientId = iprot.readI64();
          struct.setRecipientIdIsSet(true);
        }
      }
    }

  }

  public static class createMessage_result implements org.apache.thrift.TBase<createMessage_result, createMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<createMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createMessage_resultTupleSchemeFactory());
    }

    public Message success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createMessage_result.class, metaDataMap);
    }

    public createMessage_result() {
    }

    public createMessage_result(
      Message success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createMessage_result(createMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public createMessage_result deepCopy() {
      return new createMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public createMessage_result setSuccess(Message success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public createMessage_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Message)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createMessage_result)
        return this.equals((createMessage_result)that);
      return false;
    }

    public boolean equals(createMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createMessage_resultStandardSchemeFactory implements SchemeFactory {
      public createMessage_resultStandardScheme getScheme() {
        return new createMessage_resultStandardScheme();
      }
    }

    private static class createMessage_resultStandardScheme extends StandardScheme<createMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Message();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createMessage_resultTupleSchemeFactory implements SchemeFactory {
      public createMessage_resultTupleScheme getScheme() {
        return new createMessage_resultTupleScheme();
      }
    }

    private static class createMessage_resultTupleScheme extends TupleScheme<createMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Message();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class postMessage_args implements org.apache.thrift.TBase<postMessage_args, postMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_argsTupleSchemeFactory());
    }

    public Message msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_args.class, metaDataMap);
    }

    public postMessage_args() {
    }

    public postMessage_args(
      Message msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_args(postMessage_args other) {
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
    }

    public postMessage_args deepCopy() {
      return new postMessage_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public Message getMsg() {
      return this.msg;
    }

    public postMessage_args setMsg(Message msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((Message)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_args)
        return this.equals((postMessage_args)that);
      return false;
    }

    public boolean equals(postMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msg != null) {
        msg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_argsStandardSchemeFactory implements SchemeFactory {
      public postMessage_argsStandardScheme getScheme() {
        return new postMessage_argsStandardScheme();
      }
    }

    private static class postMessage_argsStandardScheme extends StandardScheme<postMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new Message();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_argsTupleSchemeFactory implements SchemeFactory {
      public postMessage_argsTupleScheme getScheme() {
        return new postMessage_argsTupleScheme();
      }
    }

    private static class postMessage_argsTupleScheme extends TupleScheme<postMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = new Message();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class postMessage_result implements org.apache.thrift.TBase<postMessage_result, postMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<postMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postMessage_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postMessage_result.class, metaDataMap);
    }

    public postMessage_result() {
    }

    public postMessage_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postMessage_result(postMessage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public postMessage_result deepCopy() {
      return new postMessage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public postMessage_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public postMessage_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postMessage_result)
        return this.equals((postMessage_result)that);
      return false;
    }

    public boolean equals(postMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postMessage_resultStandardSchemeFactory implements SchemeFactory {
      public postMessage_resultStandardScheme getScheme() {
        return new postMessage_resultStandardScheme();
      }
    }

    private static class postMessage_resultStandardScheme extends StandardScheme<postMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postMessage_resultTupleSchemeFactory implements SchemeFactory {
      public postMessage_resultTupleScheme getScheme() {
        return new postMessage_resultTupleScheme();
      }
    }

    private static class postMessage_resultTupleScheme extends TupleScheme<postMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class createTopic_args implements org.apache.thrift.TBase<createTopic_args, createTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTopic_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LINKED_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("linkedMessages", org.apache.thrift.protocol.TType.MAP, (short)5);
    private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)6);
    private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField COMMUNITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("communityId", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTopic_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public String subject; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType type; // required
    public String content; // required
    public Map<MessageType,Long> linkedMessages; // required
    public Map<Long,String> tags; // required
    public long rubricId; // required
    public long communityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      SUBJECT((short)2, "subject"),
      /**
       * 
       * @see MessageType
       */
      TYPE((short)3, "type"),
      CONTENT((short)4, "content"),
      LINKED_MESSAGES((short)5, "linkedMessages"),
      TAGS((short)6, "tags"),
      RUBRIC_ID((short)7, "rubricId"),
      COMMUNITY_ID((short)8, "communityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // SUBJECT
            return SUBJECT;
          case 3: // TYPE
            return TYPE;
          case 4: // CONTENT
            return CONTENT;
          case 5: // LINKED_MESSAGES
            return LINKED_MESSAGES;
          case 6: // TAGS
            return TAGS;
          case 7: // RUBRIC_ID
            return RUBRIC_ID;
          case 8: // COMMUNITY_ID
            return COMMUNITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __RUBRICID_ISSET_ID = 1;
    private static final int __COMMUNITYID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINKED_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("linkedMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMUNITY_ID, new org.apache.thrift.meta_data.FieldMetaData("communityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTopic_args.class, metaDataMap);
    }

    public createTopic_args() {
    }

    public createTopic_args(
      long groupId,
      String subject,
      MessageType type,
      String content,
      Map<MessageType,Long> linkedMessages,
      Map<Long,String> tags,
      long rubricId,
      long communityId)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.subject = subject;
      this.type = type;
      this.content = content;
      this.linkedMessages = linkedMessages;
      this.tags = tags;
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      this.communityId = communityId;
      setCommunityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTopic_args(createTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      if (other.isSetSubject()) {
        this.subject = other.subject;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetLinkedMessages()) {
        Map<MessageType,Long> __this__linkedMessages = new HashMap<MessageType,Long>(other.linkedMessages.size());
        for (Map.Entry<MessageType, Long> other_element : other.linkedMessages.entrySet()) {

          MessageType other_element_key = other_element.getKey();
          Long other_element_value = other_element.getValue();

          MessageType __this__linkedMessages_copy_key = other_element_key;

          Long __this__linkedMessages_copy_value = other_element_value;

          __this__linkedMessages.put(__this__linkedMessages_copy_key, __this__linkedMessages_copy_value);
        }
        this.linkedMessages = __this__linkedMessages;
      }
      if (other.isSetTags()) {
        Map<Long,String> __this__tags = new HashMap<Long,String>(other.tags);
        this.tags = __this__tags;
      }
      this.rubricId = other.rubricId;
      this.communityId = other.communityId;
    }

    public createTopic_args deepCopy() {
      return new createTopic_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.subject = null;
      this.type = null;
      this.content = null;
      this.linkedMessages = null;
      this.tags = null;
      setRubricIdIsSet(false);
      this.rubricId = 0;
      setCommunityIdIsSet(false);
      this.communityId = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public createTopic_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public String getSubject() {
      return this.subject;
    }

    public createTopic_args setSubject(String subject) {
      this.subject = subject;
      return this;
    }

    public void unsetSubject() {
      this.subject = null;
    }

    /** Returns true if field subject is set (has been assigned a value) and false otherwise */
    public boolean isSetSubject() {
      return this.subject != null;
    }

    public void setSubjectIsSet(boolean value) {
      if (!value) {
        this.subject = null;
      }
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getType() {
      return this.type;
    }

    /**
     * 
     * @see MessageType
     */
    public createTopic_args setType(MessageType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public createTopic_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getLinkedMessagesSize() {
      return (this.linkedMessages == null) ? 0 : this.linkedMessages.size();
    }

    public void putToLinkedMessages(MessageType key, long val) {
      if (this.linkedMessages == null) {
        this.linkedMessages = new HashMap<MessageType,Long>();
      }
      this.linkedMessages.put(key, val);
    }

    public Map<MessageType,Long> getLinkedMessages() {
      return this.linkedMessages;
    }

    public createTopic_args setLinkedMessages(Map<MessageType,Long> linkedMessages) {
      this.linkedMessages = linkedMessages;
      return this;
    }

    public void unsetLinkedMessages() {
      this.linkedMessages = null;
    }

    /** Returns true if field linkedMessages is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkedMessages() {
      return this.linkedMessages != null;
    }

    public void setLinkedMessagesIsSet(boolean value) {
      if (!value) {
        this.linkedMessages = null;
      }
    }

    public int getTagsSize() {
      return (this.tags == null) ? 0 : this.tags.size();
    }

    public void putToTags(long key, String val) {
      if (this.tags == null) {
        this.tags = new HashMap<Long,String>();
      }
      this.tags.put(key, val);
    }

    public Map<Long,String> getTags() {
      return this.tags;
    }

    public createTopic_args setTags(Map<Long,String> tags) {
      this.tags = tags;
      return this;
    }

    public void unsetTags() {
      this.tags = null;
    }

    /** Returns true if field tags is set (has been assigned a value) and false otherwise */
    public boolean isSetTags() {
      return this.tags != null;
    }

    public void setTagsIsSet(boolean value) {
      if (!value) {
        this.tags = null;
      }
    }

    public long getRubricId() {
      return this.rubricId;
    }

    public createTopic_args setRubricId(long rubricId) {
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      return this;
    }

    public void unsetRubricId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
    public boolean isSetRubricId() {
      return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    public void setRubricIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
    }

    public long getCommunityId() {
      return this.communityId;
    }

    public createTopic_args setCommunityId(long communityId) {
      this.communityId = communityId;
      setCommunityIdIsSet(true);
      return this;
    }

    public void unsetCommunityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMUNITYID_ISSET_ID);
    }

    /** Returns true if field communityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommunityId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMUNITYID_ISSET_ID);
    }

    public void setCommunityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMUNITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case SUBJECT:
        if (value == null) {
          unsetSubject();
        } else {
          setSubject((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((MessageType)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      case LINKED_MESSAGES:
        if (value == null) {
          unsetLinkedMessages();
        } else {
          setLinkedMessages((Map<MessageType,Long>)value);
        }
        break;

      case TAGS:
        if (value == null) {
          unsetTags();
        } else {
          setTags((Map<Long,String>)value);
        }
        break;

      case RUBRIC_ID:
        if (value == null) {
          unsetRubricId();
        } else {
          setRubricId((Long)value);
        }
        break;

      case COMMUNITY_ID:
        if (value == null) {
          unsetCommunityId();
        } else {
          setCommunityId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case SUBJECT:
        return getSubject();

      case TYPE:
        return getType();

      case CONTENT:
        return getContent();

      case LINKED_MESSAGES:
        return getLinkedMessages();

      case TAGS:
        return getTags();

      case RUBRIC_ID:
        return Long.valueOf(getRubricId());

      case COMMUNITY_ID:
        return Long.valueOf(getCommunityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case SUBJECT:
        return isSetSubject();
      case TYPE:
        return isSetType();
      case CONTENT:
        return isSetContent();
      case LINKED_MESSAGES:
        return isSetLinkedMessages();
      case TAGS:
        return isSetTags();
      case RUBRIC_ID:
        return isSetRubricId();
      case COMMUNITY_ID:
        return isSetCommunityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTopic_args)
        return this.equals((createTopic_args)that);
      return false;
    }

    public boolean equals(createTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_subject = true && this.isSetSubject();
      boolean that_present_subject = true && that.isSetSubject();
      if (this_present_subject || that_present_subject) {
        if (!(this_present_subject && that_present_subject))
          return false;
        if (!this.subject.equals(that.subject))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_linkedMessages = true && this.isSetLinkedMessages();
      boolean that_present_linkedMessages = true && that.isSetLinkedMessages();
      if (this_present_linkedMessages || that_present_linkedMessages) {
        if (!(this_present_linkedMessages && that_present_linkedMessages))
          return false;
        if (!this.linkedMessages.equals(that.linkedMessages))
          return false;
      }

      boolean this_present_tags = true && this.isSetTags();
      boolean that_present_tags = true && that.isSetTags();
      if (this_present_tags || that_present_tags) {
        if (!(this_present_tags && that_present_tags))
          return false;
        if (!this.tags.equals(that.tags))
          return false;
      }

      boolean this_present_rubricId = true;
      boolean that_present_rubricId = true;
      if (this_present_rubricId || that_present_rubricId) {
        if (!(this_present_rubricId && that_present_rubricId))
          return false;
        if (this.rubricId != that.rubricId)
          return false;
      }

      boolean this_present_communityId = true;
      boolean that_present_communityId = true;
      if (this_present_communityId || that_present_communityId) {
        if (!(this_present_communityId && that_present_communityId))
          return false;
        if (this.communityId != that.communityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubject()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLinkedMessages()).compareTo(other.isSetLinkedMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkedMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkedMessages, other.linkedMessages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRubricId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommunityId()).compareTo(other.isSetCommunityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommunityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.communityId, other.communityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTopic_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("subject:");
      if (this.subject == null) {
        sb.append("null");
      } else {
        sb.append(this.subject);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkedMessages:");
      if (this.linkedMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.linkedMessages);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tags:");
      if (this.tags == null) {
        sb.append("null");
      } else {
        sb.append(this.tags);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rubricId:");
      sb.append(this.rubricId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("communityId:");
      sb.append(this.communityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTopic_argsStandardSchemeFactory implements SchemeFactory {
      public createTopic_argsStandardScheme getScheme() {
        return new createTopic_argsStandardScheme();
      }
    }

    private static class createTopic_argsStandardScheme extends StandardScheme<createTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUBJECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.subject = iprot.readString();
                struct.setSubjectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = MessageType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LINKED_MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map66 = iprot.readMapBegin();
                  struct.linkedMessages = new HashMap<MessageType,Long>(2*_map66.size);
                  for (int _i67 = 0; _i67 < _map66.size; ++_i67)
                  {
                    MessageType _key68;
                    long _val69;
                    _key68 = MessageType.findByValue(iprot.readI32());
                    _val69 = iprot.readI64();
                    struct.linkedMessages.put(_key68, _val69);
                  }
                  iprot.readMapEnd();
                }
                struct.setLinkedMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.tags = new HashMap<Long,String>(2*_map70.size);
                  for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                  {
                    long _key72;
                    String _val73;
                    _key72 = iprot.readI64();
                    _val73 = iprot.readString();
                    struct.tags.put(_key72, _val73);
                  }
                  iprot.readMapEnd();
                }
                struct.setTagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RUBRIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rubricId = iprot.readI64();
                struct.setRubricIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // COMMUNITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.communityId = iprot.readI64();
                struct.setCommunityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.subject != null) {
          oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
          oprot.writeString(struct.subject);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.linkedMessages != null) {
          oprot.writeFieldBegin(LINKED_MESSAGES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.linkedMessages.size()));
            for (Map.Entry<MessageType, Long> _iter74 : struct.linkedMessages.entrySet())
            {
              oprot.writeI32(_iter74.getKey().getValue());
              oprot.writeI64(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tags != null) {
          oprot.writeFieldBegin(TAGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
            for (Map.Entry<Long, String> _iter75 : struct.tags.entrySet())
            {
              oprot.writeI64(_iter75.getKey());
              oprot.writeString(_iter75.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
        oprot.writeI64(struct.rubricId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMUNITY_ID_FIELD_DESC);
        oprot.writeI64(struct.communityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTopic_argsTupleSchemeFactory implements SchemeFactory {
      public createTopic_argsTupleScheme getScheme() {
        return new createTopic_argsTupleScheme();
      }
    }

    private static class createTopic_argsTupleScheme extends TupleScheme<createTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetSubject()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        if (struct.isSetLinkedMessages()) {
          optionals.set(4);
        }
        if (struct.isSetTags()) {
          optionals.set(5);
        }
        if (struct.isSetRubricId()) {
          optionals.set(6);
        }
        if (struct.isSetCommunityId()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetSubject()) {
          oprot.writeString(struct.subject);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetLinkedMessages()) {
          {
            oprot.writeI32(struct.linkedMessages.size());
            for (Map.Entry<MessageType, Long> _iter76 : struct.linkedMessages.entrySet())
            {
              oprot.writeI32(_iter76.getKey().getValue());
              oprot.writeI64(_iter76.getValue());
            }
          }
        }
        if (struct.isSetTags()) {
          {
            oprot.writeI32(struct.tags.size());
            for (Map.Entry<Long, String> _iter77 : struct.tags.entrySet())
            {
              oprot.writeI64(_iter77.getKey());
              oprot.writeString(_iter77.getValue());
            }
          }
        }
        if (struct.isSetRubricId()) {
          oprot.writeI64(struct.rubricId);
        }
        if (struct.isSetCommunityId()) {
          oprot.writeI64(struct.communityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subject = iprot.readString();
          struct.setSubjectIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = MessageType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map78 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.linkedMessages = new HashMap<MessageType,Long>(2*_map78.size);
            for (int _i79 = 0; _i79 < _map78.size; ++_i79)
            {
              MessageType _key80;
              long _val81;
              _key80 = MessageType.findByValue(iprot.readI32());
              _val81 = iprot.readI64();
              struct.linkedMessages.put(_key80, _val81);
            }
          }
          struct.setLinkedMessagesIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TMap _map82 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.tags = new HashMap<Long,String>(2*_map82.size);
            for (int _i83 = 0; _i83 < _map82.size; ++_i83)
            {
              long _key84;
              String _val85;
              _key84 = iprot.readI64();
              _val85 = iprot.readString();
              struct.tags.put(_key84, _val85);
            }
          }
          struct.setTagsIsSet(true);
        }
        if (incoming.get(6)) {
          struct.rubricId = iprot.readI64();
          struct.setRubricIdIsSet(true);
        }
        if (incoming.get(7)) {
          struct.communityId = iprot.readI64();
          struct.setCommunityIdIsSet(true);
        }
      }
    }

  }

  public static class createTopic_result implements org.apache.thrift.TBase<createTopic_result, createTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createTopic_resultTupleSchemeFactory());
    }

    public Topic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTopic_result.class, metaDataMap);
    }

    public createTopic_result() {
    }

    public createTopic_result(
      Topic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTopic_result(createTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = new Topic(other.success);
      }
    }

    public createTopic_result deepCopy() {
      return new createTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Topic getSuccess() {
      return this.success;
    }

    public createTopic_result setSuccess(Topic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Topic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createTopic_result)
        return this.equals((createTopic_result)that);
      return false;
    }

    public boolean equals(createTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTopic_resultStandardSchemeFactory implements SchemeFactory {
      public createTopic_resultStandardScheme getScheme() {
        return new createTopic_resultStandardScheme();
      }
    }

    private static class createTopic_resultStandardScheme extends StandardScheme<createTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Topic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTopic_resultTupleSchemeFactory implements SchemeFactory {
      public createTopic_resultTupleScheme getScheme() {
        return new createTopic_resultTupleScheme();
      }
    }

    private static class createTopic_resultTupleScheme extends TupleScheme<createTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Topic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class postTopic_args implements org.apache.thrift.TBase<postTopic_args, postTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<postTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTopic_argsTupleSchemeFactory());
    }

    public Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTopic_args.class, metaDataMap);
    }

    public postTopic_args() {
    }

    public postTopic_args(
      Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTopic_args(postTopic_args other) {
      if (other.isSetTopic()) {
        this.topic = new Topic(other.topic);
      }
    }

    public postTopic_args deepCopy() {
      return new postTopic_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public Topic getTopic() {
      return this.topic;
    }

    public postTopic_args setTopic(Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((Topic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTopic_args)
        return this.equals((postTopic_args)that);
      return false;
    }

    public boolean equals(postTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTopic_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTopic_argsStandardSchemeFactory implements SchemeFactory {
      public postTopic_argsStandardScheme getScheme() {
        return new postTopic_argsStandardScheme();
      }
    }

    private static class postTopic_argsStandardScheme extends StandardScheme<postTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTopic_argsTupleSchemeFactory implements SchemeFactory {
      public postTopic_argsTupleScheme getScheme() {
        return new postTopic_argsTupleScheme();
      }
    }

    private static class postTopic_argsTupleScheme extends TupleScheme<postTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

  }

  public static class postTopic_result implements org.apache.thrift.TBase<postTopic_result, postTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<postTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("postTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new postTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new postTopic_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(postTopic_result.class, metaDataMap);
    }

    public postTopic_result() {
    }

    public postTopic_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postTopic_result(postTopic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public postTopic_result deepCopy() {
      return new postTopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public postTopic_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public postTopic_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postTopic_result)
        return this.equals((postTopic_result)that);
      return false;
    }

    public boolean equals(postTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(postTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("postTopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class postTopic_resultStandardSchemeFactory implements SchemeFactory {
      public postTopic_resultStandardScheme getScheme() {
        return new postTopic_resultStandardScheme();
      }
    }

    private static class postTopic_resultStandardScheme extends StandardScheme<postTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, postTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, postTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class postTopic_resultTupleSchemeFactory implements SchemeFactory {
      public postTopic_resultTupleScheme getScheme() {
        return new postTopic_resultTupleScheme();
      }
    }

    private static class postTopic_resultTupleScheme extends TupleScheme<postTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, postTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, postTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class checkUpdates_args implements org.apache.thrift.TBase<checkUpdates_args, checkUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUpdates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUpdates_args");

    private static final org.apache.thrift.protocol.TField LAST_RESPOSE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastResposeTimestamp", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUpdates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUpdates_argsTupleSchemeFactory());
    }

    public int lastResposeTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LAST_RESPOSE_TIMESTAMP((short)1, "lastResposeTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LAST_RESPOSE_TIMESTAMP
            return LAST_RESPOSE_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LASTRESPOSETIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LAST_RESPOSE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastResposeTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUpdates_args.class, metaDataMap);
    }

    public checkUpdates_args() {
    }

    public checkUpdates_args(
      int lastResposeTimestamp)
    {
      this();
      this.lastResposeTimestamp = lastResposeTimestamp;
      setLastResposeTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUpdates_args(checkUpdates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lastResposeTimestamp = other.lastResposeTimestamp;
    }

    public checkUpdates_args deepCopy() {
      return new checkUpdates_args(this);
    }

    @Override
    public void clear() {
      setLastResposeTimestampIsSet(false);
      this.lastResposeTimestamp = 0;
    }

    public int getLastResposeTimestamp() {
      return this.lastResposeTimestamp;
    }

    public checkUpdates_args setLastResposeTimestamp(int lastResposeTimestamp) {
      this.lastResposeTimestamp = lastResposeTimestamp;
      setLastResposeTimestampIsSet(true);
      return this;
    }

    public void unsetLastResposeTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID);
    }

    /** Returns true if field lastResposeTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastResposeTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID);
    }

    public void setLastResposeTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTRESPOSETIMESTAMP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        if (value == null) {
          unsetLastResposeTimestamp();
        } else {
          setLastResposeTimestamp((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        return Integer.valueOf(getLastResposeTimestamp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LAST_RESPOSE_TIMESTAMP:
        return isSetLastResposeTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUpdates_args)
        return this.equals((checkUpdates_args)that);
      return false;
    }

    public boolean equals(checkUpdates_args that) {
      if (that == null)
        return false;

      boolean this_present_lastResposeTimestamp = true;
      boolean that_present_lastResposeTimestamp = true;
      if (this_present_lastResposeTimestamp || that_present_lastResposeTimestamp) {
        if (!(this_present_lastResposeTimestamp && that_present_lastResposeTimestamp))
          return false;
        if (this.lastResposeTimestamp != that.lastResposeTimestamp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLastResposeTimestamp()).compareTo(other.isSetLastResposeTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastResposeTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastResposeTimestamp, other.lastResposeTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUpdates_args(");
      boolean first = true;

      sb.append("lastResposeTimestamp:");
      sb.append(this.lastResposeTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUpdates_argsStandardSchemeFactory implements SchemeFactory {
      public checkUpdates_argsStandardScheme getScheme() {
        return new checkUpdates_argsStandardScheme();
      }
    }

    private static class checkUpdates_argsStandardScheme extends StandardScheme<checkUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LAST_RESPOSE_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lastResposeTimestamp = iprot.readI32();
                struct.setLastResposeTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LAST_RESPOSE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastResposeTimestamp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUpdates_argsTupleSchemeFactory implements SchemeFactory {
      public checkUpdates_argsTupleScheme getScheme() {
        return new checkUpdates_argsTupleScheme();
      }
    }

    private static class checkUpdates_argsTupleScheme extends TupleScheme<checkUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLastResposeTimestamp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLastResposeTimestamp()) {
          oprot.writeI32(struct.lastResposeTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lastResposeTimestamp = iprot.readI32();
          struct.setLastResposeTimestampIsSet(true);
        }
      }
    }

  }

  public static class checkUpdates_result implements org.apache.thrift.TBase<checkUpdates_result, checkUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUpdates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUpdates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkUpdates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkUpdates_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUpdates_result.class, metaDataMap);
    }

    public checkUpdates_result() {
    }

    public checkUpdates_result(
      int success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUpdates_result(checkUpdates_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public checkUpdates_result deepCopy() {
      return new checkUpdates_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkUpdates_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public checkUpdates_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUpdates_result)
        return this.equals((checkUpdates_result)that);
      return false;
    }

    public boolean equals(checkUpdates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkUpdates_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUpdates_resultStandardSchemeFactory implements SchemeFactory {
      public checkUpdates_resultStandardScheme getScheme() {
        return new checkUpdates_resultStandardScheme();
      }
    }

    private static class checkUpdates_resultStandardScheme extends StandardScheme<checkUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUpdates_resultTupleSchemeFactory implements SchemeFactory {
      public checkUpdates_resultTupleScheme getScheme() {
        return new checkUpdates_resultTupleScheme();
      }
    }

    private static class checkUpdates_resultTupleScheme extends TupleScheme<checkUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getUpdates_args implements org.apache.thrift.TBase<getUpdates_args, getUpdates_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdates_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdates_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdates_args.class, metaDataMap);
    }

    public getUpdates_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdates_args(getUpdates_args other) {
    }

    public getUpdates_args deepCopy() {
      return new getUpdates_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdates_args)
        return this.equals((getUpdates_args)that);
      return false;
    }

    public boolean equals(getUpdates_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdates_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdates_argsStandardSchemeFactory implements SchemeFactory {
      public getUpdates_argsStandardScheme getScheme() {
        return new getUpdates_argsStandardScheme();
      }
    }

    private static class getUpdates_argsStandardScheme extends StandardScheme<getUpdates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdates_argsTupleSchemeFactory implements SchemeFactory {
      public getUpdates_argsTupleScheme getScheme() {
        return new getUpdates_argsTupleScheme();
      }
    }

    private static class getUpdates_argsTupleScheme extends TupleScheme<getUpdates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUpdates_result implements org.apache.thrift.TBase<getUpdates_result, getUpdates_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUpdates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUpdates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUpdates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUpdates_resultTupleSchemeFactory());
    }

    public GroupUpdates success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupUpdates.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUpdates_result.class, metaDataMap);
    }

    public getUpdates_result() {
    }

    public getUpdates_result(
      GroupUpdates success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdates_result(getUpdates_result other) {
      if (other.isSetSuccess()) {
        this.success = new GroupUpdates(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getUpdates_result deepCopy() {
      return new getUpdates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public GroupUpdates getSuccess() {
      return this.success;
    }

    public getUpdates_result setSuccess(GroupUpdates success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getUpdates_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GroupUpdates)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdates_result)
        return this.equals((getUpdates_result)that);
      return false;
    }

    public boolean equals(getUpdates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUpdates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUpdates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUpdates_resultStandardSchemeFactory implements SchemeFactory {
      public getUpdates_resultStandardScheme getScheme() {
        return new getUpdates_resultStandardScheme();
      }
    }

    private static class getUpdates_resultStandardScheme extends StandardScheme<getUpdates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUpdates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GroupUpdates();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUpdates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUpdates_resultTupleSchemeFactory implements SchemeFactory {
      public getUpdates_resultTupleScheme getScheme() {
        return new getUpdates_resultTupleScheme();
      }
    }

    private static class getUpdates_resultTupleScheme extends TupleScheme<getUpdates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUpdates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new GroupUpdates();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getTopics_args implements org.apache.thrift.TBase<getTopics_args, getTopics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTopics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopics_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField COMMMUNITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commmunityId", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedTopicId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopics_argsTupleSchemeFactory());
    }

    public long groupId; // required
    public long rubricId; // required
    public int commmunityId; // required
    public long lastLoadedTopicId; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId"),
      RUBRIC_ID((short)2, "rubricId"),
      COMMMUNITY_ID((short)3, "commmunityId"),
      LAST_LOADED_TOPIC_ID((short)4, "lastLoadedTopicId"),
      LENGTH((short)5, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          case 2: // RUBRIC_ID
            return RUBRIC_ID;
          case 3: // COMMMUNITY_ID
            return COMMMUNITY_ID;
          case 4: // LAST_LOADED_TOPIC_ID
            return LAST_LOADED_TOPIC_ID;
          case 5: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __GROUPID_ISSET_ID = 0;
    private static final int __RUBRICID_ISSET_ID = 1;
    private static final int __COMMMUNITYID_ISSET_ID = 2;
    private static final int __LASTLOADEDTOPICID_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.COMMMUNITY_ID, new org.apache.thrift.meta_data.FieldMetaData("commmunityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LAST_LOADED_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedTopicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopics_args.class, metaDataMap);
    }

    public getTopics_args() {
    }

    public getTopics_args(
      long groupId,
      long rubricId,
      int commmunityId,
      long lastLoadedTopicId,
      int length)
    {
      this();
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopics_args(getTopics_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.groupId = other.groupId;
      this.rubricId = other.rubricId;
      this.commmunityId = other.commmunityId;
      this.lastLoadedTopicId = other.lastLoadedTopicId;
      this.length = other.length;
    }

    public getTopics_args deepCopy() {
      return new getTopics_args(this);
    }

    @Override
    public void clear() {
      setGroupIdIsSet(false);
      this.groupId = 0;
      setRubricIdIsSet(false);
      this.rubricId = 0;
      setCommmunityIdIsSet(false);
      this.commmunityId = 0;
      setLastLoadedTopicIdIsSet(false);
      this.lastLoadedTopicId = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getTopics_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    public long getRubricId() {
      return this.rubricId;
    }

    public getTopics_args setRubricId(long rubricId) {
      this.rubricId = rubricId;
      setRubricIdIsSet(true);
      return this;
    }

    public void unsetRubricId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
    public boolean isSetRubricId() {
      return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
    }

    public void setRubricIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
    }

    public int getCommmunityId() {
      return this.commmunityId;
    }

    public getTopics_args setCommmunityId(int commmunityId) {
      this.commmunityId = commmunityId;
      setCommmunityIdIsSet(true);
      return this;
    }

    public void unsetCommmunityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    /** Returns true if field commmunityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCommmunityId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID);
    }

    public void setCommmunityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMMUNITYID_ISSET_ID, value);
    }

    public long getLastLoadedTopicId() {
      return this.lastLoadedTopicId;
    }

    public getTopics_args setLastLoadedTopicId(long lastLoadedTopicId) {
      this.lastLoadedTopicId = lastLoadedTopicId;
      setLastLoadedTopicIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    /** Returns true if field lastLoadedTopicId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID);
    }

    public void setLastLoadedTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDTOPICID_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getTopics_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case RUBRIC_ID:
        if (value == null) {
          unsetRubricId();
        } else {
          setRubricId((Long)value);
        }
        break;

      case COMMMUNITY_ID:
        if (value == null) {
          unsetCommmunityId();
        } else {
          setCommmunityId((Integer)value);
        }
        break;

      case LAST_LOADED_TOPIC_ID:
        if (value == null) {
          unsetLastLoadedTopicId();
        } else {
          setLastLoadedTopicId((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case RUBRIC_ID:
        return Long.valueOf(getRubricId());

      case COMMMUNITY_ID:
        return Integer.valueOf(getCommmunityId());

      case LAST_LOADED_TOPIC_ID:
        return Long.valueOf(getLastLoadedTopicId());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      case RUBRIC_ID:
        return isSetRubricId();
      case COMMMUNITY_ID:
        return isSetCommmunityId();
      case LAST_LOADED_TOPIC_ID:
        return isSetLastLoadedTopicId();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopics_args)
        return this.equals((getTopics_args)that);
      return false;
    }

    public boolean equals(getTopics_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_rubricId = true;
      boolean that_present_rubricId = true;
      if (this_present_rubricId || that_present_rubricId) {
        if (!(this_present_rubricId && that_present_rubricId))
          return false;
        if (this.rubricId != that.rubricId)
          return false;
      }

      boolean this_present_commmunityId = true;
      boolean that_present_commmunityId = true;
      if (this_present_commmunityId || that_present_commmunityId) {
        if (!(this_present_commmunityId && that_present_commmunityId))
          return false;
        if (this.commmunityId != that.commmunityId)
          return false;
      }

      boolean this_present_lastLoadedTopicId = true;
      boolean that_present_lastLoadedTopicId = true;
      if (this_present_lastLoadedTopicId || that_present_lastLoadedTopicId) {
        if (!(this_present_lastLoadedTopicId && that_present_lastLoadedTopicId))
          return false;
        if (this.lastLoadedTopicId != that.lastLoadedTopicId)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRubricId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommmunityId()).compareTo(other.isSetCommmunityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommmunityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commmunityId, other.commmunityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedTopicId()).compareTo(other.isSetLastLoadedTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedTopicId, other.lastLoadedTopicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopics_args(");
      boolean first = true;

      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rubricId:");
      sb.append(this.rubricId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commmunityId:");
      sb.append(this.commmunityId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedTopicId:");
      sb.append(this.lastLoadedTopicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopics_argsStandardSchemeFactory implements SchemeFactory {
      public getTopics_argsStandardScheme getScheme() {
        return new getTopics_argsStandardScheme();
      }
    }

    private static class getTopics_argsStandardScheme extends StandardScheme<getTopics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RUBRIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rubricId = iprot.readI64();
                struct.setRubricIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COMMMUNITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commmunityId = iprot.readI32();
                struct.setCommmunityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedTopicId = iprot.readI64();
                struct.setLastLoadedTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
        oprot.writeI64(struct.rubricId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMMUNITY_ID_FIELD_DESC);
        oprot.writeI32(struct.commmunityId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOADED_TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedTopicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopics_argsTupleSchemeFactory implements SchemeFactory {
      public getTopics_argsTupleScheme getScheme() {
        return new getTopics_argsTupleScheme();
      }
    }

    private static class getTopics_argsTupleScheme extends TupleScheme<getTopics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        if (struct.isSetRubricId()) {
          optionals.set(1);
        }
        if (struct.isSetCommmunityId()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedTopicId()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetRubricId()) {
          oprot.writeI64(struct.rubricId);
        }
        if (struct.isSetCommmunityId()) {
          oprot.writeI32(struct.commmunityId);
        }
        if (struct.isSetLastLoadedTopicId()) {
          oprot.writeI64(struct.lastLoadedTopicId);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rubricId = iprot.readI64();
          struct.setRubricIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.commmunityId = iprot.readI32();
          struct.setCommmunityIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedTopicId = iprot.readI64();
          struct.setLastLoadedTopicIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getTopics_result implements org.apache.thrift.TBase<getTopics_result, getTopics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTopics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTopics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTopics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTopics_resultTupleSchemeFactory());
    }

    public TopicListPart success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTopics_result.class, metaDataMap);
    }

    public getTopics_result() {
    }

    public getTopics_result(
      TopicListPart success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTopics_result(getTopics_result other) {
      if (other.isSetSuccess()) {
        this.success = new TopicListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getTopics_result deepCopy() {
      return new getTopics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public TopicListPart getSuccess() {
      return this.success;
    }

    public getTopics_result setSuccess(TopicListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getTopics_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TopicListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTopics_result)
        return this.equals((getTopics_result)that);
      return false;
    }

    public boolean equals(getTopics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getTopics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTopics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTopics_resultStandardSchemeFactory implements SchemeFactory {
      public getTopics_resultStandardScheme getScheme() {
        return new getTopics_resultStandardScheme();
      }
    }

    private static class getTopics_resultStandardScheme extends StandardScheme<getTopics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTopics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TopicListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTopics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTopics_resultTupleSchemeFactory implements SchemeFactory {
      public getTopics_resultTupleScheme getScheme() {
        return new getTopics_resultTupleScheme();
      }
    }

    private static class getTopics_resultTupleScheme extends TupleScheme<getTopics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTopics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TopicListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getMessages_args implements org.apache.thrift.TBase<getMessages_args, getMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public long groupId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType messageType; // required
    public long lastLoadedId; // required
    public boolean archived; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      GROUP_ID((short)2, "groupId"),
      /**
       * 
       * @see MessageType
       */
      MESSAGE_TYPE((short)3, "messageType"),
      LAST_LOADED_ID((short)4, "lastLoadedId"),
      ARCHIVED((short)5, "archived"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          case 5: // ARCHIVED
            return ARCHIVED;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __LASTLOADEDID_ISSET_ID = 2;
    private static final int __ARCHIVED_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_args.class, metaDataMap);
    }

    public getMessages_args() {
    }

    public getMessages_args(
      long topicId,
      long groupId,
      MessageType messageType,
      long lastLoadedId,
      boolean archived,
      int length)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.messageType = messageType;
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      this.archived = archived;
      setArchivedIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_args(getMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.groupId = other.groupId;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.lastLoadedId = other.lastLoadedId;
      this.archived = other.archived;
      this.length = other.length;
    }

    public getMessages_args deepCopy() {
      return new getMessages_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.messageType = null;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
      setArchivedIsSet(false);
      this.archived = false;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public getMessages_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getMessages_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     * 
     * @see MessageType
     */
    public getMessages_args setMessageType(MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getMessages_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public boolean isArchived() {
      return this.archived;
    }

    public getMessages_args setArchived(boolean archived) {
      this.archived = archived;
      setArchivedIsSet(true);
      return this;
    }

    public void unsetArchived() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    /** Returns true if field archived is set (has been assigned a value) and false otherwise */
    public boolean isSetArchived() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    public void setArchivedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getMessages_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((MessageType)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      case ARCHIVED:
        if (value == null) {
          unsetArchived();
        } else {
          setArchived((Boolean)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case MESSAGE_TYPE:
        return getMessageType();

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      case ARCHIVED:
        return Boolean.valueOf(isArchived());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case GROUP_ID:
        return isSetGroupId();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      case ARCHIVED:
        return isSetArchived();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_args)
        return this.equals((getMessages_args)that);
      return false;
    }

    public boolean equals(getMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      boolean this_present_archived = true;
      boolean that_present_archived = true;
      if (this_present_archived || that_present_archived) {
        if (!(this_present_archived && that_present_archived))
          return false;
        if (this.archived != that.archived)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("archived:");
      sb.append(this.archived);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getMessages_argsStandardScheme getScheme() {
        return new getMessages_argsStandardScheme();
      }
    }

    private static class getMessages_argsStandardScheme extends StandardScheme<getMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.archived = iprot.readBool();
                struct.setArchivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.archived);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getMessages_argsTupleScheme getScheme() {
        return new getMessages_argsTupleScheme();
      }
    }

    private static class getMessages_argsTupleScheme extends TupleScheme<getMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetMessageType()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(3);
        }
        if (struct.isSetArchived()) {
          optionals.set(4);
        }
        if (struct.isSetLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
        if (struct.isSetArchived()) {
          oprot.writeBool(struct.archived);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.messageType = MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.archived = iprot.readBool();
          struct.setArchivedIsSet(true);
        }
        if (incoming.get(5)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getMessages_result implements org.apache.thrift.TBase<getMessages_result, getMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessages_resultTupleSchemeFactory());
    }

    public MessageListPart success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessages_result.class, metaDataMap);
    }

    public getMessages_result() {
    }

    public getMessages_result(
      MessageListPart success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessages_result(getMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getMessages_result deepCopy() {
      return new getMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public MessageListPart getSuccess() {
      return this.success;
    }

    public getMessages_result setSuccess(MessageListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getMessages_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessages_result)
        return this.equals((getMessages_result)that);
      return false;
    }

    public boolean equals(getMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getMessages_resultStandardScheme getScheme() {
        return new getMessages_resultStandardScheme();
      }
    }

    private static class getMessages_resultStandardScheme extends StandardScheme<getMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getMessages_resultTupleScheme getScheme() {
        return new getMessages_resultTupleScheme();
      }
    }

    private static class getMessages_resultTupleScheme extends TupleScheme<getMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getFirstLevelMessages_args implements org.apache.thrift.TBase<getFirstLevelMessages_args, getFirstLevelMessages_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstLevelMessages_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstLevelMessages_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOADED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoadedId", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ARCHIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("archived", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstLevelMessages_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstLevelMessages_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public long groupId; // required
    /**
     * 
     * @see MessageType
     */
    public MessageType messageType; // required
    public long lastLoadedId; // required
    public boolean archived; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      GROUP_ID((short)2, "groupId"),
      /**
       * 
       * @see MessageType
       */
      MESSAGE_TYPE((short)3, "messageType"),
      LAST_LOADED_ID((short)4, "lastLoadedId"),
      ARCHIVED((short)5, "archived"),
      LENGTH((short)6, "length");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // GROUP_ID
            return GROUP_ID;
          case 3: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 4: // LAST_LOADED_ID
            return LAST_LOADED_ID;
          case 5: // ARCHIVED
            return ARCHIVED;
          case 6: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __GROUPID_ISSET_ID = 1;
    private static final int __LASTLOADEDID_ISSET_ID = 2;
    private static final int __ARCHIVED_ISSET_ID = 3;
    private static final int __LENGTH_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
      tmpMap.put(_Fields.LAST_LOADED_ID, new org.apache.thrift.meta_data.FieldMetaData("lastLoadedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ARCHIVED, new org.apache.thrift.meta_data.FieldMetaData("archived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstLevelMessages_args.class, metaDataMap);
    }

    public getFirstLevelMessages_args() {
    }

    public getFirstLevelMessages_args(
      long topicId,
      long groupId,
      MessageType messageType,
      long lastLoadedId,
      boolean archived,
      int length)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.groupId = groupId;
      setGroupIdIsSet(true);
      this.messageType = messageType;
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      this.archived = archived;
      setArchivedIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstLevelMessages_args(getFirstLevelMessages_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.groupId = other.groupId;
      if (other.isSetMessageType()) {
        this.messageType = other.messageType;
      }
      this.lastLoadedId = other.lastLoadedId;
      this.archived = other.archived;
      this.length = other.length;
    }

    public getFirstLevelMessages_args deepCopy() {
      return new getFirstLevelMessages_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setGroupIdIsSet(false);
      this.groupId = 0;
      this.messageType = null;
      setLastLoadedIdIsSet(false);
      this.lastLoadedId = 0;
      setArchivedIsSet(false);
      this.archived = false;
      setLengthIsSet(false);
      this.length = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public getFirstLevelMessages_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public long getGroupId() {
      return this.groupId;
    }

    public getFirstLevelMessages_args setGroupId(long groupId) {
      this.groupId = groupId;
      setGroupIdIsSet(true);
      return this;
    }

    public void unsetGroupId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
    }

    public void setGroupIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
    }

    /**
     * 
     * @see MessageType
     */
    public MessageType getMessageType() {
      return this.messageType;
    }

    /**
     * 
     * @see MessageType
     */
    public getFirstLevelMessages_args setMessageType(MessageType messageType) {
      this.messageType = messageType;
      return this;
    }

    public void unsetMessageType() {
      this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return this.messageType != null;
    }

    public void setMessageTypeIsSet(boolean value) {
      if (!value) {
        this.messageType = null;
      }
    }

    public long getLastLoadedId() {
      return this.lastLoadedId;
    }

    public getFirstLevelMessages_args setLastLoadedId(long lastLoadedId) {
      this.lastLoadedId = lastLoadedId;
      setLastLoadedIdIsSet(true);
      return this;
    }

    public void unsetLastLoadedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    /** Returns true if field lastLoadedId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLoadedId() {
      return EncodingUtils.testBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID);
    }

    public void setLastLoadedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOADEDID_ISSET_ID, value);
    }

    public boolean isArchived() {
      return this.archived;
    }

    public getFirstLevelMessages_args setArchived(boolean archived) {
      this.archived = archived;
      setArchivedIsSet(true);
      return this;
    }

    public void unsetArchived() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    /** Returns true if field archived is set (has been assigned a value) and false otherwise */
    public boolean isSetArchived() {
      return EncodingUtils.testBit(__isset_bitfield, __ARCHIVED_ISSET_ID);
    }

    public void setArchivedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVED_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getFirstLevelMessages_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((Long)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((MessageType)value);
        }
        break;

      case LAST_LOADED_ID:
        if (value == null) {
          unsetLastLoadedId();
        } else {
          setLastLoadedId((Long)value);
        }
        break;

      case ARCHIVED:
        if (value == null) {
          unsetArchived();
        } else {
          setArchived((Boolean)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case GROUP_ID:
        return Long.valueOf(getGroupId());

      case MESSAGE_TYPE:
        return getMessageType();

      case LAST_LOADED_ID:
        return Long.valueOf(getLastLoadedId());

      case ARCHIVED:
        return Boolean.valueOf(isArchived());

      case LENGTH:
        return Integer.valueOf(getLength());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case GROUP_ID:
        return isSetGroupId();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case LAST_LOADED_ID:
        return isSetLastLoadedId();
      case ARCHIVED:
        return isSetArchived();
      case LENGTH:
        return isSetLength();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstLevelMessages_args)
        return this.equals((getFirstLevelMessages_args)that);
      return false;
    }

    public boolean equals(getFirstLevelMessages_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_groupId = true;
      boolean that_present_groupId = true;
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (this.groupId != that.groupId)
          return false;
      }

      boolean this_present_messageType = true && this.isSetMessageType();
      boolean that_present_messageType = true && that.isSetMessageType();
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (!this.messageType.equals(that.messageType))
          return false;
      }

      boolean this_present_lastLoadedId = true;
      boolean that_present_lastLoadedId = true;
      if (this_present_lastLoadedId || that_present_lastLoadedId) {
        if (!(this_present_lastLoadedId && that_present_lastLoadedId))
          return false;
        if (this.lastLoadedId != that.lastLoadedId)
          return false;
      }

      boolean this_present_archived = true;
      boolean that_present_archived = true;
      if (this_present_archived || that_present_archived) {
        if (!(this_present_archived && that_present_archived))
          return false;
        if (this.archived != that.archived)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFirstLevelMessages_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLastLoadedId()).compareTo(other.isSetLastLoadedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLoadedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoadedId, other.lastLoadedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetArchived()).compareTo(other.isSetArchived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArchived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archived, other.archived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstLevelMessages_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      if (this.messageType == null) {
        sb.append("null");
      } else {
        sb.append(this.messageType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLoadedId:");
      sb.append(this.lastLoadedId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("archived:");
      sb.append(this.archived);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstLevelMessages_argsStandardSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_argsStandardScheme getScheme() {
        return new getFirstLevelMessages_argsStandardScheme();
      }
    }

    private static class getFirstLevelMessages_argsStandardScheme extends StandardScheme<getFirstLevelMessages_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.groupId = iprot.readI64();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = MessageType.findByValue(iprot.readI32());
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOADED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLoadedId = iprot.readI64();
                struct.setLastLoadedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ARCHIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.archived = iprot.readBool();
                struct.setArchivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI64(struct.groupId);
        oprot.writeFieldEnd();
        if (struct.messageType != null) {
          oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.messageType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LAST_LOADED_ID_FIELD_DESC);
        oprot.writeI64(struct.lastLoadedId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ARCHIVED_FIELD_DESC);
        oprot.writeBool(struct.archived);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstLevelMessages_argsTupleSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_argsTupleScheme getScheme() {
        return new getFirstLevelMessages_argsTupleScheme();
      }
    }

    private static class getFirstLevelMessages_argsTupleScheme extends TupleScheme<getFirstLevelMessages_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetMessageType()) {
          optionals.set(2);
        }
        if (struct.isSetLastLoadedId()) {
          optionals.set(3);
        }
        if (struct.isSetArchived()) {
          optionals.set(4);
        }
        if (struct.isSetLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetGroupId()) {
          oprot.writeI64(struct.groupId);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType.getValue());
        }
        if (struct.isSetLastLoadedId()) {
          oprot.writeI64(struct.lastLoadedId);
        }
        if (struct.isSetArchived()) {
          oprot.writeBool(struct.archived);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupId = iprot.readI64();
          struct.setGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.messageType = MessageType.findByValue(iprot.readI32());
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLoadedId = iprot.readI64();
          struct.setLastLoadedIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.archived = iprot.readBool();
          struct.setArchivedIsSet(true);
        }
        if (incoming.get(5)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

  }

  public static class getFirstLevelMessages_result implements org.apache.thrift.TBase<getFirstLevelMessages_result, getFirstLevelMessages_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFirstLevelMessages_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFirstLevelMessages_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFirstLevelMessages_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFirstLevelMessages_resultTupleSchemeFactory());
    }

    public MessageListPart success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MessageListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFirstLevelMessages_result.class, metaDataMap);
    }

    public getFirstLevelMessages_result() {
    }

    public getFirstLevelMessages_result(
      MessageListPart success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFirstLevelMessages_result(getFirstLevelMessages_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getFirstLevelMessages_result deepCopy() {
      return new getFirstLevelMessages_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public MessageListPart getSuccess() {
      return this.success;
    }

    public getFirstLevelMessages_result setSuccess(MessageListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getFirstLevelMessages_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MessageListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFirstLevelMessages_result)
        return this.equals((getFirstLevelMessages_result)that);
      return false;
    }

    public boolean equals(getFirstLevelMessages_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFirstLevelMessages_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFirstLevelMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFirstLevelMessages_resultStandardSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_resultStandardScheme getScheme() {
        return new getFirstLevelMessages_resultStandardScheme();
      }
    }

    private static class getFirstLevelMessages_resultStandardScheme extends StandardScheme<getFirstLevelMessages_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MessageListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFirstLevelMessages_resultTupleSchemeFactory implements SchemeFactory {
      public getFirstLevelMessages_resultTupleScheme getScheme() {
        return new getFirstLevelMessages_resultTupleScheme();
      }
    }

    private static class getFirstLevelMessages_resultTupleScheme extends TupleScheme<getFirstLevelMessages_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFirstLevelMessages_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new MessageListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class likeOrDislikeMessage_args implements org.apache.thrift.TBase<likeOrDislikeMessage_args, likeOrDislikeMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<likeOrDislikeMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("likeOrDislikeMessage_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("opinion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new likeOrDislikeMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new likeOrDislikeMessage_argsTupleSchemeFactory());
    }

    public long messageId; // required
    public int opinion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId"),
      OPINION((short)2, "opinion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          case 2: // OPINION
            return OPINION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private static final int __OPINION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OPINION, new org.apache.thrift.meta_data.FieldMetaData("opinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(likeOrDislikeMessage_args.class, metaDataMap);
    }

    public likeOrDislikeMessage_args() {
    }

    public likeOrDislikeMessage_args(
      long messageId,
      int opinion)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
      this.opinion = opinion;
      setOpinionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public likeOrDislikeMessage_args(likeOrDislikeMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.messageId = other.messageId;
      this.opinion = other.opinion;
    }

    public likeOrDislikeMessage_args deepCopy() {
      return new likeOrDislikeMessage_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
      setOpinionIsSet(false);
      this.opinion = 0;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public likeOrDislikeMessage_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public int getOpinion() {
      return this.opinion;
    }

    public likeOrDislikeMessage_args setOpinion(int opinion) {
      this.opinion = opinion;
      setOpinionIsSet(true);
      return this;
    }

    public void unsetOpinion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPINION_ISSET_ID);
    }

    /** Returns true if field opinion is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinion() {
      return EncodingUtils.testBit(__isset_bitfield, __OPINION_ISSET_ID);
    }

    public void setOpinionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPINION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      case OPINION:
        if (value == null) {
          unsetOpinion();
        } else {
          setOpinion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return Long.valueOf(getMessageId());

      case OPINION:
        return Integer.valueOf(getOpinion());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      case OPINION:
        return isSetOpinion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof likeOrDislikeMessage_args)
        return this.equals((likeOrDislikeMessage_args)that);
      return false;
    }

    public boolean equals(likeOrDislikeMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      boolean this_present_opinion = true;
      boolean that_present_opinion = true;
      if (this_present_opinion || that_present_opinion) {
        if (!(this_present_opinion && that_present_opinion))
          return false;
        if (this.opinion != that.opinion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(likeOrDislikeMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpinion()).compareTo(other.isSetOpinion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinion, other.opinion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("likeOrDislikeMessage_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("opinion:");
      sb.append(this.opinion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class likeOrDislikeMessage_argsStandardSchemeFactory implements SchemeFactory {
      public likeOrDislikeMessage_argsStandardScheme getScheme() {
        return new likeOrDislikeMessage_argsStandardScheme();
      }
    }

    private static class likeOrDislikeMessage_argsStandardScheme extends StandardScheme<likeOrDislikeMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, likeOrDislikeMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.messageId = iprot.readI64();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPINION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opinion = iprot.readI32();
                struct.setOpinionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, likeOrDislikeMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OPINION_FIELD_DESC);
        oprot.writeI32(struct.opinion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class likeOrDislikeMessage_argsTupleSchemeFactory implements SchemeFactory {
      public likeOrDislikeMessage_argsTupleScheme getScheme() {
        return new likeOrDislikeMessage_argsTupleScheme();
      }
    }

    private static class likeOrDislikeMessage_argsTupleScheme extends TupleScheme<likeOrDislikeMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageId()) {
          optionals.set(0);
        }
        if (struct.isSetOpinion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessageId()) {
          oprot.writeI64(struct.messageId);
        }
        if (struct.isSetOpinion()) {
          oprot.writeI32(struct.opinion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.messageId = iprot.readI64();
          struct.setMessageIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.opinion = iprot.readI32();
          struct.setOpinionIsSet(true);
        }
      }
    }

  }

  public static class likeOrDislikeMessage_result implements org.apache.thrift.TBase<likeOrDislikeMessage_result, likeOrDislikeMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<likeOrDislikeMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("likeOrDislikeMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new likeOrDislikeMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new likeOrDislikeMessage_resultTupleSchemeFactory());
    }

    public UserOpinion success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserOpinion.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(likeOrDislikeMessage_result.class, metaDataMap);
    }

    public likeOrDislikeMessage_result() {
    }

    public likeOrDislikeMessage_result(
      UserOpinion success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public likeOrDislikeMessage_result(likeOrDislikeMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserOpinion(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public likeOrDislikeMessage_result deepCopy() {
      return new likeOrDislikeMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public UserOpinion getSuccess() {
      return this.success;
    }

    public likeOrDislikeMessage_result setSuccess(UserOpinion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public likeOrDislikeMessage_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserOpinion)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof likeOrDislikeMessage_result)
        return this.equals((likeOrDislikeMessage_result)that);
      return false;
    }

    public boolean equals(likeOrDislikeMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(likeOrDislikeMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("likeOrDislikeMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class likeOrDislikeMessage_resultStandardSchemeFactory implements SchemeFactory {
      public likeOrDislikeMessage_resultStandardScheme getScheme() {
        return new likeOrDislikeMessage_resultStandardScheme();
      }
    }

    private static class likeOrDislikeMessage_resultStandardScheme extends StandardScheme<likeOrDislikeMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, likeOrDislikeMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserOpinion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, likeOrDislikeMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class likeOrDislikeMessage_resultTupleSchemeFactory implements SchemeFactory {
      public likeOrDislikeMessage_resultTupleScheme getScheme() {
        return new likeOrDislikeMessage_resultTupleScheme();
      }
    }

    private static class likeOrDislikeMessage_resultTupleScheme extends TupleScheme<likeOrDislikeMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new UserOpinion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class likeOrDislikeTopic_args implements org.apache.thrift.TBase<likeOrDislikeTopic_args, likeOrDislikeTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<likeOrDislikeTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("likeOrDislikeTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField OPINION_FIELD_DESC = new org.apache.thrift.protocol.TField("opinion", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new likeOrDislikeTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new likeOrDislikeTopic_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public int opinion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      OPINION((short)2, "opinion");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // OPINION
            return OPINION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __OPINION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OPINION, new org.apache.thrift.meta_data.FieldMetaData("opinion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(likeOrDislikeTopic_args.class, metaDataMap);
    }

    public likeOrDislikeTopic_args() {
    }

    public likeOrDislikeTopic_args(
      long topicId,
      int opinion)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.opinion = opinion;
      setOpinionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public likeOrDislikeTopic_args(likeOrDislikeTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.opinion = other.opinion;
    }

    public likeOrDislikeTopic_args deepCopy() {
      return new likeOrDislikeTopic_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setOpinionIsSet(false);
      this.opinion = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public likeOrDislikeTopic_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public int getOpinion() {
      return this.opinion;
    }

    public likeOrDislikeTopic_args setOpinion(int opinion) {
      this.opinion = opinion;
      setOpinionIsSet(true);
      return this;
    }

    public void unsetOpinion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPINION_ISSET_ID);
    }

    /** Returns true if field opinion is set (has been assigned a value) and false otherwise */
    public boolean isSetOpinion() {
      return EncodingUtils.testBit(__isset_bitfield, __OPINION_ISSET_ID);
    }

    public void setOpinionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPINION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case OPINION:
        if (value == null) {
          unsetOpinion();
        } else {
          setOpinion((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case OPINION:
        return Integer.valueOf(getOpinion());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case OPINION:
        return isSetOpinion();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof likeOrDislikeTopic_args)
        return this.equals((likeOrDislikeTopic_args)that);
      return false;
    }

    public boolean equals(likeOrDislikeTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_opinion = true;
      boolean that_present_opinion = true;
      if (this_present_opinion || that_present_opinion) {
        if (!(this_present_opinion && that_present_opinion))
          return false;
        if (this.opinion != that.opinion)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(likeOrDislikeTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpinion()).compareTo(other.isSetOpinion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpinion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opinion, other.opinion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("likeOrDislikeTopic_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("opinion:");
      sb.append(this.opinion);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class likeOrDislikeTopic_argsStandardSchemeFactory implements SchemeFactory {
      public likeOrDislikeTopic_argsStandardScheme getScheme() {
        return new likeOrDislikeTopic_argsStandardScheme();
      }
    }

    private static class likeOrDislikeTopic_argsStandardScheme extends StandardScheme<likeOrDislikeTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, likeOrDislikeTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPINION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opinion = iprot.readI32();
                struct.setOpinionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, likeOrDislikeTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OPINION_FIELD_DESC);
        oprot.writeI32(struct.opinion);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class likeOrDislikeTopic_argsTupleSchemeFactory implements SchemeFactory {
      public likeOrDislikeTopic_argsTupleScheme getScheme() {
        return new likeOrDislikeTopic_argsTupleScheme();
      }
    }

    private static class likeOrDislikeTopic_argsTupleScheme extends TupleScheme<likeOrDislikeTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetOpinion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetOpinion()) {
          oprot.writeI32(struct.opinion);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.opinion = iprot.readI32();
          struct.setOpinionIsSet(true);
        }
      }
    }

  }

  public static class likeOrDislikeTopic_result implements org.apache.thrift.TBase<likeOrDislikeTopic_result, likeOrDislikeTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<likeOrDislikeTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("likeOrDislikeTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new likeOrDislikeTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new likeOrDislikeTopic_resultTupleSchemeFactory());
    }

    public UserOpinion success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserOpinion.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(likeOrDislikeTopic_result.class, metaDataMap);
    }

    public likeOrDislikeTopic_result() {
    }

    public likeOrDislikeTopic_result(
      UserOpinion success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public likeOrDislikeTopic_result(likeOrDislikeTopic_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserOpinion(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public likeOrDislikeTopic_result deepCopy() {
      return new likeOrDislikeTopic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public UserOpinion getSuccess() {
      return this.success;
    }

    public likeOrDislikeTopic_result setSuccess(UserOpinion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public likeOrDislikeTopic_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserOpinion)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof likeOrDislikeTopic_result)
        return this.equals((likeOrDislikeTopic_result)that);
      return false;
    }

    public boolean equals(likeOrDislikeTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(likeOrDislikeTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("likeOrDislikeTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class likeOrDislikeTopic_resultStandardSchemeFactory implements SchemeFactory {
      public likeOrDislikeTopic_resultStandardScheme getScheme() {
        return new likeOrDislikeTopic_resultStandardScheme();
      }
    }

    private static class likeOrDislikeTopic_resultStandardScheme extends StandardScheme<likeOrDislikeTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, likeOrDislikeTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserOpinion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, likeOrDislikeTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class likeOrDislikeTopic_resultTupleSchemeFactory implements SchemeFactory {
      public likeOrDislikeTopic_resultTupleScheme getScheme() {
        return new likeOrDislikeTopic_resultTupleScheme();
      }
    }

    private static class likeOrDislikeTopic_resultTupleScheme extends TupleScheme<likeOrDislikeTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, likeOrDislikeTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new UserOpinion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class markReadMessage_args implements org.apache.thrift.TBase<markReadMessage_args, markReadMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<markReadMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markReadMessage_args");

    private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markReadMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markReadMessage_argsTupleSchemeFactory());
    }

    public long messageId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE_ID((short)1, "messageId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE_ID
            return MESSAGE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markReadMessage_args.class, metaDataMap);
    }

    public markReadMessage_args() {
    }

    public markReadMessage_args(
      long messageId)
    {
      this();
      this.messageId = messageId;
      setMessageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markReadMessage_args(markReadMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.messageId = other.messageId;
    }

    public markReadMessage_args deepCopy() {
      return new markReadMessage_args(this);
    }

    @Override
    public void clear() {
      setMessageIdIsSet(false);
      this.messageId = 0;
    }

    public long getMessageId() {
      return this.messageId;
    }

    public markReadMessage_args setMessageId(long messageId) {
      this.messageId = messageId;
      setMessageIdIsSet(true);
      return this;
    }

    public void unsetMessageId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEID_ISSET_ID);
    }

    public void setMessageIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE_ID:
        if (value == null) {
          unsetMessageId();
        } else {
          setMessageId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE_ID:
        return Long.valueOf(getMessageId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE_ID:
        return isSetMessageId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markReadMessage_args)
        return this.equals((markReadMessage_args)that);
      return false;
    }

    public boolean equals(markReadMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_messageId = true;
      boolean that_present_messageId = true;
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (this.messageId != that.messageId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markReadMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markReadMessage_args(");
      boolean first = true;

      sb.append("messageId:");
      sb.append(this.messageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markReadMessage_argsStandardSchemeFactory implements SchemeFactory {
      public markReadMessage_argsStandardScheme getScheme() {
        return new markReadMessage_argsStandardScheme();
      }
    }

    private static class markReadMessage_argsStandardScheme extends StandardScheme<markReadMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markReadMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.messageId = iprot.readI64();
                struct.setMessageIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markReadMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeI64(struct.messageId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markReadMessage_argsTupleSchemeFactory implements SchemeFactory {
      public markReadMessage_argsTupleScheme getScheme() {
        return new markReadMessage_argsTupleScheme();
      }
    }

    private static class markReadMessage_argsTupleScheme extends TupleScheme<markReadMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markReadMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessageId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMessageId()) {
          oprot.writeI64(struct.messageId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markReadMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.messageId = iprot.readI64();
          struct.setMessageIdIsSet(true);
        }
      }
    }

  }

  public static class markReadMessage_result implements org.apache.thrift.TBase<markReadMessage_result, markReadMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<markReadMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markReadMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markReadMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markReadMessage_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markReadMessage_result.class, metaDataMap);
    }

    public markReadMessage_result() {
    }

    public markReadMessage_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markReadMessage_result(markReadMessage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public markReadMessage_result deepCopy() {
      return new markReadMessage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public markReadMessage_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public markReadMessage_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markReadMessage_result)
        return this.equals((markReadMessage_result)that);
      return false;
    }

    public boolean equals(markReadMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markReadMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markReadMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markReadMessage_resultStandardSchemeFactory implements SchemeFactory {
      public markReadMessage_resultStandardScheme getScheme() {
        return new markReadMessage_resultStandardScheme();
      }
    }

    private static class markReadMessage_resultStandardScheme extends StandardScheme<markReadMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markReadMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markReadMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markReadMessage_resultTupleSchemeFactory implements SchemeFactory {
      public markReadMessage_resultTupleScheme getScheme() {
        return new markReadMessage_resultTupleScheme();
      }
    }

    private static class markReadMessage_resultTupleScheme extends TupleScheme<markReadMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markReadMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markReadMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class markReadTopic_args implements org.apache.thrift.TBase<markReadTopic_args, markReadTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<markReadTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markReadTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markReadTopic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markReadTopic_argsTupleSchemeFactory());
    }

    public long topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markReadTopic_args.class, metaDataMap);
    }

    public markReadTopic_args() {
    }

    public markReadTopic_args(
      long topicId)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markReadTopic_args(markReadTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
    }

    public markReadTopic_args deepCopy() {
      return new markReadTopic_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public markReadTopic_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markReadTopic_args)
        return this.equals((markReadTopic_args)that);
      return false;
    }

    public boolean equals(markReadTopic_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markReadTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markReadTopic_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markReadTopic_argsStandardSchemeFactory implements SchemeFactory {
      public markReadTopic_argsStandardScheme getScheme() {
        return new markReadTopic_argsStandardScheme();
      }
    }

    private static class markReadTopic_argsStandardScheme extends StandardScheme<markReadTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markReadTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markReadTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markReadTopic_argsTupleSchemeFactory implements SchemeFactory {
      public markReadTopic_argsTupleScheme getScheme() {
        return new markReadTopic_argsTupleScheme();
      }
    }

    private static class markReadTopic_argsTupleScheme extends TupleScheme<markReadTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markReadTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markReadTopic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class markReadTopic_result implements org.apache.thrift.TBase<markReadTopic_result, markReadTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<markReadTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markReadTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markReadTopic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markReadTopic_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markReadTopic_result.class, metaDataMap);
    }

    public markReadTopic_result() {
    }

    public markReadTopic_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markReadTopic_result(markReadTopic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public markReadTopic_result deepCopy() {
      return new markReadTopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public markReadTopic_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public markReadTopic_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markReadTopic_result)
        return this.equals((markReadTopic_result)that);
      return false;
    }

    public boolean equals(markReadTopic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markReadTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markReadTopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markReadTopic_resultStandardSchemeFactory implements SchemeFactory {
      public markReadTopic_resultStandardScheme getScheme() {
        return new markReadTopic_resultStandardScheme();
      }
    }

    private static class markReadTopic_resultStandardScheme extends StandardScheme<markReadTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markReadTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markReadTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markReadTopic_resultTupleSchemeFactory implements SchemeFactory {
      public markReadTopic_resultTupleScheme getScheme() {
        return new markReadTopic_resultTupleScheme();
      }
    }

    private static class markReadTopic_resultTupleScheme extends TupleScheme<markReadTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markReadTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markReadTopic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class moveTopicToArchive_args implements org.apache.thrift.TBase<moveTopicToArchive_args, moveTopicToArchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveTopicToArchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveTopicToArchive_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveTopicToArchive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveTopicToArchive_argsTupleSchemeFactory());
    }

    public long topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveTopicToArchive_args.class, metaDataMap);
    }

    public moveTopicToArchive_args() {
    }

    public moveTopicToArchive_args(
      long topicId)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveTopicToArchive_args(moveTopicToArchive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
    }

    public moveTopicToArchive_args deepCopy() {
      return new moveTopicToArchive_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public moveTopicToArchive_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveTopicToArchive_args)
        return this.equals((moveTopicToArchive_args)that);
      return false;
    }

    public boolean equals(moveTopicToArchive_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveTopicToArchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveTopicToArchive_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveTopicToArchive_argsStandardSchemeFactory implements SchemeFactory {
      public moveTopicToArchive_argsStandardScheme getScheme() {
        return new moveTopicToArchive_argsStandardScheme();
      }
    }

    private static class moveTopicToArchive_argsStandardScheme extends StandardScheme<moveTopicToArchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveTopicToArchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveTopicToArchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveTopicToArchive_argsTupleSchemeFactory implements SchemeFactory {
      public moveTopicToArchive_argsTupleScheme getScheme() {
        return new moveTopicToArchive_argsTupleScheme();
      }
    }

    private static class moveTopicToArchive_argsTupleScheme extends TupleScheme<moveTopicToArchive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveTopicToArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveTopicToArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class moveTopicToArchive_result implements org.apache.thrift.TBase<moveTopicToArchive_result, moveTopicToArchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveTopicToArchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveTopicToArchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new moveTopicToArchive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new moveTopicToArchive_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveTopicToArchive_result.class, metaDataMap);
    }

    public moveTopicToArchive_result() {
    }

    public moveTopicToArchive_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveTopicToArchive_result(moveTopicToArchive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public moveTopicToArchive_result deepCopy() {
      return new moveTopicToArchive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public moveTopicToArchive_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public moveTopicToArchive_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof moveTopicToArchive_result)
        return this.equals((moveTopicToArchive_result)that);
      return false;
    }

    public boolean equals(moveTopicToArchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(moveTopicToArchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("moveTopicToArchive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveTopicToArchive_resultStandardSchemeFactory implements SchemeFactory {
      public moveTopicToArchive_resultStandardScheme getScheme() {
        return new moveTopicToArchive_resultStandardScheme();
      }
    }

    private static class moveTopicToArchive_resultStandardScheme extends StandardScheme<moveTopicToArchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveTopicToArchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveTopicToArchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveTopicToArchive_resultTupleSchemeFactory implements SchemeFactory {
      public moveTopicToArchive_resultTupleScheme getScheme() {
        return new moveTopicToArchive_resultTupleScheme();
      }
    }

    private static class moveTopicToArchive_resultTupleScheme extends TupleScheme<moveTopicToArchive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveTopicToArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveTopicToArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class restoreTopicFromArchive_args implements org.apache.thrift.TBase<restoreTopicFromArchive_args, restoreTopicFromArchive_args._Fields>, java.io.Serializable, Cloneable, Comparable<restoreTopicFromArchive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restoreTopicFromArchive_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restoreTopicFromArchive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restoreTopicFromArchive_argsTupleSchemeFactory());
    }

    public long topicId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restoreTopicFromArchive_args.class, metaDataMap);
    }

    public restoreTopicFromArchive_args() {
    }

    public restoreTopicFromArchive_args(
      long topicId)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restoreTopicFromArchive_args(restoreTopicFromArchive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
    }

    public restoreTopicFromArchive_args deepCopy() {
      return new restoreTopicFromArchive_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public restoreTopicFromArchive_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restoreTopicFromArchive_args)
        return this.equals((restoreTopicFromArchive_args)that);
      return false;
    }

    public boolean equals(restoreTopicFromArchive_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restoreTopicFromArchive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restoreTopicFromArchive_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restoreTopicFromArchive_argsStandardSchemeFactory implements SchemeFactory {
      public restoreTopicFromArchive_argsStandardScheme getScheme() {
        return new restoreTopicFromArchive_argsStandardScheme();
      }
    }

    private static class restoreTopicFromArchive_argsStandardScheme extends StandardScheme<restoreTopicFromArchive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restoreTopicFromArchive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restoreTopicFromArchive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restoreTopicFromArchive_argsTupleSchemeFactory implements SchemeFactory {
      public restoreTopicFromArchive_argsTupleScheme getScheme() {
        return new restoreTopicFromArchive_argsTupleScheme();
      }
    }

    private static class restoreTopicFromArchive_argsTupleScheme extends TupleScheme<restoreTopicFromArchive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restoreTopicFromArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restoreTopicFromArchive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
      }
    }

  }

  public static class restoreTopicFromArchive_result implements org.apache.thrift.TBase<restoreTopicFromArchive_result, restoreTopicFromArchive_result._Fields>, java.io.Serializable, Cloneable, Comparable<restoreTopicFromArchive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("restoreTopicFromArchive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new restoreTopicFromArchive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new restoreTopicFromArchive_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(restoreTopicFromArchive_result.class, metaDataMap);
    }

    public restoreTopicFromArchive_result() {
    }

    public restoreTopicFromArchive_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public restoreTopicFromArchive_result(restoreTopicFromArchive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public restoreTopicFromArchive_result deepCopy() {
      return new restoreTopicFromArchive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public restoreTopicFromArchive_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public restoreTopicFromArchive_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof restoreTopicFromArchive_result)
        return this.equals((restoreTopicFromArchive_result)that);
      return false;
    }

    public boolean equals(restoreTopicFromArchive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(restoreTopicFromArchive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("restoreTopicFromArchive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class restoreTopicFromArchive_resultStandardSchemeFactory implements SchemeFactory {
      public restoreTopicFromArchive_resultStandardScheme getScheme() {
        return new restoreTopicFromArchive_resultStandardScheme();
      }
    }

    private static class restoreTopicFromArchive_resultStandardScheme extends StandardScheme<restoreTopicFromArchive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, restoreTopicFromArchive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, restoreTopicFromArchive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class restoreTopicFromArchive_resultTupleSchemeFactory implements SchemeFactory {
      public restoreTopicFromArchive_resultTupleScheme getScheme() {
        return new restoreTopicFromArchive_resultTupleScheme();
      }
    }

    private static class restoreTopicFromArchive_resultTupleScheme extends TupleScheme<restoreTopicFromArchive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, restoreTopicFromArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, restoreTopicFromArchive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class markTopicUnintrested_args implements org.apache.thrift.TBase<markTopicUnintrested_args, markTopicUnintrested_args._Fields>, java.io.Serializable, Cloneable, Comparable<markTopicUnintrested_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markTopicUnintrested_args");

    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INTERESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("interested", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markTopicUnintrested_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markTopicUnintrested_argsTupleSchemeFactory());
    }

    public long topicId; // required
    public boolean interested; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_ID((short)1, "topicId"),
      INTERESTED((short)2, "interested");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_ID
            return TOPIC_ID;
          case 2: // INTERESTED
            return INTERESTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPICID_ISSET_ID = 0;
    private static final int __INTERESTED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INTERESTED, new org.apache.thrift.meta_data.FieldMetaData("interested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markTopicUnintrested_args.class, metaDataMap);
    }

    public markTopicUnintrested_args() {
    }

    public markTopicUnintrested_args(
      long topicId,
      boolean interested)
    {
      this();
      this.topicId = topicId;
      setTopicIdIsSet(true);
      this.interested = interested;
      setInterestedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markTopicUnintrested_args(markTopicUnintrested_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.topicId = other.topicId;
      this.interested = other.interested;
    }

    public markTopicUnintrested_args deepCopy() {
      return new markTopicUnintrested_args(this);
    }

    @Override
    public void clear() {
      setTopicIdIsSet(false);
      this.topicId = 0;
      setInterestedIsSet(false);
      this.interested = false;
    }

    public long getTopicId() {
      return this.topicId;
    }

    public markTopicUnintrested_args setTopicId(long topicId) {
      this.topicId = topicId;
      setTopicIdIsSet(true);
      return this;
    }

    public void unsetTopicId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicId() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
    }

    public void setTopicIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
    }

    public boolean isInterested() {
      return this.interested;
    }

    public markTopicUnintrested_args setInterested(boolean interested) {
      this.interested = interested;
      setInterestedIsSet(true);
      return this;
    }

    public void unsetInterested() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERESTED_ISSET_ID);
    }

    /** Returns true if field interested is set (has been assigned a value) and false otherwise */
    public boolean isSetInterested() {
      return EncodingUtils.testBit(__isset_bitfield, __INTERESTED_ISSET_ID);
    }

    public void setInterestedIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERESTED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOPIC_ID:
        if (value == null) {
          unsetTopicId();
        } else {
          setTopicId((Long)value);
        }
        break;

      case INTERESTED:
        if (value == null) {
          unsetInterested();
        } else {
          setInterested((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_ID:
        return Long.valueOf(getTopicId());

      case INTERESTED:
        return Boolean.valueOf(isInterested());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_ID:
        return isSetTopicId();
      case INTERESTED:
        return isSetInterested();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markTopicUnintrested_args)
        return this.equals((markTopicUnintrested_args)that);
      return false;
    }

    public boolean equals(markTopicUnintrested_args that) {
      if (that == null)
        return false;

      boolean this_present_topicId = true;
      boolean that_present_topicId = true;
      if (this_present_topicId || that_present_topicId) {
        if (!(this_present_topicId && that_present_topicId))
          return false;
        if (this.topicId != that.topicId)
          return false;
      }

      boolean this_present_interested = true;
      boolean that_present_interested = true;
      if (this_present_interested || that_present_interested) {
        if (!(this_present_interested && that_present_interested))
          return false;
        if (this.interested != that.interested)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markTopicUnintrested_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInterested()).compareTo(other.isSetInterested());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInterested()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interested, other.interested);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markTopicUnintrested_args(");
      boolean first = true;

      sb.append("topicId:");
      sb.append(this.topicId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("interested:");
      sb.append(this.interested);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markTopicUnintrested_argsStandardSchemeFactory implements SchemeFactory {
      public markTopicUnintrested_argsStandardScheme getScheme() {
        return new markTopicUnintrested_argsStandardScheme();
      }
    }

    private static class markTopicUnintrested_argsStandardScheme extends StandardScheme<markTopicUnintrested_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markTopicUnintrested_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.topicId = iprot.readI64();
                struct.setTopicIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INTERESTED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.interested = iprot.readBool();
                struct.setInterestedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markTopicUnintrested_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI64(struct.topicId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INTERESTED_FIELD_DESC);
        oprot.writeBool(struct.interested);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markTopicUnintrested_argsTupleSchemeFactory implements SchemeFactory {
      public markTopicUnintrested_argsTupleScheme getScheme() {
        return new markTopicUnintrested_argsTupleScheme();
      }
    }

    private static class markTopicUnintrested_argsTupleScheme extends TupleScheme<markTopicUnintrested_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markTopicUnintrested_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTopicId()) {
          optionals.set(0);
        }
        if (struct.isSetInterested()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicId()) {
          oprot.writeI64(struct.topicId);
        }
        if (struct.isSetInterested()) {
          oprot.writeBool(struct.interested);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markTopicUnintrested_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicId = iprot.readI64();
          struct.setTopicIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.interested = iprot.readBool();
          struct.setInterestedIsSet(true);
        }
      }
    }

  }

  public static class markTopicUnintrested_result implements org.apache.thrift.TBase<markTopicUnintrested_result, markTopicUnintrested_result._Fields>, java.io.Serializable, Cloneable, Comparable<markTopicUnintrested_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markTopicUnintrested_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new markTopicUnintrested_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new markTopicUnintrested_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markTopicUnintrested_result.class, metaDataMap);
    }

    public markTopicUnintrested_result() {
    }

    public markTopicUnintrested_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markTopicUnintrested_result(markTopicUnintrested_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public markTopicUnintrested_result deepCopy() {
      return new markTopicUnintrested_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public markTopicUnintrested_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public markTopicUnintrested_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markTopicUnintrested_result)
        return this.equals((markTopicUnintrested_result)that);
      return false;
    }

    public boolean equals(markTopicUnintrested_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(markTopicUnintrested_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("markTopicUnintrested_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markTopicUnintrested_resultStandardSchemeFactory implements SchemeFactory {
      public markTopicUnintrested_resultStandardScheme getScheme() {
        return new markTopicUnintrested_resultStandardScheme();
      }
    }

    private static class markTopicUnintrested_resultStandardScheme extends StandardScheme<markTopicUnintrested_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markTopicUnintrested_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markTopicUnintrested_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markTopicUnintrested_resultTupleSchemeFactory implements SchemeFactory {
      public markTopicUnintrested_resultTupleScheme getScheme() {
        return new markTopicUnintrested_resultTupleScheme();
      }
    }

    private static class markTopicUnintrested_resultTupleScheme extends TupleScheme<markTopicUnintrested_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markTopicUnintrested_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markTopicUnintrested_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class makeMessageLinked_args implements org.apache.thrift.TBase<makeMessageLinked_args, makeMessageLinked_args._Fields>, java.io.Serializable, Cloneable, Comparable<makeMessageLinked_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeMessageLinked_args");

    private static final org.apache.thrift.protocol.TField MESSAGE1_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("message1Id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE2_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("message2Id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeMessageLinked_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeMessageLinked_argsTupleSchemeFactory());
    }

    public long message1Id; // required
    public long message2Id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MESSAGE1_ID((short)1, "message1Id"),
      MESSAGE2_ID((short)2, "message2Id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MESSAGE1_ID
            return MESSAGE1_ID;
          case 2: // MESSAGE2_ID
            return MESSAGE2_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGE1ID_ISSET_ID = 0;
    private static final int __MESSAGE2ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MESSAGE1_ID, new org.apache.thrift.meta_data.FieldMetaData("message1Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MESSAGE2_ID, new org.apache.thrift.meta_data.FieldMetaData("message2Id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeMessageLinked_args.class, metaDataMap);
    }

    public makeMessageLinked_args() {
    }

    public makeMessageLinked_args(
      long message1Id,
      long message2Id)
    {
      this();
      this.message1Id = message1Id;
      setMessage1IdIsSet(true);
      this.message2Id = message2Id;
      setMessage2IdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeMessageLinked_args(makeMessageLinked_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.message1Id = other.message1Id;
      this.message2Id = other.message2Id;
    }

    public makeMessageLinked_args deepCopy() {
      return new makeMessageLinked_args(this);
    }

    @Override
    public void clear() {
      setMessage1IdIsSet(false);
      this.message1Id = 0;
      setMessage2IdIsSet(false);
      this.message2Id = 0;
    }

    public long getMessage1Id() {
      return this.message1Id;
    }

    public makeMessageLinked_args setMessage1Id(long message1Id) {
      this.message1Id = message1Id;
      setMessage1IdIsSet(true);
      return this;
    }

    public void unsetMessage1Id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGE1ID_ISSET_ID);
    }

    /** Returns true if field message1Id is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage1Id() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGE1ID_ISSET_ID);
    }

    public void setMessage1IdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGE1ID_ISSET_ID, value);
    }

    public long getMessage2Id() {
      return this.message2Id;
    }

    public makeMessageLinked_args setMessage2Id(long message2Id) {
      this.message2Id = message2Id;
      setMessage2IdIsSet(true);
      return this;
    }

    public void unsetMessage2Id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGE2ID_ISSET_ID);
    }

    /** Returns true if field message2Id is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage2Id() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGE2ID_ISSET_ID);
    }

    public void setMessage2IdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGE2ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MESSAGE1_ID:
        if (value == null) {
          unsetMessage1Id();
        } else {
          setMessage1Id((Long)value);
        }
        break;

      case MESSAGE2_ID:
        if (value == null) {
          unsetMessage2Id();
        } else {
          setMessage2Id((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MESSAGE1_ID:
        return Long.valueOf(getMessage1Id());

      case MESSAGE2_ID:
        return Long.valueOf(getMessage2Id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MESSAGE1_ID:
        return isSetMessage1Id();
      case MESSAGE2_ID:
        return isSetMessage2Id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeMessageLinked_args)
        return this.equals((makeMessageLinked_args)that);
      return false;
    }

    public boolean equals(makeMessageLinked_args that) {
      if (that == null)
        return false;

      boolean this_present_message1Id = true;
      boolean that_present_message1Id = true;
      if (this_present_message1Id || that_present_message1Id) {
        if (!(this_present_message1Id && that_present_message1Id))
          return false;
        if (this.message1Id != that.message1Id)
          return false;
      }

      boolean this_present_message2Id = true;
      boolean that_present_message2Id = true;
      if (this_present_message2Id || that_present_message2Id) {
        if (!(this_present_message2Id && that_present_message2Id))
          return false;
        if (this.message2Id != that.message2Id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(makeMessageLinked_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMessage1Id()).compareTo(other.isSetMessage1Id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage1Id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message1Id, other.message1Id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage2Id()).compareTo(other.isSetMessage2Id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage2Id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message2Id, other.message2Id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeMessageLinked_args(");
      boolean first = true;

      sb.append("message1Id:");
      sb.append(this.message1Id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message2Id:");
      sb.append(this.message2Id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeMessageLinked_argsStandardSchemeFactory implements SchemeFactory {
      public makeMessageLinked_argsStandardScheme getScheme() {
        return new makeMessageLinked_argsStandardScheme();
      }
    }

    private static class makeMessageLinked_argsStandardScheme extends StandardScheme<makeMessageLinked_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeMessageLinked_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MESSAGE1_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.message1Id = iprot.readI64();
                struct.setMessage1IdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGE2_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.message2Id = iprot.readI64();
                struct.setMessage2IdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeMessageLinked_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(MESSAGE1_ID_FIELD_DESC);
        oprot.writeI64(struct.message1Id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MESSAGE2_ID_FIELD_DESC);
        oprot.writeI64(struct.message2Id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeMessageLinked_argsTupleSchemeFactory implements SchemeFactory {
      public makeMessageLinked_argsTupleScheme getScheme() {
        return new makeMessageLinked_argsTupleScheme();
      }
    }

    private static class makeMessageLinked_argsTupleScheme extends TupleScheme<makeMessageLinked_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeMessageLinked_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMessage1Id()) {
          optionals.set(0);
        }
        if (struct.isSetMessage2Id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMessage1Id()) {
          oprot.writeI64(struct.message1Id);
        }
        if (struct.isSetMessage2Id()) {
          oprot.writeI64(struct.message2Id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeMessageLinked_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.message1Id = iprot.readI64();
          struct.setMessage1IdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.message2Id = iprot.readI64();
          struct.setMessage2IdIsSet(true);
        }
      }
    }

  }

  public static class makeMessageLinked_result implements org.apache.thrift.TBase<makeMessageLinked_result, makeMessageLinked_result._Fields>, java.io.Serializable, Cloneable, Comparable<makeMessageLinked_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makeMessageLinked_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new makeMessageLinked_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new makeMessageLinked_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makeMessageLinked_result.class, metaDataMap);
    }

    public makeMessageLinked_result() {
    }

    public makeMessageLinked_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeMessageLinked_result(makeMessageLinked_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public makeMessageLinked_result deepCopy() {
      return new makeMessageLinked_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public makeMessageLinked_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public makeMessageLinked_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeMessageLinked_result)
        return this.equals((makeMessageLinked_result)that);
      return false;
    }

    public boolean equals(makeMessageLinked_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(makeMessageLinked_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("makeMessageLinked_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makeMessageLinked_resultStandardSchemeFactory implements SchemeFactory {
      public makeMessageLinked_resultStandardScheme getScheme() {
        return new makeMessageLinked_resultStandardScheme();
      }
    }

    private static class makeMessageLinked_resultStandardScheme extends StandardScheme<makeMessageLinked_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makeMessageLinked_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makeMessageLinked_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makeMessageLinked_resultTupleSchemeFactory implements SchemeFactory {
      public makeMessageLinked_resultTupleScheme getScheme() {
        return new makeMessageLinked_resultTupleScheme();
      }
    }

    private static class makeMessageLinked_resultTupleScheme extends TupleScheme<makeMessageLinked_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makeMessageLinked_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makeMessageLinked_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
