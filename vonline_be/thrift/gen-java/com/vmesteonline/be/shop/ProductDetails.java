/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.shop;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProductDetails implements org.apache.thrift.TBase<ProductDetails, ProductDetails._Fields>, java.io.Serializable, Cloneable, Comparable<ProductDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductDetails");

  private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField FULL_DESCR_FIELD_DESC = new org.apache.thrift.protocol.TField("fullDescr", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGES_URLSET_FIELD_DESC = new org.apache.thrift.protocol.TField("imagesURLset", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField PRICES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("pricesMap", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField OPTIONS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("optionsMap", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TOPIC_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("topicSet", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("producerId", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProductDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProductDetailsTupleSchemeFactory());
  }

  public Set<Long> categories; // required
  public String fullDescr; // required
  public Set<ByteBuffer> imagesURLset; // required
  public Map<PriceType,Double> pricesMap; // required
  public Map<String,String> optionsMap; // required
  public Set<Long> topicSet; // required
  public long producerId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CATEGORIES((short)1, "categories"),
    FULL_DESCR((short)2, "fullDescr"),
    IMAGES_URLSET((short)3, "imagesURLset"),
    PRICES_MAP((short)4, "pricesMap"),
    OPTIONS_MAP((short)5, "optionsMap"),
    TOPIC_SET((short)6, "topicSet"),
    PRODUCER_ID((short)7, "producerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CATEGORIES
          return CATEGORIES;
        case 2: // FULL_DESCR
          return FULL_DESCR;
        case 3: // IMAGES_URLSET
          return IMAGES_URLSET;
        case 4: // PRICES_MAP
          return PRICES_MAP;
        case 5: // OPTIONS_MAP
          return OPTIONS_MAP;
        case 6: // TOPIC_SET
          return TOPIC_SET;
        case 7: // PRODUCER_ID
          return PRODUCER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.FULL_DESCR, new org.apache.thrift.meta_data.FieldMetaData("fullDescr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGES_URLSET, new org.apache.thrift.meta_data.FieldMetaData("imagesURLset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.PRICES_MAP, new org.apache.thrift.meta_data.FieldMetaData("pricesMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.OPTIONS_MAP, new org.apache.thrift.meta_data.FieldMetaData("optionsMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOPIC_SET, new org.apache.thrift.meta_data.FieldMetaData("topicSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.PRODUCER_ID, new org.apache.thrift.meta_data.FieldMetaData("producerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductDetails.class, metaDataMap);
  }

  public ProductDetails() {
  }

  public ProductDetails(
    Set<Long> categories,
    String fullDescr,
    Set<ByteBuffer> imagesURLset,
    Map<PriceType,Double> pricesMap,
    Map<String,String> optionsMap,
    Set<Long> topicSet,
    long producerId)
  {
    this();
    this.categories = categories;
    this.fullDescr = fullDescr;
    this.imagesURLset = imagesURLset;
    this.pricesMap = pricesMap;
    this.optionsMap = optionsMap;
    this.topicSet = topicSet;
    this.producerId = producerId;
    setProducerIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductDetails(ProductDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCategories()) {
      Set<Long> __this__categories = new HashSet<Long>(other.categories);
      this.categories = __this__categories;
    }
    if (other.isSetFullDescr()) {
      this.fullDescr = other.fullDescr;
    }
    if (other.isSetImagesURLset()) {
      Set<ByteBuffer> __this__imagesURLset = new HashSet<ByteBuffer>(other.imagesURLset);
      this.imagesURLset = __this__imagesURLset;
    }
    if (other.isSetPricesMap()) {
      Map<PriceType,Double> __this__pricesMap = new HashMap<PriceType,Double>(other.pricesMap.size());
      for (Map.Entry<PriceType, Double> other_element : other.pricesMap.entrySet()) {

        PriceType other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        PriceType __this__pricesMap_copy_key = other_element_key;

        Double __this__pricesMap_copy_value = other_element_value;

        __this__pricesMap.put(__this__pricesMap_copy_key, __this__pricesMap_copy_value);
      }
      this.pricesMap = __this__pricesMap;
    }
    if (other.isSetOptionsMap()) {
      Map<String,String> __this__optionsMap = new HashMap<String,String>(other.optionsMap);
      this.optionsMap = __this__optionsMap;
    }
    if (other.isSetTopicSet()) {
      Set<Long> __this__topicSet = new HashSet<Long>(other.topicSet);
      this.topicSet = __this__topicSet;
    }
    this.producerId = other.producerId;
  }

  public ProductDetails deepCopy() {
    return new ProductDetails(this);
  }

  @Override
  public void clear() {
    this.categories = null;
    this.fullDescr = null;
    this.imagesURLset = null;
    this.pricesMap = null;
    this.optionsMap = null;
    this.topicSet = null;
    setProducerIdIsSet(false);
    this.producerId = 0;
  }

  public int getCategoriesSize() {
    return (this.categories == null) ? 0 : this.categories.size();
  }

  public java.util.Iterator<Long> getCategoriesIterator() {
    return (this.categories == null) ? null : this.categories.iterator();
  }

  public void addToCategories(long elem) {
    if (this.categories == null) {
      this.categories = new HashSet<Long>();
    }
    this.categories.add(elem);
  }

  public Set<Long> getCategories() {
    return this.categories;
  }

  public ProductDetails setCategories(Set<Long> categories) {
    this.categories = categories;
    return this;
  }

  public void unsetCategories() {
    this.categories = null;
  }

  /** Returns true if field categories is set (has been assigned a value) and false otherwise */
  public boolean isSetCategories() {
    return this.categories != null;
  }

  public void setCategoriesIsSet(boolean value) {
    if (!value) {
      this.categories = null;
    }
  }

  public String getFullDescr() {
    return this.fullDescr;
  }

  public ProductDetails setFullDescr(String fullDescr) {
    this.fullDescr = fullDescr;
    return this;
  }

  public void unsetFullDescr() {
    this.fullDescr = null;
  }

  /** Returns true if field fullDescr is set (has been assigned a value) and false otherwise */
  public boolean isSetFullDescr() {
    return this.fullDescr != null;
  }

  public void setFullDescrIsSet(boolean value) {
    if (!value) {
      this.fullDescr = null;
    }
  }

  public int getImagesURLsetSize() {
    return (this.imagesURLset == null) ? 0 : this.imagesURLset.size();
  }

  public java.util.Iterator<ByteBuffer> getImagesURLsetIterator() {
    return (this.imagesURLset == null) ? null : this.imagesURLset.iterator();
  }

  public void addToImagesURLset(ByteBuffer elem) {
    if (this.imagesURLset == null) {
      this.imagesURLset = new HashSet<ByteBuffer>();
    }
    this.imagesURLset.add(elem);
  }

  public Set<ByteBuffer> getImagesURLset() {
    return this.imagesURLset;
  }

  public ProductDetails setImagesURLset(Set<ByteBuffer> imagesURLset) {
    this.imagesURLset = imagesURLset;
    return this;
  }

  public void unsetImagesURLset() {
    this.imagesURLset = null;
  }

  /** Returns true if field imagesURLset is set (has been assigned a value) and false otherwise */
  public boolean isSetImagesURLset() {
    return this.imagesURLset != null;
  }

  public void setImagesURLsetIsSet(boolean value) {
    if (!value) {
      this.imagesURLset = null;
    }
  }

  public int getPricesMapSize() {
    return (this.pricesMap == null) ? 0 : this.pricesMap.size();
  }

  public void putToPricesMap(PriceType key, double val) {
    if (this.pricesMap == null) {
      this.pricesMap = new HashMap<PriceType,Double>();
    }
    this.pricesMap.put(key, val);
  }

  public Map<PriceType,Double> getPricesMap() {
    return this.pricesMap;
  }

  public ProductDetails setPricesMap(Map<PriceType,Double> pricesMap) {
    this.pricesMap = pricesMap;
    return this;
  }

  public void unsetPricesMap() {
    this.pricesMap = null;
  }

  /** Returns true if field pricesMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPricesMap() {
    return this.pricesMap != null;
  }

  public void setPricesMapIsSet(boolean value) {
    if (!value) {
      this.pricesMap = null;
    }
  }

  public int getOptionsMapSize() {
    return (this.optionsMap == null) ? 0 : this.optionsMap.size();
  }

  public void putToOptionsMap(String key, String val) {
    if (this.optionsMap == null) {
      this.optionsMap = new HashMap<String,String>();
    }
    this.optionsMap.put(key, val);
  }

  public Map<String,String> getOptionsMap() {
    return this.optionsMap;
  }

  public ProductDetails setOptionsMap(Map<String,String> optionsMap) {
    this.optionsMap = optionsMap;
    return this;
  }

  public void unsetOptionsMap() {
    this.optionsMap = null;
  }

  /** Returns true if field optionsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetOptionsMap() {
    return this.optionsMap != null;
  }

  public void setOptionsMapIsSet(boolean value) {
    if (!value) {
      this.optionsMap = null;
    }
  }

  public int getTopicSetSize() {
    return (this.topicSet == null) ? 0 : this.topicSet.size();
  }

  public java.util.Iterator<Long> getTopicSetIterator() {
    return (this.topicSet == null) ? null : this.topicSet.iterator();
  }

  public void addToTopicSet(long elem) {
    if (this.topicSet == null) {
      this.topicSet = new HashSet<Long>();
    }
    this.topicSet.add(elem);
  }

  public Set<Long> getTopicSet() {
    return this.topicSet;
  }

  public ProductDetails setTopicSet(Set<Long> topicSet) {
    this.topicSet = topicSet;
    return this;
  }

  public void unsetTopicSet() {
    this.topicSet = null;
  }

  /** Returns true if field topicSet is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicSet() {
    return this.topicSet != null;
  }

  public void setTopicSetIsSet(boolean value) {
    if (!value) {
      this.topicSet = null;
    }
  }

  public long getProducerId() {
    return this.producerId;
  }

  public ProductDetails setProducerId(long producerId) {
    this.producerId = producerId;
    setProducerIdIsSet(true);
    return this;
  }

  public void unsetProducerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCERID_ISSET_ID);
  }

  /** Returns true if field producerId is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCERID_ISSET_ID);
  }

  public void setProducerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CATEGORIES:
      if (value == null) {
        unsetCategories();
      } else {
        setCategories((Set<Long>)value);
      }
      break;

    case FULL_DESCR:
      if (value == null) {
        unsetFullDescr();
      } else {
        setFullDescr((String)value);
      }
      break;

    case IMAGES_URLSET:
      if (value == null) {
        unsetImagesURLset();
      } else {
        setImagesURLset((Set<ByteBuffer>)value);
      }
      break;

    case PRICES_MAP:
      if (value == null) {
        unsetPricesMap();
      } else {
        setPricesMap((Map<PriceType,Double>)value);
      }
      break;

    case OPTIONS_MAP:
      if (value == null) {
        unsetOptionsMap();
      } else {
        setOptionsMap((Map<String,String>)value);
      }
      break;

    case TOPIC_SET:
      if (value == null) {
        unsetTopicSet();
      } else {
        setTopicSet((Set<Long>)value);
      }
      break;

    case PRODUCER_ID:
      if (value == null) {
        unsetProducerId();
      } else {
        setProducerId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CATEGORIES:
      return getCategories();

    case FULL_DESCR:
      return getFullDescr();

    case IMAGES_URLSET:
      return getImagesURLset();

    case PRICES_MAP:
      return getPricesMap();

    case OPTIONS_MAP:
      return getOptionsMap();

    case TOPIC_SET:
      return getTopicSet();

    case PRODUCER_ID:
      return Long.valueOf(getProducerId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CATEGORIES:
      return isSetCategories();
    case FULL_DESCR:
      return isSetFullDescr();
    case IMAGES_URLSET:
      return isSetImagesURLset();
    case PRICES_MAP:
      return isSetPricesMap();
    case OPTIONS_MAP:
      return isSetOptionsMap();
    case TOPIC_SET:
      return isSetTopicSet();
    case PRODUCER_ID:
      return isSetProducerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductDetails)
      return this.equals((ProductDetails)that);
    return false;
  }

  public boolean equals(ProductDetails that) {
    if (that == null)
      return false;

    boolean this_present_categories = true && this.isSetCategories();
    boolean that_present_categories = true && that.isSetCategories();
    if (this_present_categories || that_present_categories) {
      if (!(this_present_categories && that_present_categories))
        return false;
      if (!this.categories.equals(that.categories))
        return false;
    }

    boolean this_present_fullDescr = true && this.isSetFullDescr();
    boolean that_present_fullDescr = true && that.isSetFullDescr();
    if (this_present_fullDescr || that_present_fullDescr) {
      if (!(this_present_fullDescr && that_present_fullDescr))
        return false;
      if (!this.fullDescr.equals(that.fullDescr))
        return false;
    }

    boolean this_present_imagesURLset = true && this.isSetImagesURLset();
    boolean that_present_imagesURLset = true && that.isSetImagesURLset();
    if (this_present_imagesURLset || that_present_imagesURLset) {
      if (!(this_present_imagesURLset && that_present_imagesURLset))
        return false;
      if (!this.imagesURLset.equals(that.imagesURLset))
        return false;
    }

    boolean this_present_pricesMap = true && this.isSetPricesMap();
    boolean that_present_pricesMap = true && that.isSetPricesMap();
    if (this_present_pricesMap || that_present_pricesMap) {
      if (!(this_present_pricesMap && that_present_pricesMap))
        return false;
      if (!this.pricesMap.equals(that.pricesMap))
        return false;
    }

    boolean this_present_optionsMap = true && this.isSetOptionsMap();
    boolean that_present_optionsMap = true && that.isSetOptionsMap();
    if (this_present_optionsMap || that_present_optionsMap) {
      if (!(this_present_optionsMap && that_present_optionsMap))
        return false;
      if (!this.optionsMap.equals(that.optionsMap))
        return false;
    }

    boolean this_present_topicSet = true && this.isSetTopicSet();
    boolean that_present_topicSet = true && that.isSetTopicSet();
    if (this_present_topicSet || that_present_topicSet) {
      if (!(this_present_topicSet && that_present_topicSet))
        return false;
      if (!this.topicSet.equals(that.topicSet))
        return false;
    }

    boolean this_present_producerId = true;
    boolean that_present_producerId = true;
    if (this_present_producerId || that_present_producerId) {
      if (!(this_present_producerId && that_present_producerId))
        return false;
      if (this.producerId != that.producerId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProductDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCategories()).compareTo(other.isSetCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, other.categories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullDescr()).compareTo(other.isSetFullDescr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullDescr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullDescr, other.fullDescr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagesURLset()).compareTo(other.isSetImagesURLset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagesURLset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagesURLset, other.imagesURLset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPricesMap()).compareTo(other.isSetPricesMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPricesMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pricesMap, other.pricesMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptionsMap()).compareTo(other.isSetOptionsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptionsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.optionsMap, other.optionsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicSet()).compareTo(other.isSetTopicSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicSet, other.topicSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerId()).compareTo(other.isSetProducerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerId, other.producerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProductDetails(");
    boolean first = true;

    sb.append("categories:");
    if (this.categories == null) {
      sb.append("null");
    } else {
      sb.append(this.categories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullDescr:");
    if (this.fullDescr == null) {
      sb.append("null");
    } else {
      sb.append(this.fullDescr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imagesURLset:");
    if (this.imagesURLset == null) {
      sb.append("null");
    } else {
      sb.append(this.imagesURLset);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pricesMap:");
    if (this.pricesMap == null) {
      sb.append("null");
    } else {
      sb.append(this.pricesMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("optionsMap:");
    if (this.optionsMap == null) {
      sb.append("null");
    } else {
      sb.append(this.optionsMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicSet:");
    if (this.topicSet == null) {
      sb.append("null");
    } else {
      sb.append(this.topicSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerId:");
    sb.append(this.producerId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductDetailsStandardSchemeFactory implements SchemeFactory {
    public ProductDetailsStandardScheme getScheme() {
      return new ProductDetailsStandardScheme();
    }
  }

  private static class ProductDetailsStandardScheme extends StandardScheme<ProductDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CATEGORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                struct.categories = new HashSet<Long>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  long _elem34;
                  _elem34 = iprot.readI64();
                  struct.categories.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setCategoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FULL_DESCR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullDescr = iprot.readString();
              struct.setFullDescrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGES_URLSET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                struct.imagesURLset = new HashSet<ByteBuffer>(2*_set35.size);
                for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                {
                  ByteBuffer _elem37;
                  _elem37 = iprot.readBinary();
                  struct.imagesURLset.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setImagesURLsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICES_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.pricesMap = new HashMap<PriceType,Double>(2*_map38.size);
                for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                {
                  PriceType _key40;
                  double _val41;
                  _key40 = PriceType.findByValue(iprot.readI32());
                  _val41 = iprot.readDouble();
                  struct.pricesMap.put(_key40, _val41);
                }
                iprot.readMapEnd();
              }
              struct.setPricesMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPTIONS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map42 = iprot.readMapBegin();
                struct.optionsMap = new HashMap<String,String>(2*_map42.size);
                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                {
                  String _key44;
                  String _val45;
                  _key44 = iprot.readString();
                  _val45 = iprot.readString();
                  struct.optionsMap.put(_key44, _val45);
                }
                iprot.readMapEnd();
              }
              struct.setOptionsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOPIC_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set46 = iprot.readSetBegin();
                struct.topicSet = new HashSet<Long>(2*_set46.size);
                for (int _i47 = 0; _i47 < _set46.size; ++_i47)
                {
                  long _elem48;
                  _elem48 = iprot.readI64();
                  struct.topicSet.add(_elem48);
                }
                iprot.readSetEnd();
              }
              struct.setTopicSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.producerId = iprot.readI64();
              struct.setProducerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.categories != null) {
        oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.categories.size()));
          for (long _iter49 : struct.categories)
          {
            oprot.writeI64(_iter49);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fullDescr != null) {
        oprot.writeFieldBegin(FULL_DESCR_FIELD_DESC);
        oprot.writeString(struct.fullDescr);
        oprot.writeFieldEnd();
      }
      if (struct.imagesURLset != null) {
        oprot.writeFieldBegin(IMAGES_URLSET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.imagesURLset.size()));
          for (ByteBuffer _iter50 : struct.imagesURLset)
          {
            oprot.writeBinary(_iter50);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pricesMap != null) {
        oprot.writeFieldBegin(PRICES_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.pricesMap.size()));
          for (Map.Entry<PriceType, Double> _iter51 : struct.pricesMap.entrySet())
          {
            oprot.writeI32(_iter51.getKey().getValue());
            oprot.writeDouble(_iter51.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.optionsMap != null) {
        oprot.writeFieldBegin(OPTIONS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.optionsMap.size()));
          for (Map.Entry<String, String> _iter52 : struct.optionsMap.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            oprot.writeString(_iter52.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topicSet != null) {
        oprot.writeFieldBegin(TOPIC_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.topicSet.size()));
          for (long _iter53 : struct.topicSet)
          {
            oprot.writeI64(_iter53);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRODUCER_ID_FIELD_DESC);
      oprot.writeI64(struct.producerId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductDetailsTupleSchemeFactory implements SchemeFactory {
    public ProductDetailsTupleScheme getScheme() {
      return new ProductDetailsTupleScheme();
    }
  }

  private static class ProductDetailsTupleScheme extends TupleScheme<ProductDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCategories()) {
        optionals.set(0);
      }
      if (struct.isSetFullDescr()) {
        optionals.set(1);
      }
      if (struct.isSetImagesURLset()) {
        optionals.set(2);
      }
      if (struct.isSetPricesMap()) {
        optionals.set(3);
      }
      if (struct.isSetOptionsMap()) {
        optionals.set(4);
      }
      if (struct.isSetTopicSet()) {
        optionals.set(5);
      }
      if (struct.isSetProducerId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCategories()) {
        {
          oprot.writeI32(struct.categories.size());
          for (long _iter54 : struct.categories)
          {
            oprot.writeI64(_iter54);
          }
        }
      }
      if (struct.isSetFullDescr()) {
        oprot.writeString(struct.fullDescr);
      }
      if (struct.isSetImagesURLset()) {
        {
          oprot.writeI32(struct.imagesURLset.size());
          for (ByteBuffer _iter55 : struct.imagesURLset)
          {
            oprot.writeBinary(_iter55);
          }
        }
      }
      if (struct.isSetPricesMap()) {
        {
          oprot.writeI32(struct.pricesMap.size());
          for (Map.Entry<PriceType, Double> _iter56 : struct.pricesMap.entrySet())
          {
            oprot.writeI32(_iter56.getKey().getValue());
            oprot.writeDouble(_iter56.getValue());
          }
        }
      }
      if (struct.isSetOptionsMap()) {
        {
          oprot.writeI32(struct.optionsMap.size());
          for (Map.Entry<String, String> _iter57 : struct.optionsMap.entrySet())
          {
            oprot.writeString(_iter57.getKey());
            oprot.writeString(_iter57.getValue());
          }
        }
      }
      if (struct.isSetTopicSet()) {
        {
          oprot.writeI32(struct.topicSet.size());
          for (long _iter58 : struct.topicSet)
          {
            oprot.writeI64(_iter58);
          }
        }
      }
      if (struct.isSetProducerId()) {
        oprot.writeI64(struct.producerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set59 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.categories = new HashSet<Long>(2*_set59.size);
          for (int _i60 = 0; _i60 < _set59.size; ++_i60)
          {
            long _elem61;
            _elem61 = iprot.readI64();
            struct.categories.add(_elem61);
          }
        }
        struct.setCategoriesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fullDescr = iprot.readString();
        struct.setFullDescrIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set62 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.imagesURLset = new HashSet<ByteBuffer>(2*_set62.size);
          for (int _i63 = 0; _i63 < _set62.size; ++_i63)
          {
            ByteBuffer _elem64;
            _elem64 = iprot.readBinary();
            struct.imagesURLset.add(_elem64);
          }
        }
        struct.setImagesURLsetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map65 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.pricesMap = new HashMap<PriceType,Double>(2*_map65.size);
          for (int _i66 = 0; _i66 < _map65.size; ++_i66)
          {
            PriceType _key67;
            double _val68;
            _key67 = PriceType.findByValue(iprot.readI32());
            _val68 = iprot.readDouble();
            struct.pricesMap.put(_key67, _val68);
          }
        }
        struct.setPricesMapIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map69 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.optionsMap = new HashMap<String,String>(2*_map69.size);
          for (int _i70 = 0; _i70 < _map69.size; ++_i70)
          {
            String _key71;
            String _val72;
            _key71 = iprot.readString();
            _val72 = iprot.readString();
            struct.optionsMap.put(_key71, _val72);
          }
        }
        struct.setOptionsMapIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set73 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.topicSet = new HashSet<Long>(2*_set73.size);
          for (int _i74 = 0; _i74 < _set73.size; ++_i74)
          {
            long _elem75;
            _elem75 = iprot.readI64();
            struct.topicSet.add(_elem75);
          }
        }
        struct.setTopicSetIsSet(true);
      }
      if (incoming.get(6)) {
        struct.producerId = iprot.readI64();
        struct.setProducerIdIsSet(true);
      }
    }
  }

}

