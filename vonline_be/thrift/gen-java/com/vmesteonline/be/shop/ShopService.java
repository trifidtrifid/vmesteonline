/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.shop;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ShopService {

  public interface Iface {

    public long registerShop(Shop shop) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long registerProductCategory(ProductCategory productCategory, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long registerProducer(Producer producer, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method uploads products to the shop that by parameter shopId. All value of image URLS may contain a JPEG image data or HTTP url
     * to pull the image from.
     * 
     * 
     * @param products
     * @param shopId
     * @param cleanShopBeforeUpload
     */
    public Set<Long> uploadProducts(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method uploads categories. List in the request should contain relative values of  and return list with updated values of id, parentId
     * and URLS replaced to local. Any of URL parameter may contain JPEG image data.
     * 
     * 
     * @param categories
     * @param relativeIds
     * @param cleanShopBeforeUpload
     */
    public Set<ProductCategory> uploadProductCategoies(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method returns full orders information. userId and shopId may be used as a filter by defining not 0 value
     * 
     * 
     * @param dateFrom
     * @param dateTo
     * @param userId
     * @param shopId
     */
    public List<Order> getFullOrders(int dateFrom, int dateTo, long userId, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public void updateOrderStatusesById(Map<Long,OrderStatus> orderStatusMap) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public void setDates(Map<Integer,DateType> dateDateTypeMap) throws org.apache.thrift.TException;

    public void setDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public void setPaymentTypesCosts(Map<PaymentType,Double> newPaymentTypeCosts) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public void setOrderPaymentStatus(long orderId, PaymentStatus newStatus) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method updates prices for Products. Map contains productId and map of new prices values for types.
     * 
     * 
     * @param newPricesMap
     */
    public void setProductPrices(Map<Long,Map<PriceType,Double>> newPricesMap) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<Shop> getShops() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public Map<Integer,DateType> getDates(int from, int to) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method returns Shop information and set currentShopId to value of provided shopId parameter that would be used in all of methods followed below
     * *
     * 
     * @param shopId
     */
    public Shop getShop(long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<Producer> getProducers() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<ProductCategory> getProductCategories(long currentProductCategoryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * THe method returns full list of products that are included to current category and all subcategories,
     * if categoryID is set then the current category would be set.
     * 
     * 
     * @param offset
     * @param length
     * @param categoryId
     */
    public ProductListPart getProducts(int offset, int length, long categoryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public ProductDetails getProductDetails(long productId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Order operations use shopId that must be set by AuthService.setCurrentAttribute or by calling method getShop
     * *
     * 
     * @param dateFrom
     * @param dateTo
     */
    public List<Order> getOrders(int dateFrom, int dateTo) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method sets orderId as a current order id for the session
     * *
     * 
     * @param orderId
     */
    public OrderDetails getOrderDetails(long orderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method returns id of new order and set is as a current
     * 
     * 
     * @param date
     */
    public long createOrder(int date) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long cancelOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public long confirmOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method adds all orderLines from order with id set in parameter to current order
     * 
     * 
     * @param oldOrderId
     */
    public long appendOrder(long oldOrderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method adds to current order Order lines for products that are not included to current order
     * 
     * 
     * @param oldOrderId
     */
    public long mergeOrder(long oldOrderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Methods adds line to the current order that set by createOrder method of by AuthService.setCurrentAttribute method
     * it returns orderline that is with price set
     * 
     * 
     * 
     * @param productId
     * @param quontity
     * @param priceType
     */
    public OrderLine addOrderLine(long productId, double quontity, PriceType priceType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public boolean removeOrderLine(long productId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    /**
     * Method returns Order details that contains new value of postal address and delivery cost of order delivery
     * 
     * 
     * @param deliveryType
     */
    public OrderDetails setOrderDeliveryType(DeliveryType deliveryType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public boolean setOrderPaymentType(PaymentType paymentType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public OrderDetails setOrderDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerShop(Shop shop, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerProductCategory(ProductCategory productCategory, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerProducer(Producer producer, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadProducts(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadProductCategoies(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFullOrders(int dateFrom, int dateTo, long userId, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOrderStatusesById(Map<Long,OrderStatus> orderStatusMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setDates(Map<Integer,DateType> dateDateTypeMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPaymentTypesCosts(Map<PaymentType,Double> newPaymentTypeCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOrderPaymentStatus(long orderId, PaymentStatus newStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setProductPrices(Map<Long,Map<PriceType,Double>> newPricesMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getShops(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getDates(int from, int to, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getShop(long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProducers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductCategories(long currentProductCategoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProducts(int offset, int length, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProductDetails(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrders(int dateFrom, int dateTo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOrderDetails(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void createOrder(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void appendOrder(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void mergeOrder(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOrderLine(long productId, double quontity, PriceType priceType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removeOrderLine(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOrderDeliveryType(DeliveryType deliveryType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOrderPaymentType(PaymentType paymentType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setOrderDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long registerShop(Shop shop) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_registerShop(shop);
      return recv_registerShop();
    }

    public void send_registerShop(Shop shop) throws org.apache.thrift.TException
    {
      registerShop_args args = new registerShop_args();
      args.setShop(shop);
      sendBase("registerShop", args);
    }

    public long recv_registerShop() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      registerShop_result result = new registerShop_result();
      receiveBase(result, "registerShop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerShop failed: unknown result");
    }

    public long registerProductCategory(ProductCategory productCategory, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_registerProductCategory(productCategory, shopId);
      return recv_registerProductCategory();
    }

    public void send_registerProductCategory(ProductCategory productCategory, long shopId) throws org.apache.thrift.TException
    {
      registerProductCategory_args args = new registerProductCategory_args();
      args.setProductCategory(productCategory);
      args.setShopId(shopId);
      sendBase("registerProductCategory", args);
    }

    public long recv_registerProductCategory() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      registerProductCategory_result result = new registerProductCategory_result();
      receiveBase(result, "registerProductCategory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerProductCategory failed: unknown result");
    }

    public long registerProducer(Producer producer, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_registerProducer(producer, shopId);
      return recv_registerProducer();
    }

    public void send_registerProducer(Producer producer, long shopId) throws org.apache.thrift.TException
    {
      registerProducer_args args = new registerProducer_args();
      args.setProducer(producer);
      args.setShopId(shopId);
      sendBase("registerProducer", args);
    }

    public long recv_registerProducer() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      registerProducer_result result = new registerProducer_result();
      receiveBase(result, "registerProducer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerProducer failed: unknown result");
    }

    public Set<Long> uploadProducts(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_uploadProducts(products, shopId, cleanShopBeforeUpload);
      return recv_uploadProducts();
    }

    public void send_uploadProducts(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload) throws org.apache.thrift.TException
    {
      uploadProducts_args args = new uploadProducts_args();
      args.setProducts(products);
      args.setShopId(shopId);
      args.setCleanShopBeforeUpload(cleanShopBeforeUpload);
      sendBase("uploadProducts", args);
    }

    public Set<Long> recv_uploadProducts() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      uploadProducts_result result = new uploadProducts_result();
      receiveBase(result, "uploadProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadProducts failed: unknown result");
    }

    public Set<ProductCategory> uploadProductCategoies(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_uploadProductCategoies(categories, relativeIds, cleanShopBeforeUpload);
      return recv_uploadProductCategoies();
    }

    public void send_uploadProductCategoies(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload) throws org.apache.thrift.TException
    {
      uploadProductCategoies_args args = new uploadProductCategoies_args();
      args.setCategories(categories);
      args.setRelativeIds(relativeIds);
      args.setCleanShopBeforeUpload(cleanShopBeforeUpload);
      sendBase("uploadProductCategoies", args);
    }

    public Set<ProductCategory> recv_uploadProductCategoies() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      uploadProductCategoies_result result = new uploadProductCategoies_result();
      receiveBase(result, "uploadProductCategoies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadProductCategoies failed: unknown result");
    }

    public List<Order> getFullOrders(int dateFrom, int dateTo, long userId, long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getFullOrders(dateFrom, dateTo, userId, shopId);
      return recv_getFullOrders();
    }

    public void send_getFullOrders(int dateFrom, int dateTo, long userId, long shopId) throws org.apache.thrift.TException
    {
      getFullOrders_args args = new getFullOrders_args();
      args.setDateFrom(dateFrom);
      args.setDateTo(dateTo);
      args.setUserId(userId);
      args.setShopId(shopId);
      sendBase("getFullOrders", args);
    }

    public List<Order> recv_getFullOrders() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getFullOrders_result result = new getFullOrders_result();
      receiveBase(result, "getFullOrders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFullOrders failed: unknown result");
    }

    public void updateOrderStatusesById(Map<Long,OrderStatus> orderStatusMap) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_updateOrderStatusesById(orderStatusMap);
      recv_updateOrderStatusesById();
    }

    public void send_updateOrderStatusesById(Map<Long,OrderStatus> orderStatusMap) throws org.apache.thrift.TException
    {
      updateOrderStatusesById_args args = new updateOrderStatusesById_args();
      args.setOrderStatusMap(orderStatusMap);
      sendBase("updateOrderStatusesById", args);
    }

    public void recv_updateOrderStatusesById() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      updateOrderStatusesById_result result = new updateOrderStatusesById_result();
      receiveBase(result, "updateOrderStatusesById");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void setDates(Map<Integer,DateType> dateDateTypeMap) throws org.apache.thrift.TException
    {
      send_setDates(dateDateTypeMap);
      recv_setDates();
    }

    public void send_setDates(Map<Integer,DateType> dateDateTypeMap) throws org.apache.thrift.TException
    {
      setDates_args args = new setDates_args();
      args.setDateDateTypeMap(dateDateTypeMap);
      sendBase("setDates", args);
    }

    public void recv_setDates() throws org.apache.thrift.TException
    {
      setDates_result result = new setDates_result();
      receiveBase(result, "setDates");
      return;
    }

    public void setDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setDeliveryCosts(newDeliveryCosts);
      recv_setDeliveryCosts();
    }

    public void send_setDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts) throws org.apache.thrift.TException
    {
      setDeliveryCosts_args args = new setDeliveryCosts_args();
      args.setNewDeliveryCosts(newDeliveryCosts);
      sendBase("setDeliveryCosts", args);
    }

    public void recv_setDeliveryCosts() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setDeliveryCosts_result result = new setDeliveryCosts_result();
      receiveBase(result, "setDeliveryCosts");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void setPaymentTypesCosts(Map<PaymentType,Double> newPaymentTypeCosts) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setPaymentTypesCosts(newPaymentTypeCosts);
      recv_setPaymentTypesCosts();
    }

    public void send_setPaymentTypesCosts(Map<PaymentType,Double> newPaymentTypeCosts) throws org.apache.thrift.TException
    {
      setPaymentTypesCosts_args args = new setPaymentTypesCosts_args();
      args.setNewPaymentTypeCosts(newPaymentTypeCosts);
      sendBase("setPaymentTypesCosts", args);
    }

    public void recv_setPaymentTypesCosts() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setPaymentTypesCosts_result result = new setPaymentTypesCosts_result();
      receiveBase(result, "setPaymentTypesCosts");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void setOrderPaymentStatus(long orderId, PaymentStatus newStatus) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setOrderPaymentStatus(orderId, newStatus);
      recv_setOrderPaymentStatus();
    }

    public void send_setOrderPaymentStatus(long orderId, PaymentStatus newStatus) throws org.apache.thrift.TException
    {
      setOrderPaymentStatus_args args = new setOrderPaymentStatus_args();
      args.setOrderId(orderId);
      args.setNewStatus(newStatus);
      sendBase("setOrderPaymentStatus", args);
    }

    public void recv_setOrderPaymentStatus() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setOrderPaymentStatus_result result = new setOrderPaymentStatus_result();
      receiveBase(result, "setOrderPaymentStatus");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void setProductPrices(Map<Long,Map<PriceType,Double>> newPricesMap) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setProductPrices(newPricesMap);
      recv_setProductPrices();
    }

    public void send_setProductPrices(Map<Long,Map<PriceType,Double>> newPricesMap) throws org.apache.thrift.TException
    {
      setProductPrices_args args = new setProductPrices_args();
      args.setNewPricesMap(newPricesMap);
      sendBase("setProductPrices", args);
    }

    public void recv_setProductPrices() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setProductPrices_result result = new setProductPrices_result();
      receiveBase(result, "setProductPrices");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public List<Shop> getShops() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getShops();
      return recv_getShops();
    }

    public void send_getShops() throws org.apache.thrift.TException
    {
      getShops_args args = new getShops_args();
      sendBase("getShops", args);
    }

    public List<Shop> recv_getShops() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getShops_result result = new getShops_result();
      receiveBase(result, "getShops");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShops failed: unknown result");
    }

    public Map<Integer,DateType> getDates(int from, int to) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getDates(from, to);
      return recv_getDates();
    }

    public void send_getDates(int from, int to) throws org.apache.thrift.TException
    {
      getDates_args args = new getDates_args();
      args.setFrom(from);
      args.setTo(to);
      sendBase("getDates", args);
    }

    public Map<Integer,DateType> recv_getDates() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getDates_result result = new getDates_result();
      receiveBase(result, "getDates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDates failed: unknown result");
    }

    public Shop getShop(long shopId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getShop(shopId);
      return recv_getShop();
    }

    public void send_getShop(long shopId) throws org.apache.thrift.TException
    {
      getShop_args args = new getShop_args();
      args.setShopId(shopId);
      sendBase("getShop", args);
    }

    public Shop recv_getShop() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getShop_result result = new getShop_result();
      receiveBase(result, "getShop");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getShop failed: unknown result");
    }

    public List<Producer> getProducers() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getProducers();
      return recv_getProducers();
    }

    public void send_getProducers() throws org.apache.thrift.TException
    {
      getProducers_args args = new getProducers_args();
      sendBase("getProducers", args);
    }

    public List<Producer> recv_getProducers() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getProducers_result result = new getProducers_result();
      receiveBase(result, "getProducers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProducers failed: unknown result");
    }

    public List<ProductCategory> getProductCategories(long currentProductCategoryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getProductCategories(currentProductCategoryId);
      return recv_getProductCategories();
    }

    public void send_getProductCategories(long currentProductCategoryId) throws org.apache.thrift.TException
    {
      getProductCategories_args args = new getProductCategories_args();
      args.setCurrentProductCategoryId(currentProductCategoryId);
      sendBase("getProductCategories", args);
    }

    public List<ProductCategory> recv_getProductCategories() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getProductCategories_result result = new getProductCategories_result();
      receiveBase(result, "getProductCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductCategories failed: unknown result");
    }

    public ProductListPart getProducts(int offset, int length, long categoryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getProducts(offset, length, categoryId);
      return recv_getProducts();
    }

    public void send_getProducts(int offset, int length, long categoryId) throws org.apache.thrift.TException
    {
      getProducts_args args = new getProducts_args();
      args.setOffset(offset);
      args.setLength(length);
      args.setCategoryId(categoryId);
      sendBase("getProducts", args);
    }

    public ProductListPart recv_getProducts() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getProducts_result result = new getProducts_result();
      receiveBase(result, "getProducts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProducts failed: unknown result");
    }

    public ProductDetails getProductDetails(long productId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getProductDetails(productId);
      return recv_getProductDetails();
    }

    public void send_getProductDetails(long productId) throws org.apache.thrift.TException
    {
      getProductDetails_args args = new getProductDetails_args();
      args.setProductId(productId);
      sendBase("getProductDetails", args);
    }

    public ProductDetails recv_getProductDetails() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getProductDetails_result result = new getProductDetails_result();
      receiveBase(result, "getProductDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProductDetails failed: unknown result");
    }

    public List<Order> getOrders(int dateFrom, int dateTo) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getOrders(dateFrom, dateTo);
      return recv_getOrders();
    }

    public void send_getOrders(int dateFrom, int dateTo) throws org.apache.thrift.TException
    {
      getOrders_args args = new getOrders_args();
      args.setDateFrom(dateFrom);
      args.setDateTo(dateTo);
      sendBase("getOrders", args);
    }

    public List<Order> recv_getOrders() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getOrders_result result = new getOrders_result();
      receiveBase(result, "getOrders");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrders failed: unknown result");
    }

    public OrderDetails getOrderDetails(long orderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getOrderDetails(orderId);
      return recv_getOrderDetails();
    }

    public void send_getOrderDetails(long orderId) throws org.apache.thrift.TException
    {
      getOrderDetails_args args = new getOrderDetails_args();
      args.setOrderId(orderId);
      sendBase("getOrderDetails", args);
    }

    public OrderDetails recv_getOrderDetails() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getOrderDetails_result result = new getOrderDetails_result();
      receiveBase(result, "getOrderDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrderDetails failed: unknown result");
    }

    public long createOrder(int date) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_createOrder(date);
      return recv_createOrder();
    }

    public void send_createOrder(int date) throws org.apache.thrift.TException
    {
      createOrder_args args = new createOrder_args();
      args.setDate(date);
      sendBase("createOrder", args);
    }

    public long recv_createOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      createOrder_result result = new createOrder_result();
      receiveBase(result, "createOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrder failed: unknown result");
    }

    public long cancelOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_cancelOrder();
      return recv_cancelOrder();
    }

    public void send_cancelOrder() throws org.apache.thrift.TException
    {
      cancelOrder_args args = new cancelOrder_args();
      sendBase("cancelOrder", args);
    }

    public long recv_cancelOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      cancelOrder_result result = new cancelOrder_result();
      receiveBase(result, "cancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelOrder failed: unknown result");
    }

    public long confirmOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_confirmOrder();
      return recv_confirmOrder();
    }

    public void send_confirmOrder() throws org.apache.thrift.TException
    {
      confirmOrder_args args = new confirmOrder_args();
      sendBase("confirmOrder", args);
    }

    public long recv_confirmOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      confirmOrder_result result = new confirmOrder_result();
      receiveBase(result, "confirmOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmOrder failed: unknown result");
    }

    public long appendOrder(long oldOrderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_appendOrder(oldOrderId);
      return recv_appendOrder();
    }

    public void send_appendOrder(long oldOrderId) throws org.apache.thrift.TException
    {
      appendOrder_args args = new appendOrder_args();
      args.setOldOrderId(oldOrderId);
      sendBase("appendOrder", args);
    }

    public long recv_appendOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      appendOrder_result result = new appendOrder_result();
      receiveBase(result, "appendOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "appendOrder failed: unknown result");
    }

    public long mergeOrder(long oldOrderId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_mergeOrder(oldOrderId);
      return recv_mergeOrder();
    }

    public void send_mergeOrder(long oldOrderId) throws org.apache.thrift.TException
    {
      mergeOrder_args args = new mergeOrder_args();
      args.setOldOrderId(oldOrderId);
      sendBase("mergeOrder", args);
    }

    public long recv_mergeOrder() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      mergeOrder_result result = new mergeOrder_result();
      receiveBase(result, "mergeOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeOrder failed: unknown result");
    }

    public OrderLine addOrderLine(long productId, double quontity, PriceType priceType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_addOrderLine(productId, quontity, priceType);
      return recv_addOrderLine();
    }

    public void send_addOrderLine(long productId, double quontity, PriceType priceType) throws org.apache.thrift.TException
    {
      addOrderLine_args args = new addOrderLine_args();
      args.setProductId(productId);
      args.setQuontity(quontity);
      args.setPriceType(priceType);
      sendBase("addOrderLine", args);
    }

    public OrderLine recv_addOrderLine() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      addOrderLine_result result = new addOrderLine_result();
      receiveBase(result, "addOrderLine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOrderLine failed: unknown result");
    }

    public boolean removeOrderLine(long productId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_removeOrderLine(productId);
      return recv_removeOrderLine();
    }

    public void send_removeOrderLine(long productId) throws org.apache.thrift.TException
    {
      removeOrderLine_args args = new removeOrderLine_args();
      args.setProductId(productId);
      sendBase("removeOrderLine", args);
    }

    public boolean recv_removeOrderLine() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      removeOrderLine_result result = new removeOrderLine_result();
      receiveBase(result, "removeOrderLine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeOrderLine failed: unknown result");
    }

    public OrderDetails setOrderDeliveryType(DeliveryType deliveryType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setOrderDeliveryType(deliveryType);
      return recv_setOrderDeliveryType();
    }

    public void send_setOrderDeliveryType(DeliveryType deliveryType) throws org.apache.thrift.TException
    {
      setOrderDeliveryType_args args = new setOrderDeliveryType_args();
      args.setDeliveryType(deliveryType);
      sendBase("setOrderDeliveryType", args);
    }

    public OrderDetails recv_setOrderDeliveryType() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setOrderDeliveryType_result result = new setOrderDeliveryType_result();
      receiveBase(result, "setOrderDeliveryType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setOrderDeliveryType failed: unknown result");
    }

    public boolean setOrderPaymentType(PaymentType paymentType) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setOrderPaymentType(paymentType);
      return recv_setOrderPaymentType();
    }

    public void send_setOrderPaymentType(PaymentType paymentType) throws org.apache.thrift.TException
    {
      setOrderPaymentType_args args = new setOrderPaymentType_args();
      args.setPaymentType(paymentType);
      sendBase("setOrderPaymentType", args);
    }

    public boolean recv_setOrderPaymentType() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setOrderPaymentType_result result = new setOrderPaymentType_result();
      receiveBase(result, "setOrderPaymentType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setOrderPaymentType failed: unknown result");
    }

    public OrderDetails setOrderDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_setOrderDeliveryAddress(deliveryAddress);
      return recv_setOrderDeliveryAddress();
    }

    public void send_setOrderDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress) throws org.apache.thrift.TException
    {
      setOrderDeliveryAddress_args args = new setOrderDeliveryAddress_args();
      args.setDeliveryAddress(deliveryAddress);
      sendBase("setOrderDeliveryAddress", args);
    }

    public OrderDetails recv_setOrderDeliveryAddress() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      setOrderDeliveryAddress_result result = new setOrderDeliveryAddress_result();
      receiveBase(result, "setOrderDeliveryAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setOrderDeliveryAddress failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerShop(Shop shop, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerShop_call method_call = new registerShop_call(shop, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerShop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Shop shop;
      public registerShop_call(Shop shop, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shop = shop;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerShop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerShop_args args = new registerShop_args();
        args.setShop(shop);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerShop();
      }
    }

    public void registerProductCategory(ProductCategory productCategory, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerProductCategory_call method_call = new registerProductCategory_call(productCategory, shopId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerProductCategory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ProductCategory productCategory;
      private long shopId;
      public registerProductCategory_call(ProductCategory productCategory, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productCategory = productCategory;
        this.shopId = shopId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerProductCategory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerProductCategory_args args = new registerProductCategory_args();
        args.setProductCategory(productCategory);
        args.setShopId(shopId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerProductCategory();
      }
    }

    public void registerProducer(Producer producer, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerProducer_call method_call = new registerProducer_call(producer, shopId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerProducer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Producer producer;
      private long shopId;
      public registerProducer_call(Producer producer, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.producer = producer;
        this.shopId = shopId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerProducer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerProducer_args args = new registerProducer_args();
        args.setProducer(producer);
        args.setShopId(shopId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerProducer();
      }
    }

    public void uploadProducts(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadProducts_call method_call = new uploadProducts_call(products, shopId, cleanShopBeforeUpload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<FullProductInfo> products;
      private long shopId;
      private boolean cleanShopBeforeUpload;
      public uploadProducts_call(List<FullProductInfo> products, long shopId, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.products = products;
        this.shopId = shopId;
        this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadProducts_args args = new uploadProducts_args();
        args.setProducts(products);
        args.setShopId(shopId);
        args.setCleanShopBeforeUpload(cleanShopBeforeUpload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<Long> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadProducts();
      }
    }

    public void uploadProductCategoies(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadProductCategoies_call method_call = new uploadProductCategoies_call(categories, relativeIds, cleanShopBeforeUpload, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadProductCategoies_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Set<ProductCategory> categories;
      private boolean relativeIds;
      private boolean cleanShopBeforeUpload;
      public uploadProductCategoies_call(Set<ProductCategory> categories, boolean relativeIds, boolean cleanShopBeforeUpload, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categories = categories;
        this.relativeIds = relativeIds;
        this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadProductCategoies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadProductCategoies_args args = new uploadProductCategoies_args();
        args.setCategories(categories);
        args.setRelativeIds(relativeIds);
        args.setCleanShopBeforeUpload(cleanShopBeforeUpload);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Set<ProductCategory> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadProductCategoies();
      }
    }

    public void getFullOrders(int dateFrom, int dateTo, long userId, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFullOrders_call method_call = new getFullOrders_call(dateFrom, dateTo, userId, shopId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFullOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dateFrom;
      private int dateTo;
      private long userId;
      private long shopId;
      public getFullOrders_call(int dateFrom, int dateTo, long userId, long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
        this.userId = userId;
        this.shopId = shopId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFullOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFullOrders_args args = new getFullOrders_args();
        args.setDateFrom(dateFrom);
        args.setDateTo(dateTo);
        args.setUserId(userId);
        args.setShopId(shopId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Order> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFullOrders();
      }
    }

    public void updateOrderStatusesById(Map<Long,OrderStatus> orderStatusMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOrderStatusesById_call method_call = new updateOrderStatusesById_call(orderStatusMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOrderStatusesById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Long,OrderStatus> orderStatusMap;
      public updateOrderStatusesById_call(Map<Long,OrderStatus> orderStatusMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderStatusMap = orderStatusMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOrderStatusesById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOrderStatusesById_args args = new updateOrderStatusesById_args();
        args.setOrderStatusMap(orderStatusMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateOrderStatusesById();
      }
    }

    public void setDates(Map<Integer,DateType> dateDateTypeMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDates_call method_call = new setDates_call(dateDateTypeMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Integer,DateType> dateDateTypeMap;
      public setDates_call(Map<Integer,DateType> dateDateTypeMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dateDateTypeMap = dateDateTypeMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDates_args args = new setDates_args();
        args.setDateDateTypeMap(dateDateTypeMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setDates();
      }
    }

    public void setDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDeliveryCosts_call method_call = new setDeliveryCosts_call(newDeliveryCosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDeliveryCosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<DeliveryType,Double> newDeliveryCosts;
      public setDeliveryCosts_call(Map<DeliveryType,Double> newDeliveryCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newDeliveryCosts = newDeliveryCosts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDeliveryCosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDeliveryCosts_args args = new setDeliveryCosts_args();
        args.setNewDeliveryCosts(newDeliveryCosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setDeliveryCosts();
      }
    }

    public void setPaymentTypesCosts(Map<PaymentType,Double> newPaymentTypeCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPaymentTypesCosts_call method_call = new setPaymentTypesCosts_call(newPaymentTypeCosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPaymentTypesCosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<PaymentType,Double> newPaymentTypeCosts;
      public setPaymentTypesCosts_call(Map<PaymentType,Double> newPaymentTypeCosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newPaymentTypeCosts = newPaymentTypeCosts;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPaymentTypesCosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPaymentTypesCosts_args args = new setPaymentTypesCosts_args();
        args.setNewPaymentTypeCosts(newPaymentTypeCosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setPaymentTypesCosts();
      }
    }

    public void setOrderPaymentStatus(long orderId, PaymentStatus newStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOrderPaymentStatus_call method_call = new setOrderPaymentStatus_call(orderId, newStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOrderPaymentStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      private PaymentStatus newStatus;
      public setOrderPaymentStatus_call(long orderId, PaymentStatus newStatus, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.newStatus = newStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOrderPaymentStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOrderPaymentStatus_args args = new setOrderPaymentStatus_args();
        args.setOrderId(orderId);
        args.setNewStatus(newStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setOrderPaymentStatus();
      }
    }

    public void setProductPrices(Map<Long,Map<PriceType,Double>> newPricesMap, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setProductPrices_call method_call = new setProductPrices_call(newPricesMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setProductPrices_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<Long,Map<PriceType,Double>> newPricesMap;
      public setProductPrices_call(Map<Long,Map<PriceType,Double>> newPricesMap, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newPricesMap = newPricesMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setProductPrices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setProductPrices_args args = new setProductPrices_args();
        args.setNewPricesMap(newPricesMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setProductPrices();
      }
    }

    public void getShops(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShops_call method_call = new getShops_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShops_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getShops_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShops", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShops_args args = new getShops_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Shop> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShops();
      }
    }

    public void getDates(int from, int to, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDates_call method_call = new getDates_call(from, to, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int from;
      private int to;
      public getDates_call(int from, int to, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.from = from;
        this.to = to;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDates_args args = new getDates_args();
        args.setFrom(from);
        args.setTo(to);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,DateType> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDates();
      }
    }

    public void getShop(long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getShop_call method_call = new getShop_call(shopId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getShop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long shopId;
      public getShop_call(long shopId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.shopId = shopId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getShop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getShop_args args = new getShop_args();
        args.setShopId(shopId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Shop getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getShop();
      }
    }

    public void getProducers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProducers_call method_call = new getProducers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProducers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getProducers_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProducers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProducers_args args = new getProducers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Producer> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProducers();
      }
    }

    public void getProductCategories(long currentProductCategoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductCategories_call method_call = new getProductCategories_call(currentProductCategoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductCategories_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long currentProductCategoryId;
      public getProductCategories_call(long currentProductCategoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.currentProductCategoryId = currentProductCategoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductCategories_args args = new getProductCategories_args();
        args.setCurrentProductCategoryId(currentProductCategoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProductCategory> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductCategories();
      }
    }

    public void getProducts(int offset, int length, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProducts_call method_call = new getProducts_call(offset, length, categoryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProducts_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int offset;
      private int length;
      private long categoryId;
      public getProducts_call(int offset, int length, long categoryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.offset = offset;
        this.length = length;
        this.categoryId = categoryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProducts_args args = new getProducts_args();
        args.setOffset(offset);
        args.setLength(length);
        args.setCategoryId(categoryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductListPart getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProducts();
      }
    }

    public void getProductDetails(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProductDetails_call method_call = new getProductDetails_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProductDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      public getProductDetails_call(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProductDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProductDetails_args args = new getProductDetails_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ProductDetails getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProductDetails();
      }
    }

    public void getOrders(int dateFrom, int dateTo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrders_call method_call = new getOrders_call(dateFrom, dateTo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrders_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int dateFrom;
      private int dateTo;
      public getOrders_call(int dateFrom, int dateTo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dateFrom = dateFrom;
        this.dateTo = dateTo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrders", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrders_args args = new getOrders_args();
        args.setDateFrom(dateFrom);
        args.setDateTo(dateTo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Order> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrders();
      }
    }

    public void getOrderDetails(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrderDetails_call method_call = new getOrderDetails_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrderDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long orderId;
      public getOrderDetails_call(long orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrderDetails_args args = new getOrderDetails_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderDetails getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrderDetails();
      }
    }

    public void createOrder(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrder_call method_call = new createOrder_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      public createOrder_call(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrder_args args = new createOrder_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrder();
      }
    }

    public void cancelOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelOrder_call method_call = new cancelOrder_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      public cancelOrder_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelOrder_args args = new cancelOrder_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelOrder();
      }
    }

    public void confirmOrder(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmOrder_call method_call = new confirmOrder_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      public confirmOrder_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmOrder_args args = new confirmOrder_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmOrder();
      }
    }

    public void appendOrder(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      appendOrder_call method_call = new appendOrder_call(oldOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class appendOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long oldOrderId;
      public appendOrder_call(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldOrderId = oldOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("appendOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        appendOrder_args args = new appendOrder_args();
        args.setOldOrderId(oldOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_appendOrder();
      }
    }

    public void mergeOrder(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeOrder_call method_call = new mergeOrder_call(oldOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long oldOrderId;
      public mergeOrder_call(long oldOrderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.oldOrderId = oldOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeOrder_args args = new mergeOrder_args();
        args.setOldOrderId(oldOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeOrder();
      }
    }

    public void addOrderLine(long productId, double quontity, PriceType priceType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOrderLine_call method_call = new addOrderLine_call(productId, quontity, priceType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOrderLine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      private double quontity;
      private PriceType priceType;
      public addOrderLine_call(long productId, double quontity, PriceType priceType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
        this.quontity = quontity;
        this.priceType = priceType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOrderLine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOrderLine_args args = new addOrderLine_args();
        args.setProductId(productId);
        args.setQuontity(quontity);
        args.setPriceType(priceType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderLine getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOrderLine();
      }
    }

    public void removeOrderLine(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeOrderLine_call method_call = new removeOrderLine_call(productId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeOrderLine_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long productId;
      public removeOrderLine_call(long productId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.productId = productId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeOrderLine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeOrderLine_args args = new removeOrderLine_args();
        args.setProductId(productId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeOrderLine();
      }
    }

    public void setOrderDeliveryType(DeliveryType deliveryType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOrderDeliveryType_call method_call = new setOrderDeliveryType_call(deliveryType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOrderDeliveryType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeliveryType deliveryType;
      public setOrderDeliveryType_call(DeliveryType deliveryType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deliveryType = deliveryType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOrderDeliveryType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOrderDeliveryType_args args = new setOrderDeliveryType_args();
        args.setDeliveryType(deliveryType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderDetails getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setOrderDeliveryType();
      }
    }

    public void setOrderPaymentType(PaymentType paymentType, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOrderPaymentType_call method_call = new setOrderPaymentType_call(paymentType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOrderPaymentType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PaymentType paymentType;
      public setOrderPaymentType_call(PaymentType paymentType, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.paymentType = paymentType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOrderPaymentType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOrderPaymentType_args args = new setOrderPaymentType_args();
        args.setPaymentType(paymentType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setOrderPaymentType();
      }
    }

    public void setOrderDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setOrderDeliveryAddress_call method_call = new setOrderDeliveryAddress_call(deliveryAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setOrderDeliveryAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.vmesteonline.be.PostalAddress deliveryAddress;
      public setOrderDeliveryAddress_call(com.vmesteonline.be.PostalAddress deliveryAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deliveryAddress = deliveryAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOrderDeliveryAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setOrderDeliveryAddress_args args = new setOrderDeliveryAddress_args();
        args.setDeliveryAddress(deliveryAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderDetails getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setOrderDeliveryAddress();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerShop", new registerShop());
      processMap.put("registerProductCategory", new registerProductCategory());
      processMap.put("registerProducer", new registerProducer());
      processMap.put("uploadProducts", new uploadProducts());
      processMap.put("uploadProductCategoies", new uploadProductCategoies());
      processMap.put("getFullOrders", new getFullOrders());
      processMap.put("updateOrderStatusesById", new updateOrderStatusesById());
      processMap.put("setDates", new setDates());
      processMap.put("setDeliveryCosts", new setDeliveryCosts());
      processMap.put("setPaymentTypesCosts", new setPaymentTypesCosts());
      processMap.put("setOrderPaymentStatus", new setOrderPaymentStatus());
      processMap.put("setProductPrices", new setProductPrices());
      processMap.put("getShops", new getShops());
      processMap.put("getDates", new getDates());
      processMap.put("getShop", new getShop());
      processMap.put("getProducers", new getProducers());
      processMap.put("getProductCategories", new getProductCategories());
      processMap.put("getProducts", new getProducts());
      processMap.put("getProductDetails", new getProductDetails());
      processMap.put("getOrders", new getOrders());
      processMap.put("getOrderDetails", new getOrderDetails());
      processMap.put("createOrder", new createOrder());
      processMap.put("cancelOrder", new cancelOrder());
      processMap.put("confirmOrder", new confirmOrder());
      processMap.put("appendOrder", new appendOrder());
      processMap.put("mergeOrder", new mergeOrder());
      processMap.put("addOrderLine", new addOrderLine());
      processMap.put("removeOrderLine", new removeOrderLine());
      processMap.put("setOrderDeliveryType", new setOrderDeliveryType());
      processMap.put("setOrderPaymentType", new setOrderPaymentType());
      processMap.put("setOrderDeliveryAddress", new setOrderDeliveryAddress());
      return processMap;
    }

    public static class registerShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerShop_args> {
      public registerShop() {
        super("registerShop");
      }

      public registerShop_args getEmptyArgsInstance() {
        return new registerShop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerShop_result getResult(I iface, registerShop_args args) throws org.apache.thrift.TException {
        registerShop_result result = new registerShop_result();
        try {
          result.success = iface.registerShop(args.shop);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class registerProductCategory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerProductCategory_args> {
      public registerProductCategory() {
        super("registerProductCategory");
      }

      public registerProductCategory_args getEmptyArgsInstance() {
        return new registerProductCategory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerProductCategory_result getResult(I iface, registerProductCategory_args args) throws org.apache.thrift.TException {
        registerProductCategory_result result = new registerProductCategory_result();
        try {
          result.success = iface.registerProductCategory(args.productCategory, args.shopId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class registerProducer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerProducer_args> {
      public registerProducer() {
        super("registerProducer");
      }

      public registerProducer_args getEmptyArgsInstance() {
        return new registerProducer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerProducer_result getResult(I iface, registerProducer_args args) throws org.apache.thrift.TException {
        registerProducer_result result = new registerProducer_result();
        try {
          result.success = iface.registerProducer(args.producer, args.shopId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class uploadProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadProducts_args> {
      public uploadProducts() {
        super("uploadProducts");
      }

      public uploadProducts_args getEmptyArgsInstance() {
        return new uploadProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadProducts_result getResult(I iface, uploadProducts_args args) throws org.apache.thrift.TException {
        uploadProducts_result result = new uploadProducts_result();
        try {
          result.success = iface.uploadProducts(args.products, args.shopId, args.cleanShopBeforeUpload);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class uploadProductCategoies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadProductCategoies_args> {
      public uploadProductCategoies() {
        super("uploadProductCategoies");
      }

      public uploadProductCategoies_args getEmptyArgsInstance() {
        return new uploadProductCategoies_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadProductCategoies_result getResult(I iface, uploadProductCategoies_args args) throws org.apache.thrift.TException {
        uploadProductCategoies_result result = new uploadProductCategoies_result();
        try {
          result.success = iface.uploadProductCategoies(args.categories, args.relativeIds, args.cleanShopBeforeUpload);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getFullOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFullOrders_args> {
      public getFullOrders() {
        super("getFullOrders");
      }

      public getFullOrders_args getEmptyArgsInstance() {
        return new getFullOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFullOrders_result getResult(I iface, getFullOrders_args args) throws org.apache.thrift.TException {
        getFullOrders_result result = new getFullOrders_result();
        try {
          result.success = iface.getFullOrders(args.dateFrom, args.dateTo, args.userId, args.shopId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class updateOrderStatusesById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOrderStatusesById_args> {
      public updateOrderStatusesById() {
        super("updateOrderStatusesById");
      }

      public updateOrderStatusesById_args getEmptyArgsInstance() {
        return new updateOrderStatusesById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOrderStatusesById_result getResult(I iface, updateOrderStatusesById_args args) throws org.apache.thrift.TException {
        updateOrderStatusesById_result result = new updateOrderStatusesById_result();
        try {
          iface.updateOrderStatusesById(args.orderStatusMap);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setDates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDates_args> {
      public setDates() {
        super("setDates");
      }

      public setDates_args getEmptyArgsInstance() {
        return new setDates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDates_result getResult(I iface, setDates_args args) throws org.apache.thrift.TException {
        setDates_result result = new setDates_result();
        iface.setDates(args.dateDateTypeMap);
        return result;
      }
    }

    public static class setDeliveryCosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDeliveryCosts_args> {
      public setDeliveryCosts() {
        super("setDeliveryCosts");
      }

      public setDeliveryCosts_args getEmptyArgsInstance() {
        return new setDeliveryCosts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDeliveryCosts_result getResult(I iface, setDeliveryCosts_args args) throws org.apache.thrift.TException {
        setDeliveryCosts_result result = new setDeliveryCosts_result();
        try {
          iface.setDeliveryCosts(args.newDeliveryCosts);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setPaymentTypesCosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPaymentTypesCosts_args> {
      public setPaymentTypesCosts() {
        super("setPaymentTypesCosts");
      }

      public setPaymentTypesCosts_args getEmptyArgsInstance() {
        return new setPaymentTypesCosts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPaymentTypesCosts_result getResult(I iface, setPaymentTypesCosts_args args) throws org.apache.thrift.TException {
        setPaymentTypesCosts_result result = new setPaymentTypesCosts_result();
        try {
          iface.setPaymentTypesCosts(args.newPaymentTypeCosts);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setOrderPaymentStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOrderPaymentStatus_args> {
      public setOrderPaymentStatus() {
        super("setOrderPaymentStatus");
      }

      public setOrderPaymentStatus_args getEmptyArgsInstance() {
        return new setOrderPaymentStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOrderPaymentStatus_result getResult(I iface, setOrderPaymentStatus_args args) throws org.apache.thrift.TException {
        setOrderPaymentStatus_result result = new setOrderPaymentStatus_result();
        try {
          iface.setOrderPaymentStatus(args.orderId, args.newStatus);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setProductPrices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setProductPrices_args> {
      public setProductPrices() {
        super("setProductPrices");
      }

      public setProductPrices_args getEmptyArgsInstance() {
        return new setProductPrices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setProductPrices_result getResult(I iface, setProductPrices_args args) throws org.apache.thrift.TException {
        setProductPrices_result result = new setProductPrices_result();
        try {
          iface.setProductPrices(args.newPricesMap);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getShops<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShops_args> {
      public getShops() {
        super("getShops");
      }

      public getShops_args getEmptyArgsInstance() {
        return new getShops_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getShops_result getResult(I iface, getShops_args args) throws org.apache.thrift.TException {
        getShops_result result = new getShops_result();
        try {
          result.success = iface.getShops();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getDates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDates_args> {
      public getDates() {
        super("getDates");
      }

      public getDates_args getEmptyArgsInstance() {
        return new getDates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDates_result getResult(I iface, getDates_args args) throws org.apache.thrift.TException {
        getDates_result result = new getDates_result();
        try {
          result.success = iface.getDates(args.from, args.to);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getShop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getShop_args> {
      public getShop() {
        super("getShop");
      }

      public getShop_args getEmptyArgsInstance() {
        return new getShop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getShop_result getResult(I iface, getShop_args args) throws org.apache.thrift.TException {
        getShop_result result = new getShop_result();
        try {
          result.success = iface.getShop(args.shopId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getProducers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProducers_args> {
      public getProducers() {
        super("getProducers");
      }

      public getProducers_args getEmptyArgsInstance() {
        return new getProducers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProducers_result getResult(I iface, getProducers_args args) throws org.apache.thrift.TException {
        getProducers_result result = new getProducers_result();
        try {
          result.success = iface.getProducers();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getProductCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductCategories_args> {
      public getProductCategories() {
        super("getProductCategories");
      }

      public getProductCategories_args getEmptyArgsInstance() {
        return new getProductCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductCategories_result getResult(I iface, getProductCategories_args args) throws org.apache.thrift.TException {
        getProductCategories_result result = new getProductCategories_result();
        try {
          result.success = iface.getProductCategories(args.currentProductCategoryId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProducts_args> {
      public getProducts() {
        super("getProducts");
      }

      public getProducts_args getEmptyArgsInstance() {
        return new getProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProducts_result getResult(I iface, getProducts_args args) throws org.apache.thrift.TException {
        getProducts_result result = new getProducts_result();
        try {
          result.success = iface.getProducts(args.offset, args.length, args.categoryId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getProductDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProductDetails_args> {
      public getProductDetails() {
        super("getProductDetails");
      }

      public getProductDetails_args getEmptyArgsInstance() {
        return new getProductDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProductDetails_result getResult(I iface, getProductDetails_args args) throws org.apache.thrift.TException {
        getProductDetails_result result = new getProductDetails_result();
        try {
          result.success = iface.getProductDetails(args.productId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getOrders<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrders_args> {
      public getOrders() {
        super("getOrders");
      }

      public getOrders_args getEmptyArgsInstance() {
        return new getOrders_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrders_result getResult(I iface, getOrders_args args) throws org.apache.thrift.TException {
        getOrders_result result = new getOrders_result();
        try {
          result.success = iface.getOrders(args.dateFrom, args.dateTo);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getOrderDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrderDetails_args> {
      public getOrderDetails() {
        super("getOrderDetails");
      }

      public getOrderDetails_args getEmptyArgsInstance() {
        return new getOrderDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrderDetails_result getResult(I iface, getOrderDetails_args args) throws org.apache.thrift.TException {
        getOrderDetails_result result = new getOrderDetails_result();
        try {
          result.success = iface.getOrderDetails(args.orderId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class createOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrder_args> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrder_result getResult(I iface, createOrder_args args) throws org.apache.thrift.TException {
        createOrder_result result = new createOrder_result();
        try {
          result.success = iface.createOrder(args.date);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class cancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelOrder_args> {
      public cancelOrder() {
        super("cancelOrder");
      }

      public cancelOrder_args getEmptyArgsInstance() {
        return new cancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelOrder_result getResult(I iface, cancelOrder_args args) throws org.apache.thrift.TException {
        cancelOrder_result result = new cancelOrder_result();
        try {
          result.success = iface.cancelOrder();
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class confirmOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmOrder_args> {
      public confirmOrder() {
        super("confirmOrder");
      }

      public confirmOrder_args getEmptyArgsInstance() {
        return new confirmOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmOrder_result getResult(I iface, confirmOrder_args args) throws org.apache.thrift.TException {
        confirmOrder_result result = new confirmOrder_result();
        try {
          result.success = iface.confirmOrder();
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class appendOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, appendOrder_args> {
      public appendOrder() {
        super("appendOrder");
      }

      public appendOrder_args getEmptyArgsInstance() {
        return new appendOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public appendOrder_result getResult(I iface, appendOrder_args args) throws org.apache.thrift.TException {
        appendOrder_result result = new appendOrder_result();
        try {
          result.success = iface.appendOrder(args.oldOrderId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class mergeOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeOrder_args> {
      public mergeOrder() {
        super("mergeOrder");
      }

      public mergeOrder_args getEmptyArgsInstance() {
        return new mergeOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public mergeOrder_result getResult(I iface, mergeOrder_args args) throws org.apache.thrift.TException {
        mergeOrder_result result = new mergeOrder_result();
        try {
          result.success = iface.mergeOrder(args.oldOrderId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class addOrderLine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOrderLine_args> {
      public addOrderLine() {
        super("addOrderLine");
      }

      public addOrderLine_args getEmptyArgsInstance() {
        return new addOrderLine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOrderLine_result getResult(I iface, addOrderLine_args args) throws org.apache.thrift.TException {
        addOrderLine_result result = new addOrderLine_result();
        try {
          result.success = iface.addOrderLine(args.productId, args.quontity, args.priceType);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class removeOrderLine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeOrderLine_args> {
      public removeOrderLine() {
        super("removeOrderLine");
      }

      public removeOrderLine_args getEmptyArgsInstance() {
        return new removeOrderLine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removeOrderLine_result getResult(I iface, removeOrderLine_args args) throws org.apache.thrift.TException {
        removeOrderLine_result result = new removeOrderLine_result();
        try {
          result.success = iface.removeOrderLine(args.productId);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setOrderDeliveryType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOrderDeliveryType_args> {
      public setOrderDeliveryType() {
        super("setOrderDeliveryType");
      }

      public setOrderDeliveryType_args getEmptyArgsInstance() {
        return new setOrderDeliveryType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOrderDeliveryType_result getResult(I iface, setOrderDeliveryType_args args) throws org.apache.thrift.TException {
        setOrderDeliveryType_result result = new setOrderDeliveryType_result();
        try {
          result.success = iface.setOrderDeliveryType(args.deliveryType);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setOrderPaymentType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOrderPaymentType_args> {
      public setOrderPaymentType() {
        super("setOrderPaymentType");
      }

      public setOrderPaymentType_args getEmptyArgsInstance() {
        return new setOrderPaymentType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOrderPaymentType_result getResult(I iface, setOrderPaymentType_args args) throws org.apache.thrift.TException {
        setOrderPaymentType_result result = new setOrderPaymentType_result();
        try {
          result.success = iface.setOrderPaymentType(args.paymentType);
          result.setSuccessIsSet(true);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setOrderDeliveryAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOrderDeliveryAddress_args> {
      public setOrderDeliveryAddress() {
        super("setOrderDeliveryAddress");
      }

      public setOrderDeliveryAddress_args getEmptyArgsInstance() {
        return new setOrderDeliveryAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setOrderDeliveryAddress_result getResult(I iface, setOrderDeliveryAddress_args args) throws org.apache.thrift.TException {
        setOrderDeliveryAddress_result result = new setOrderDeliveryAddress_result();
        try {
          result.success = iface.setOrderDeliveryAddress(args.deliveryAddress);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerShop", new registerShop());
      processMap.put("registerProductCategory", new registerProductCategory());
      processMap.put("registerProducer", new registerProducer());
      processMap.put("uploadProducts", new uploadProducts());
      processMap.put("uploadProductCategoies", new uploadProductCategoies());
      processMap.put("getFullOrders", new getFullOrders());
      processMap.put("updateOrderStatusesById", new updateOrderStatusesById());
      processMap.put("setDates", new setDates());
      processMap.put("setDeliveryCosts", new setDeliveryCosts());
      processMap.put("setPaymentTypesCosts", new setPaymentTypesCosts());
      processMap.put("setOrderPaymentStatus", new setOrderPaymentStatus());
      processMap.put("setProductPrices", new setProductPrices());
      processMap.put("getShops", new getShops());
      processMap.put("getDates", new getDates());
      processMap.put("getShop", new getShop());
      processMap.put("getProducers", new getProducers());
      processMap.put("getProductCategories", new getProductCategories());
      processMap.put("getProducts", new getProducts());
      processMap.put("getProductDetails", new getProductDetails());
      processMap.put("getOrders", new getOrders());
      processMap.put("getOrderDetails", new getOrderDetails());
      processMap.put("createOrder", new createOrder());
      processMap.put("cancelOrder", new cancelOrder());
      processMap.put("confirmOrder", new confirmOrder());
      processMap.put("appendOrder", new appendOrder());
      processMap.put("mergeOrder", new mergeOrder());
      processMap.put("addOrderLine", new addOrderLine());
      processMap.put("removeOrderLine", new removeOrderLine());
      processMap.put("setOrderDeliveryType", new setOrderDeliveryType());
      processMap.put("setOrderPaymentType", new setOrderPaymentType());
      processMap.put("setOrderDeliveryAddress", new setOrderDeliveryAddress());
      return processMap;
    }

    public static class registerShop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerShop_args, Long> {
      public registerShop() {
        super("registerShop");
      }

      public registerShop_args getEmptyArgsInstance() {
        return new registerShop_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            registerShop_result result = new registerShop_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerShop_result result = new registerShop_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerShop_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.registerShop(args.shop,resultHandler);
      }
    }

    public static class registerProductCategory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerProductCategory_args, Long> {
      public registerProductCategory() {
        super("registerProductCategory");
      }

      public registerProductCategory_args getEmptyArgsInstance() {
        return new registerProductCategory_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            registerProductCategory_result result = new registerProductCategory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerProductCategory_result result = new registerProductCategory_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerProductCategory_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.registerProductCategory(args.productCategory, args.shopId,resultHandler);
      }
    }

    public static class registerProducer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerProducer_args, Long> {
      public registerProducer() {
        super("registerProducer");
      }

      public registerProducer_args getEmptyArgsInstance() {
        return new registerProducer_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            registerProducer_result result = new registerProducer_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerProducer_result result = new registerProducer_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerProducer_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.registerProducer(args.producer, args.shopId,resultHandler);
      }
    }

    public static class uploadProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadProducts_args, Set<Long>> {
      public uploadProducts() {
        super("uploadProducts");
      }

      public uploadProducts_args getEmptyArgsInstance() {
        return new uploadProducts_args();
      }

      public AsyncMethodCallback<Set<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<Long>>() { 
          public void onComplete(Set<Long> o) {
            uploadProducts_result result = new uploadProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadProducts_result result = new uploadProducts_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadProducts_args args, org.apache.thrift.async.AsyncMethodCallback<Set<Long>> resultHandler) throws TException {
        iface.uploadProducts(args.products, args.shopId, args.cleanShopBeforeUpload,resultHandler);
      }
    }

    public static class uploadProductCategoies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadProductCategoies_args, Set<ProductCategory>> {
      public uploadProductCategoies() {
        super("uploadProductCategoies");
      }

      public uploadProductCategoies_args getEmptyArgsInstance() {
        return new uploadProductCategoies_args();
      }

      public AsyncMethodCallback<Set<ProductCategory>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Set<ProductCategory>>() { 
          public void onComplete(Set<ProductCategory> o) {
            uploadProductCategoies_result result = new uploadProductCategoies_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadProductCategoies_result result = new uploadProductCategoies_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadProductCategoies_args args, org.apache.thrift.async.AsyncMethodCallback<Set<ProductCategory>> resultHandler) throws TException {
        iface.uploadProductCategoies(args.categories, args.relativeIds, args.cleanShopBeforeUpload,resultHandler);
      }
    }

    public static class getFullOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFullOrders_args, List<Order>> {
      public getFullOrders() {
        super("getFullOrders");
      }

      public getFullOrders_args getEmptyArgsInstance() {
        return new getFullOrders_args();
      }

      public AsyncMethodCallback<List<Order>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Order>>() { 
          public void onComplete(List<Order> o) {
            getFullOrders_result result = new getFullOrders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFullOrders_result result = new getFullOrders_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFullOrders_args args, org.apache.thrift.async.AsyncMethodCallback<List<Order>> resultHandler) throws TException {
        iface.getFullOrders(args.dateFrom, args.dateTo, args.userId, args.shopId,resultHandler);
      }
    }

    public static class updateOrderStatusesById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOrderStatusesById_args, Void> {
      public updateOrderStatusesById() {
        super("updateOrderStatusesById");
      }

      public updateOrderStatusesById_args getEmptyArgsInstance() {
        return new updateOrderStatusesById_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateOrderStatusesById_result result = new updateOrderStatusesById_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOrderStatusesById_result result = new updateOrderStatusesById_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOrderStatusesById_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateOrderStatusesById(args.orderStatusMap,resultHandler);
      }
    }

    public static class setDates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setDates_args, Void> {
      public setDates() {
        super("setDates");
      }

      public setDates_args getEmptyArgsInstance() {
        return new setDates_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setDates_result result = new setDates_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setDates_result result = new setDates_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setDates_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setDates(args.dateDateTypeMap,resultHandler);
      }
    }

    public static class setDeliveryCosts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setDeliveryCosts_args, Void> {
      public setDeliveryCosts() {
        super("setDeliveryCosts");
      }

      public setDeliveryCosts_args getEmptyArgsInstance() {
        return new setDeliveryCosts_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setDeliveryCosts_result result = new setDeliveryCosts_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setDeliveryCosts_result result = new setDeliveryCosts_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setDeliveryCosts_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setDeliveryCosts(args.newDeliveryCosts,resultHandler);
      }
    }

    public static class setPaymentTypesCosts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPaymentTypesCosts_args, Void> {
      public setPaymentTypesCosts() {
        super("setPaymentTypesCosts");
      }

      public setPaymentTypesCosts_args getEmptyArgsInstance() {
        return new setPaymentTypesCosts_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setPaymentTypesCosts_result result = new setPaymentTypesCosts_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPaymentTypesCosts_result result = new setPaymentTypesCosts_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPaymentTypesCosts_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setPaymentTypesCosts(args.newPaymentTypeCosts,resultHandler);
      }
    }

    public static class setOrderPaymentStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOrderPaymentStatus_args, Void> {
      public setOrderPaymentStatus() {
        super("setOrderPaymentStatus");
      }

      public setOrderPaymentStatus_args getEmptyArgsInstance() {
        return new setOrderPaymentStatus_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setOrderPaymentStatus_result result = new setOrderPaymentStatus_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOrderPaymentStatus_result result = new setOrderPaymentStatus_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOrderPaymentStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setOrderPaymentStatus(args.orderId, args.newStatus,resultHandler);
      }
    }

    public static class setProductPrices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setProductPrices_args, Void> {
      public setProductPrices() {
        super("setProductPrices");
      }

      public setProductPrices_args getEmptyArgsInstance() {
        return new setProductPrices_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setProductPrices_result result = new setProductPrices_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setProductPrices_result result = new setProductPrices_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setProductPrices_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setProductPrices(args.newPricesMap,resultHandler);
      }
    }

    public static class getShops<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getShops_args, List<Shop>> {
      public getShops() {
        super("getShops");
      }

      public getShops_args getEmptyArgsInstance() {
        return new getShops_args();
      }

      public AsyncMethodCallback<List<Shop>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Shop>>() { 
          public void onComplete(List<Shop> o) {
            getShops_result result = new getShops_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getShops_result result = new getShops_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getShops_args args, org.apache.thrift.async.AsyncMethodCallback<List<Shop>> resultHandler) throws TException {
        iface.getShops(resultHandler);
      }
    }

    public static class getDates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDates_args, Map<Integer,DateType>> {
      public getDates() {
        super("getDates");
      }

      public getDates_args getEmptyArgsInstance() {
        return new getDates_args();
      }

      public AsyncMethodCallback<Map<Integer,DateType>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,DateType>>() { 
          public void onComplete(Map<Integer,DateType> o) {
            getDates_result result = new getDates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getDates_result result = new getDates_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDates_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,DateType>> resultHandler) throws TException {
        iface.getDates(args.from, args.to,resultHandler);
      }
    }

    public static class getShop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getShop_args, Shop> {
      public getShop() {
        super("getShop");
      }

      public getShop_args getEmptyArgsInstance() {
        return new getShop_args();
      }

      public AsyncMethodCallback<Shop> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Shop>() { 
          public void onComplete(Shop o) {
            getShop_result result = new getShop_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getShop_result result = new getShop_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getShop_args args, org.apache.thrift.async.AsyncMethodCallback<Shop> resultHandler) throws TException {
        iface.getShop(args.shopId,resultHandler);
      }
    }

    public static class getProducers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProducers_args, List<Producer>> {
      public getProducers() {
        super("getProducers");
      }

      public getProducers_args getEmptyArgsInstance() {
        return new getProducers_args();
      }

      public AsyncMethodCallback<List<Producer>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Producer>>() { 
          public void onComplete(List<Producer> o) {
            getProducers_result result = new getProducers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProducers_result result = new getProducers_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProducers_args args, org.apache.thrift.async.AsyncMethodCallback<List<Producer>> resultHandler) throws TException {
        iface.getProducers(resultHandler);
      }
    }

    public static class getProductCategories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductCategories_args, List<ProductCategory>> {
      public getProductCategories() {
        super("getProductCategories");
      }

      public getProductCategories_args getEmptyArgsInstance() {
        return new getProductCategories_args();
      }

      public AsyncMethodCallback<List<ProductCategory>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProductCategory>>() { 
          public void onComplete(List<ProductCategory> o) {
            getProductCategories_result result = new getProductCategories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductCategories_result result = new getProductCategories_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductCategories_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProductCategory>> resultHandler) throws TException {
        iface.getProductCategories(args.currentProductCategoryId,resultHandler);
      }
    }

    public static class getProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProducts_args, ProductListPart> {
      public getProducts() {
        super("getProducts");
      }

      public getProducts_args getEmptyArgsInstance() {
        return new getProducts_args();
      }

      public AsyncMethodCallback<ProductListPart> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductListPart>() { 
          public void onComplete(ProductListPart o) {
            getProducts_result result = new getProducts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProducts_result result = new getProducts_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProducts_args args, org.apache.thrift.async.AsyncMethodCallback<ProductListPart> resultHandler) throws TException {
        iface.getProducts(args.offset, args.length, args.categoryId,resultHandler);
      }
    }

    public static class getProductDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProductDetails_args, ProductDetails> {
      public getProductDetails() {
        super("getProductDetails");
      }

      public getProductDetails_args getEmptyArgsInstance() {
        return new getProductDetails_args();
      }

      public AsyncMethodCallback<ProductDetails> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ProductDetails>() { 
          public void onComplete(ProductDetails o) {
            getProductDetails_result result = new getProductDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProductDetails_result result = new getProductDetails_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProductDetails_args args, org.apache.thrift.async.AsyncMethodCallback<ProductDetails> resultHandler) throws TException {
        iface.getProductDetails(args.productId,resultHandler);
      }
    }

    public static class getOrders<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrders_args, List<Order>> {
      public getOrders() {
        super("getOrders");
      }

      public getOrders_args getEmptyArgsInstance() {
        return new getOrders_args();
      }

      public AsyncMethodCallback<List<Order>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Order>>() { 
          public void onComplete(List<Order> o) {
            getOrders_result result = new getOrders_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrders_result result = new getOrders_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrders_args args, org.apache.thrift.async.AsyncMethodCallback<List<Order>> resultHandler) throws TException {
        iface.getOrders(args.dateFrom, args.dateTo,resultHandler);
      }
    }

    public static class getOrderDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrderDetails_args, OrderDetails> {
      public getOrderDetails() {
        super("getOrderDetails");
      }

      public getOrderDetails_args getEmptyArgsInstance() {
        return new getOrderDetails_args();
      }

      public AsyncMethodCallback<OrderDetails> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderDetails>() { 
          public void onComplete(OrderDetails o) {
            getOrderDetails_result result = new getOrderDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOrderDetails_result result = new getOrderDetails_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrderDetails_args args, org.apache.thrift.async.AsyncMethodCallback<OrderDetails> resultHandler) throws TException {
        iface.getOrderDetails(args.orderId,resultHandler);
      }
    }

    public static class createOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrder_args, Long> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            createOrder_result result = new createOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createOrder_result result = new createOrder_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.createOrder(args.date,resultHandler);
      }
    }

    public static class cancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelOrder_args, Long> {
      public cancelOrder() {
        super("cancelOrder");
      }

      public cancelOrder_args getEmptyArgsInstance() {
        return new cancelOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            cancelOrder_result result = new cancelOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelOrder_result result = new cancelOrder_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.cancelOrder(resultHandler);
      }
    }

    public static class confirmOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmOrder_args, Long> {
      public confirmOrder() {
        super("confirmOrder");
      }

      public confirmOrder_args getEmptyArgsInstance() {
        return new confirmOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            confirmOrder_result result = new confirmOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmOrder_result result = new confirmOrder_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.confirmOrder(resultHandler);
      }
    }

    public static class appendOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, appendOrder_args, Long> {
      public appendOrder() {
        super("appendOrder");
      }

      public appendOrder_args getEmptyArgsInstance() {
        return new appendOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            appendOrder_result result = new appendOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            appendOrder_result result = new appendOrder_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, appendOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.appendOrder(args.oldOrderId,resultHandler);
      }
    }

    public static class mergeOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeOrder_args, Long> {
      public mergeOrder() {
        super("mergeOrder");
      }

      public mergeOrder_args getEmptyArgsInstance() {
        return new mergeOrder_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            mergeOrder_result result = new mergeOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            mergeOrder_result result = new mergeOrder_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeOrder_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.mergeOrder(args.oldOrderId,resultHandler);
      }
    }

    public static class addOrderLine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOrderLine_args, OrderLine> {
      public addOrderLine() {
        super("addOrderLine");
      }

      public addOrderLine_args getEmptyArgsInstance() {
        return new addOrderLine_args();
      }

      public AsyncMethodCallback<OrderLine> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderLine>() { 
          public void onComplete(OrderLine o) {
            addOrderLine_result result = new addOrderLine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOrderLine_result result = new addOrderLine_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOrderLine_args args, org.apache.thrift.async.AsyncMethodCallback<OrderLine> resultHandler) throws TException {
        iface.addOrderLine(args.productId, args.quontity, args.priceType,resultHandler);
      }
    }

    public static class removeOrderLine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeOrderLine_args, Boolean> {
      public removeOrderLine() {
        super("removeOrderLine");
      }

      public removeOrderLine_args getEmptyArgsInstance() {
        return new removeOrderLine_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            removeOrderLine_result result = new removeOrderLine_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removeOrderLine_result result = new removeOrderLine_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeOrderLine_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.removeOrderLine(args.productId,resultHandler);
      }
    }

    public static class setOrderDeliveryType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOrderDeliveryType_args, OrderDetails> {
      public setOrderDeliveryType() {
        super("setOrderDeliveryType");
      }

      public setOrderDeliveryType_args getEmptyArgsInstance() {
        return new setOrderDeliveryType_args();
      }

      public AsyncMethodCallback<OrderDetails> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderDetails>() { 
          public void onComplete(OrderDetails o) {
            setOrderDeliveryType_result result = new setOrderDeliveryType_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOrderDeliveryType_result result = new setOrderDeliveryType_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOrderDeliveryType_args args, org.apache.thrift.async.AsyncMethodCallback<OrderDetails> resultHandler) throws TException {
        iface.setOrderDeliveryType(args.deliveryType,resultHandler);
      }
    }

    public static class setOrderPaymentType<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOrderPaymentType_args, Boolean> {
      public setOrderPaymentType() {
        super("setOrderPaymentType");
      }

      public setOrderPaymentType_args getEmptyArgsInstance() {
        return new setOrderPaymentType_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setOrderPaymentType_result result = new setOrderPaymentType_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOrderPaymentType_result result = new setOrderPaymentType_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOrderPaymentType_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setOrderPaymentType(args.paymentType,resultHandler);
      }
    }

    public static class setOrderDeliveryAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setOrderDeliveryAddress_args, OrderDetails> {
      public setOrderDeliveryAddress() {
        super("setOrderDeliveryAddress");
      }

      public setOrderDeliveryAddress_args getEmptyArgsInstance() {
        return new setOrderDeliveryAddress_args();
      }

      public AsyncMethodCallback<OrderDetails> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderDetails>() { 
          public void onComplete(OrderDetails o) {
            setOrderDeliveryAddress_result result = new setOrderDeliveryAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setOrderDeliveryAddress_result result = new setOrderDeliveryAddress_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setOrderDeliveryAddress_args args, org.apache.thrift.async.AsyncMethodCallback<OrderDetails> resultHandler) throws TException {
        iface.setOrderDeliveryAddress(args.deliveryAddress,resultHandler);
      }
    }

  }

  public static class registerShop_args implements org.apache.thrift.TBase<registerShop_args, registerShop_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerShop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerShop_args");

    private static final org.apache.thrift.protocol.TField SHOP_FIELD_DESC = new org.apache.thrift.protocol.TField("shop", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerShop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerShop_argsTupleSchemeFactory());
    }

    public Shop shop; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOP((short)1, "shop");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOP
            return SHOP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOP, new org.apache.thrift.meta_data.FieldMetaData("shop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shop.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerShop_args.class, metaDataMap);
    }

    public registerShop_args() {
    }

    public registerShop_args(
      Shop shop)
    {
      this();
      this.shop = shop;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerShop_args(registerShop_args other) {
      if (other.isSetShop()) {
        this.shop = new Shop(other.shop);
      }
    }

    public registerShop_args deepCopy() {
      return new registerShop_args(this);
    }

    @Override
    public void clear() {
      this.shop = null;
    }

    public Shop getShop() {
      return this.shop;
    }

    public registerShop_args setShop(Shop shop) {
      this.shop = shop;
      return this;
    }

    public void unsetShop() {
      this.shop = null;
    }

    /** Returns true if field shop is set (has been assigned a value) and false otherwise */
    public boolean isSetShop() {
      return this.shop != null;
    }

    public void setShopIsSet(boolean value) {
      if (!value) {
        this.shop = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOP:
        if (value == null) {
          unsetShop();
        } else {
          setShop((Shop)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOP:
        return getShop();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOP:
        return isSetShop();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerShop_args)
        return this.equals((registerShop_args)that);
      return false;
    }

    public boolean equals(registerShop_args that) {
      if (that == null)
        return false;

      boolean this_present_shop = true && this.isSetShop();
      boolean that_present_shop = true && that.isSetShop();
      if (this_present_shop || that_present_shop) {
        if (!(this_present_shop && that_present_shop))
          return false;
        if (!this.shop.equals(that.shop))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerShop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShop()).compareTo(other.isSetShop());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShop()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shop, other.shop);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerShop_args(");
      boolean first = true;

      sb.append("shop:");
      if (this.shop == null) {
        sb.append("null");
      } else {
        sb.append(this.shop);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shop != null) {
        shop.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerShop_argsStandardSchemeFactory implements SchemeFactory {
      public registerShop_argsStandardScheme getScheme() {
        return new registerShop_argsStandardScheme();
      }
    }

    private static class registerShop_argsStandardScheme extends StandardScheme<registerShop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerShop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shop = new Shop();
                struct.shop.read(iprot);
                struct.setShopIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerShop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.shop != null) {
          oprot.writeFieldBegin(SHOP_FIELD_DESC);
          struct.shop.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerShop_argsTupleSchemeFactory implements SchemeFactory {
      public registerShop_argsTupleScheme getScheme() {
        return new registerShop_argsTupleScheme();
      }
    }

    private static class registerShop_argsTupleScheme extends TupleScheme<registerShop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShop()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShop()) {
          struct.shop.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shop = new Shop();
          struct.shop.read(iprot);
          struct.setShopIsSet(true);
        }
      }
    }

  }

  public static class registerShop_result implements org.apache.thrift.TBase<registerShop_result, registerShop_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerShop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerShop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerShop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerShop_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerShop_result.class, metaDataMap);
    }

    public registerShop_result() {
    }

    public registerShop_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerShop_result(registerShop_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public registerShop_result deepCopy() {
      return new registerShop_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public registerShop_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public registerShop_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerShop_result)
        return this.equals((registerShop_result)that);
      return false;
    }

    public boolean equals(registerShop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerShop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerShop_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerShop_resultStandardSchemeFactory implements SchemeFactory {
      public registerShop_resultStandardScheme getScheme() {
        return new registerShop_resultStandardScheme();
      }
    }

    private static class registerShop_resultStandardScheme extends StandardScheme<registerShop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerShop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerShop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerShop_resultTupleSchemeFactory implements SchemeFactory {
      public registerShop_resultTupleScheme getScheme() {
        return new registerShop_resultTupleScheme();
      }
    }

    private static class registerShop_resultTupleScheme extends TupleScheme<registerShop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class registerProductCategory_args implements org.apache.thrift.TBase<registerProductCategory_args, registerProductCategory_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerProductCategory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerProductCategory_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("productCategory", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerProductCategory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerProductCategory_argsTupleSchemeFactory());
    }

    public ProductCategory productCategory; // required
    public long shopId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_CATEGORY((short)1, "productCategory"),
      SHOP_ID((short)2, "shopId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_CATEGORY
            return PRODUCT_CATEGORY;
          case 2: // SHOP_ID
            return SHOP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHOPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("productCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductCategory.class)));
      tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerProductCategory_args.class, metaDataMap);
    }

    public registerProductCategory_args() {
    }

    public registerProductCategory_args(
      ProductCategory productCategory,
      long shopId)
    {
      this();
      this.productCategory = productCategory;
      this.shopId = shopId;
      setShopIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerProductCategory_args(registerProductCategory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProductCategory()) {
        this.productCategory = new ProductCategory(other.productCategory);
      }
      this.shopId = other.shopId;
    }

    public registerProductCategory_args deepCopy() {
      return new registerProductCategory_args(this);
    }

    @Override
    public void clear() {
      this.productCategory = null;
      setShopIdIsSet(false);
      this.shopId = 0;
    }

    public ProductCategory getProductCategory() {
      return this.productCategory;
    }

    public registerProductCategory_args setProductCategory(ProductCategory productCategory) {
      this.productCategory = productCategory;
      return this;
    }

    public void unsetProductCategory() {
      this.productCategory = null;
    }

    /** Returns true if field productCategory is set (has been assigned a value) and false otherwise */
    public boolean isSetProductCategory() {
      return this.productCategory != null;
    }

    public void setProductCategoryIsSet(boolean value) {
      if (!value) {
        this.productCategory = null;
      }
    }

    public long getShopId() {
      return this.shopId;
    }

    public registerProductCategory_args setShopId(long shopId) {
      this.shopId = shopId;
      setShopIdIsSet(true);
      return this;
    }

    public void unsetShopId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    public void setShopIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_CATEGORY:
        if (value == null) {
          unsetProductCategory();
        } else {
          setProductCategory((ProductCategory)value);
        }
        break;

      case SHOP_ID:
        if (value == null) {
          unsetShopId();
        } else {
          setShopId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_CATEGORY:
        return getProductCategory();

      case SHOP_ID:
        return Long.valueOf(getShopId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_CATEGORY:
        return isSetProductCategory();
      case SHOP_ID:
        return isSetShopId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerProductCategory_args)
        return this.equals((registerProductCategory_args)that);
      return false;
    }

    public boolean equals(registerProductCategory_args that) {
      if (that == null)
        return false;

      boolean this_present_productCategory = true && this.isSetProductCategory();
      boolean that_present_productCategory = true && that.isSetProductCategory();
      if (this_present_productCategory || that_present_productCategory) {
        if (!(this_present_productCategory && that_present_productCategory))
          return false;
        if (!this.productCategory.equals(that.productCategory))
          return false;
      }

      boolean this_present_shopId = true;
      boolean that_present_shopId = true;
      if (this_present_shopId || that_present_shopId) {
        if (!(this_present_shopId && that_present_shopId))
          return false;
        if (this.shopId != that.shopId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerProductCategory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductCategory()).compareTo(other.isSetProductCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productCategory, other.productCategory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerProductCategory_args(");
      boolean first = true;

      sb.append("productCategory:");
      if (this.productCategory == null) {
        sb.append("null");
      } else {
        sb.append(this.productCategory);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shopId:");
      sb.append(this.shopId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (productCategory != null) {
        productCategory.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerProductCategory_argsStandardSchemeFactory implements SchemeFactory {
      public registerProductCategory_argsStandardScheme getScheme() {
        return new registerProductCategory_argsStandardScheme();
      }
    }

    private static class registerProductCategory_argsStandardScheme extends StandardScheme<registerProductCategory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerProductCategory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.productCategory = new ProductCategory();
                struct.productCategory.read(iprot);
                struct.setProductCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHOP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shopId = iprot.readI64();
                struct.setShopIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerProductCategory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.productCategory != null) {
          oprot.writeFieldBegin(PRODUCT_CATEGORY_FIELD_DESC);
          struct.productCategory.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeI64(struct.shopId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerProductCategory_argsTupleSchemeFactory implements SchemeFactory {
      public registerProductCategory_argsTupleScheme getScheme() {
        return new registerProductCategory_argsTupleScheme();
      }
    }

    private static class registerProductCategory_argsTupleScheme extends TupleScheme<registerProductCategory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductCategory()) {
          optionals.set(0);
        }
        if (struct.isSetShopId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProductCategory()) {
          struct.productCategory.write(oprot);
        }
        if (struct.isSetShopId()) {
          oprot.writeI64(struct.shopId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerProductCategory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.productCategory = new ProductCategory();
          struct.productCategory.read(iprot);
          struct.setProductCategoryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shopId = iprot.readI64();
          struct.setShopIdIsSet(true);
        }
      }
    }

  }

  public static class registerProductCategory_result implements org.apache.thrift.TBase<registerProductCategory_result, registerProductCategory_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerProductCategory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerProductCategory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerProductCategory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerProductCategory_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerProductCategory_result.class, metaDataMap);
    }

    public registerProductCategory_result() {
    }

    public registerProductCategory_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerProductCategory_result(registerProductCategory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public registerProductCategory_result deepCopy() {
      return new registerProductCategory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public registerProductCategory_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public registerProductCategory_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerProductCategory_result)
        return this.equals((registerProductCategory_result)that);
      return false;
    }

    public boolean equals(registerProductCategory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerProductCategory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerProductCategory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerProductCategory_resultStandardSchemeFactory implements SchemeFactory {
      public registerProductCategory_resultStandardScheme getScheme() {
        return new registerProductCategory_resultStandardScheme();
      }
    }

    private static class registerProductCategory_resultStandardScheme extends StandardScheme<registerProductCategory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerProductCategory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerProductCategory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerProductCategory_resultTupleSchemeFactory implements SchemeFactory {
      public registerProductCategory_resultTupleScheme getScheme() {
        return new registerProductCategory_resultTupleScheme();
      }
    }

    private static class registerProductCategory_resultTupleScheme extends TupleScheme<registerProductCategory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerProductCategory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class registerProducer_args implements org.apache.thrift.TBase<registerProducer_args, registerProducer_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerProducer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerProducer_args");

    private static final org.apache.thrift.protocol.TField PRODUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("producer", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerProducer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerProducer_argsTupleSchemeFactory());
    }

    public Producer producer; // required
    public long shopId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCER((short)1, "producer"),
      SHOP_ID((short)2, "shopId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCER
            return PRODUCER;
          case 2: // SHOP_ID
            return SHOP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHOPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCER, new org.apache.thrift.meta_data.FieldMetaData("producer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Producer.class)));
      tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerProducer_args.class, metaDataMap);
    }

    public registerProducer_args() {
    }

    public registerProducer_args(
      Producer producer,
      long shopId)
    {
      this();
      this.producer = producer;
      this.shopId = shopId;
      setShopIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerProducer_args(registerProducer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProducer()) {
        this.producer = new Producer(other.producer);
      }
      this.shopId = other.shopId;
    }

    public registerProducer_args deepCopy() {
      return new registerProducer_args(this);
    }

    @Override
    public void clear() {
      this.producer = null;
      setShopIdIsSet(false);
      this.shopId = 0;
    }

    public Producer getProducer() {
      return this.producer;
    }

    public registerProducer_args setProducer(Producer producer) {
      this.producer = producer;
      return this;
    }

    public void unsetProducer() {
      this.producer = null;
    }

    /** Returns true if field producer is set (has been assigned a value) and false otherwise */
    public boolean isSetProducer() {
      return this.producer != null;
    }

    public void setProducerIsSet(boolean value) {
      if (!value) {
        this.producer = null;
      }
    }

    public long getShopId() {
      return this.shopId;
    }

    public registerProducer_args setShopId(long shopId) {
      this.shopId = shopId;
      setShopIdIsSet(true);
      return this;
    }

    public void unsetShopId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    public void setShopIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCER:
        if (value == null) {
          unsetProducer();
        } else {
          setProducer((Producer)value);
        }
        break;

      case SHOP_ID:
        if (value == null) {
          unsetShopId();
        } else {
          setShopId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCER:
        return getProducer();

      case SHOP_ID:
        return Long.valueOf(getShopId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCER:
        return isSetProducer();
      case SHOP_ID:
        return isSetShopId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerProducer_args)
        return this.equals((registerProducer_args)that);
      return false;
    }

    public boolean equals(registerProducer_args that) {
      if (that == null)
        return false;

      boolean this_present_producer = true && this.isSetProducer();
      boolean that_present_producer = true && that.isSetProducer();
      if (this_present_producer || that_present_producer) {
        if (!(this_present_producer && that_present_producer))
          return false;
        if (!this.producer.equals(that.producer))
          return false;
      }

      boolean this_present_shopId = true;
      boolean that_present_shopId = true;
      if (this_present_shopId || that_present_shopId) {
        if (!(this_present_shopId && that_present_shopId))
          return false;
        if (this.shopId != that.shopId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerProducer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProducer()).compareTo(other.isSetProducer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProducer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producer, other.producer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerProducer_args(");
      boolean first = true;

      sb.append("producer:");
      if (this.producer == null) {
        sb.append("null");
      } else {
        sb.append(this.producer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shopId:");
      sb.append(this.shopId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (producer != null) {
        producer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerProducer_argsStandardSchemeFactory implements SchemeFactory {
      public registerProducer_argsStandardScheme getScheme() {
        return new registerProducer_argsStandardScheme();
      }
    }

    private static class registerProducer_argsStandardScheme extends StandardScheme<registerProducer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerProducer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.producer = new Producer();
                struct.producer.read(iprot);
                struct.setProducerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHOP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shopId = iprot.readI64();
                struct.setShopIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerProducer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.producer != null) {
          oprot.writeFieldBegin(PRODUCER_FIELD_DESC);
          struct.producer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeI64(struct.shopId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerProducer_argsTupleSchemeFactory implements SchemeFactory {
      public registerProducer_argsTupleScheme getScheme() {
        return new registerProducer_argsTupleScheme();
      }
    }

    private static class registerProducer_argsTupleScheme extends TupleScheme<registerProducer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerProducer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProducer()) {
          optionals.set(0);
        }
        if (struct.isSetShopId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProducer()) {
          struct.producer.write(oprot);
        }
        if (struct.isSetShopId()) {
          oprot.writeI64(struct.shopId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerProducer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.producer = new Producer();
          struct.producer.read(iprot);
          struct.setProducerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shopId = iprot.readI64();
          struct.setShopIdIsSet(true);
        }
      }
    }

  }

  public static class registerProducer_result implements org.apache.thrift.TBase<registerProducer_result, registerProducer_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerProducer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerProducer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerProducer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerProducer_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerProducer_result.class, metaDataMap);
    }

    public registerProducer_result() {
    }

    public registerProducer_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerProducer_result(registerProducer_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public registerProducer_result deepCopy() {
      return new registerProducer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public registerProducer_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public registerProducer_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerProducer_result)
        return this.equals((registerProducer_result)that);
      return false;
    }

    public boolean equals(registerProducer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerProducer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerProducer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerProducer_resultStandardSchemeFactory implements SchemeFactory {
      public registerProducer_resultStandardScheme getScheme() {
        return new registerProducer_resultStandardScheme();
      }
    }

    private static class registerProducer_resultStandardScheme extends StandardScheme<registerProducer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerProducer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerProducer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerProducer_resultTupleSchemeFactory implements SchemeFactory {
      public registerProducer_resultTupleScheme getScheme() {
        return new registerProducer_resultTupleScheme();
      }
    }

    private static class registerProducer_resultTupleScheme extends TupleScheme<registerProducer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerProducer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerProducer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class uploadProducts_args implements org.apache.thrift.TBase<uploadProducts_args, uploadProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadProducts_args");

    private static final org.apache.thrift.protocol.TField PRODUCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("products", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CLEAN_SHOP_BEFORE_UPLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanShopBeforeUpload", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadProducts_argsTupleSchemeFactory());
    }

    public List<FullProductInfo> products; // required
    public long shopId; // required
    public boolean cleanShopBeforeUpload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCTS((short)1, "products"),
      SHOP_ID((short)2, "shopId"),
      CLEAN_SHOP_BEFORE_UPLOAD((short)3, "cleanShopBeforeUpload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCTS
            return PRODUCTS;
          case 2: // SHOP_ID
            return SHOP_ID;
          case 3: // CLEAN_SHOP_BEFORE_UPLOAD
            return CLEAN_SHOP_BEFORE_UPLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHOPID_ISSET_ID = 0;
    private static final int __CLEANSHOPBEFOREUPLOAD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCTS, new org.apache.thrift.meta_data.FieldMetaData("products", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FullProductInfo.class))));
      tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CLEAN_SHOP_BEFORE_UPLOAD, new org.apache.thrift.meta_data.FieldMetaData("cleanShopBeforeUpload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadProducts_args.class, metaDataMap);
    }

    public uploadProducts_args() {
    }

    public uploadProducts_args(
      List<FullProductInfo> products,
      long shopId,
      boolean cleanShopBeforeUpload)
    {
      this();
      this.products = products;
      this.shopId = shopId;
      setShopIdIsSet(true);
      this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      setCleanShopBeforeUploadIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadProducts_args(uploadProducts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetProducts()) {
        List<FullProductInfo> __this__products = new ArrayList<FullProductInfo>(other.products.size());
        for (FullProductInfo other_element : other.products) {
          __this__products.add(new FullProductInfo(other_element));
        }
        this.products = __this__products;
      }
      this.shopId = other.shopId;
      this.cleanShopBeforeUpload = other.cleanShopBeforeUpload;
    }

    public uploadProducts_args deepCopy() {
      return new uploadProducts_args(this);
    }

    @Override
    public void clear() {
      this.products = null;
      setShopIdIsSet(false);
      this.shopId = 0;
      setCleanShopBeforeUploadIsSet(false);
      this.cleanShopBeforeUpload = false;
    }

    public int getProductsSize() {
      return (this.products == null) ? 0 : this.products.size();
    }

    public java.util.Iterator<FullProductInfo> getProductsIterator() {
      return (this.products == null) ? null : this.products.iterator();
    }

    public void addToProducts(FullProductInfo elem) {
      if (this.products == null) {
        this.products = new ArrayList<FullProductInfo>();
      }
      this.products.add(elem);
    }

    public List<FullProductInfo> getProducts() {
      return this.products;
    }

    public uploadProducts_args setProducts(List<FullProductInfo> products) {
      this.products = products;
      return this;
    }

    public void unsetProducts() {
      this.products = null;
    }

    /** Returns true if field products is set (has been assigned a value) and false otherwise */
    public boolean isSetProducts() {
      return this.products != null;
    }

    public void setProductsIsSet(boolean value) {
      if (!value) {
        this.products = null;
      }
    }

    public long getShopId() {
      return this.shopId;
    }

    public uploadProducts_args setShopId(long shopId) {
      this.shopId = shopId;
      setShopIdIsSet(true);
      return this;
    }

    public void unsetShopId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    public void setShopIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
    }

    public boolean isCleanShopBeforeUpload() {
      return this.cleanShopBeforeUpload;
    }

    public uploadProducts_args setCleanShopBeforeUpload(boolean cleanShopBeforeUpload) {
      this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      setCleanShopBeforeUploadIsSet(true);
      return this;
    }

    public void unsetCleanShopBeforeUpload() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID);
    }

    /** Returns true if field cleanShopBeforeUpload is set (has been assigned a value) and false otherwise */
    public boolean isSetCleanShopBeforeUpload() {
      return EncodingUtils.testBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID);
    }

    public void setCleanShopBeforeUploadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCTS:
        if (value == null) {
          unsetProducts();
        } else {
          setProducts((List<FullProductInfo>)value);
        }
        break;

      case SHOP_ID:
        if (value == null) {
          unsetShopId();
        } else {
          setShopId((Long)value);
        }
        break;

      case CLEAN_SHOP_BEFORE_UPLOAD:
        if (value == null) {
          unsetCleanShopBeforeUpload();
        } else {
          setCleanShopBeforeUpload((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCTS:
        return getProducts();

      case SHOP_ID:
        return Long.valueOf(getShopId());

      case CLEAN_SHOP_BEFORE_UPLOAD:
        return Boolean.valueOf(isCleanShopBeforeUpload());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCTS:
        return isSetProducts();
      case SHOP_ID:
        return isSetShopId();
      case CLEAN_SHOP_BEFORE_UPLOAD:
        return isSetCleanShopBeforeUpload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProducts_args)
        return this.equals((uploadProducts_args)that);
      return false;
    }

    public boolean equals(uploadProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_products = true && this.isSetProducts();
      boolean that_present_products = true && that.isSetProducts();
      if (this_present_products || that_present_products) {
        if (!(this_present_products && that_present_products))
          return false;
        if (!this.products.equals(that.products))
          return false;
      }

      boolean this_present_shopId = true;
      boolean that_present_shopId = true;
      if (this_present_shopId || that_present_shopId) {
        if (!(this_present_shopId && that_present_shopId))
          return false;
        if (this.shopId != that.shopId)
          return false;
      }

      boolean this_present_cleanShopBeforeUpload = true;
      boolean that_present_cleanShopBeforeUpload = true;
      if (this_present_cleanShopBeforeUpload || that_present_cleanShopBeforeUpload) {
        if (!(this_present_cleanShopBeforeUpload && that_present_cleanShopBeforeUpload))
          return false;
        if (this.cleanShopBeforeUpload != that.cleanShopBeforeUpload)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProducts()).compareTo(other.isSetProducts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProducts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.products, other.products);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCleanShopBeforeUpload()).compareTo(other.isSetCleanShopBeforeUpload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCleanShopBeforeUpload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanShopBeforeUpload, other.cleanShopBeforeUpload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProducts_args(");
      boolean first = true;

      sb.append("products:");
      if (this.products == null) {
        sb.append("null");
      } else {
        sb.append(this.products);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("shopId:");
      sb.append(this.shopId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cleanShopBeforeUpload:");
      sb.append(this.cleanShopBeforeUpload);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProducts_argsStandardSchemeFactory implements SchemeFactory {
      public uploadProducts_argsStandardScheme getScheme() {
        return new uploadProducts_argsStandardScheme();
      }
    }

    private static class uploadProducts_argsStandardScheme extends StandardScheme<uploadProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.products = new ArrayList<FullProductInfo>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    FullProductInfo _elem114;
                    _elem114 = new FullProductInfo();
                    _elem114.read(iprot);
                    struct.products.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setProductsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SHOP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shopId = iprot.readI64();
                struct.setShopIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLEAN_SHOP_BEFORE_UPLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.cleanShopBeforeUpload = iprot.readBool();
                struct.setCleanShopBeforeUploadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.products != null) {
          oprot.writeFieldBegin(PRODUCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.products.size()));
            for (FullProductInfo _iter115 : struct.products)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeI64(struct.shopId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLEAN_SHOP_BEFORE_UPLOAD_FIELD_DESC);
        oprot.writeBool(struct.cleanShopBeforeUpload);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProducts_argsTupleSchemeFactory implements SchemeFactory {
      public uploadProducts_argsTupleScheme getScheme() {
        return new uploadProducts_argsTupleScheme();
      }
    }

    private static class uploadProducts_argsTupleScheme extends TupleScheme<uploadProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProducts()) {
          optionals.set(0);
        }
        if (struct.isSetShopId()) {
          optionals.set(1);
        }
        if (struct.isSetCleanShopBeforeUpload()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProducts()) {
          {
            oprot.writeI32(struct.products.size());
            for (FullProductInfo _iter116 : struct.products)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetShopId()) {
          oprot.writeI64(struct.shopId);
        }
        if (struct.isSetCleanShopBeforeUpload()) {
          oprot.writeBool(struct.cleanShopBeforeUpload);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.products = new ArrayList<FullProductInfo>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              FullProductInfo _elem119;
              _elem119 = new FullProductInfo();
              _elem119.read(iprot);
              struct.products.add(_elem119);
            }
          }
          struct.setProductsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.shopId = iprot.readI64();
          struct.setShopIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cleanShopBeforeUpload = iprot.readBool();
          struct.setCleanShopBeforeUploadIsSet(true);
        }
      }
    }

  }

  public static class uploadProducts_result implements org.apache.thrift.TBase<uploadProducts_result, uploadProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadProducts_resultTupleSchemeFactory());
    }

    public Set<Long> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadProducts_result.class, metaDataMap);
    }

    public uploadProducts_result() {
    }

    public uploadProducts_result(
      Set<Long> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadProducts_result(uploadProducts_result other) {
      if (other.isSetSuccess()) {
        Set<Long> __this__success = new HashSet<Long>(other.success);
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public uploadProducts_result deepCopy() {
      return new uploadProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new HashSet<Long>();
      }
      this.success.add(elem);
    }

    public Set<Long> getSuccess() {
      return this.success;
    }

    public uploadProducts_result setSuccess(Set<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public uploadProducts_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<Long>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProducts_result)
        return this.equals((uploadProducts_result)that);
      return false;
    }

    public boolean equals(uploadProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProducts_resultStandardSchemeFactory implements SchemeFactory {
      public uploadProducts_resultStandardScheme getScheme() {
        return new uploadProducts_resultStandardScheme();
      }
    }

    private static class uploadProducts_resultStandardScheme extends StandardScheme<uploadProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set120 = iprot.readSetBegin();
                  struct.success = new HashSet<Long>(2*_set120.size);
                  for (int _i121 = 0; _i121 < _set120.size; ++_i121)
                  {
                    long _elem122;
                    _elem122 = iprot.readI64();
                    struct.success.add(_elem122);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter123 : struct.success)
            {
              oprot.writeI64(_iter123);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProducts_resultTupleSchemeFactory implements SchemeFactory {
      public uploadProducts_resultTupleScheme getScheme() {
        return new uploadProducts_resultTupleScheme();
      }
    }

    private static class uploadProducts_resultTupleScheme extends TupleScheme<uploadProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter124 : struct.success)
            {
              oprot.writeI64(_iter124);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set125 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new HashSet<Long>(2*_set125.size);
            for (int _i126 = 0; _i126 < _set125.size; ++_i126)
            {
              long _elem127;
              _elem127 = iprot.readI64();
              struct.success.add(_elem127);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class uploadProductCategoies_args implements org.apache.thrift.TBase<uploadProductCategoies_args, uploadProductCategoies_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadProductCategoies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadProductCategoies_args");

    private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.SET, (short)1);
    private static final org.apache.thrift.protocol.TField RELATIVE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relativeIds", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CLEAN_SHOP_BEFORE_UPLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("cleanShopBeforeUpload", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadProductCategoies_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadProductCategoies_argsTupleSchemeFactory());
    }

    public Set<ProductCategory> categories; // required
    public boolean relativeIds; // required
    public boolean cleanShopBeforeUpload; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORIES((short)1, "categories"),
      RELATIVE_IDS((short)2, "relativeIds"),
      CLEAN_SHOP_BEFORE_UPLOAD((short)3, "cleanShopBeforeUpload");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORIES
            return CATEGORIES;
          case 2: // RELATIVE_IDS
            return RELATIVE_IDS;
          case 3: // CLEAN_SHOP_BEFORE_UPLOAD
            return CLEAN_SHOP_BEFORE_UPLOAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RELATIVEIDS_ISSET_ID = 0;
    private static final int __CLEANSHOPBEFOREUPLOAD_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductCategory.class))));
      tmpMap.put(_Fields.RELATIVE_IDS, new org.apache.thrift.meta_data.FieldMetaData("relativeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CLEAN_SHOP_BEFORE_UPLOAD, new org.apache.thrift.meta_data.FieldMetaData("cleanShopBeforeUpload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadProductCategoies_args.class, metaDataMap);
    }

    public uploadProductCategoies_args() {
    }

    public uploadProductCategoies_args(
      Set<ProductCategory> categories,
      boolean relativeIds,
      boolean cleanShopBeforeUpload)
    {
      this();
      this.categories = categories;
      this.relativeIds = relativeIds;
      setRelativeIdsIsSet(true);
      this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      setCleanShopBeforeUploadIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadProductCategoies_args(uploadProductCategoies_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCategories()) {
        Set<ProductCategory> __this__categories = new HashSet<ProductCategory>(other.categories.size());
        for (ProductCategory other_element : other.categories) {
          __this__categories.add(new ProductCategory(other_element));
        }
        this.categories = __this__categories;
      }
      this.relativeIds = other.relativeIds;
      this.cleanShopBeforeUpload = other.cleanShopBeforeUpload;
    }

    public uploadProductCategoies_args deepCopy() {
      return new uploadProductCategoies_args(this);
    }

    @Override
    public void clear() {
      this.categories = null;
      setRelativeIdsIsSet(false);
      this.relativeIds = false;
      setCleanShopBeforeUploadIsSet(false);
      this.cleanShopBeforeUpload = false;
    }

    public int getCategoriesSize() {
      return (this.categories == null) ? 0 : this.categories.size();
    }

    public java.util.Iterator<ProductCategory> getCategoriesIterator() {
      return (this.categories == null) ? null : this.categories.iterator();
    }

    public void addToCategories(ProductCategory elem) {
      if (this.categories == null) {
        this.categories = new HashSet<ProductCategory>();
      }
      this.categories.add(elem);
    }

    public Set<ProductCategory> getCategories() {
      return this.categories;
    }

    public uploadProductCategoies_args setCategories(Set<ProductCategory> categories) {
      this.categories = categories;
      return this;
    }

    public void unsetCategories() {
      this.categories = null;
    }

    /** Returns true if field categories is set (has been assigned a value) and false otherwise */
    public boolean isSetCategories() {
      return this.categories != null;
    }

    public void setCategoriesIsSet(boolean value) {
      if (!value) {
        this.categories = null;
      }
    }

    public boolean isRelativeIds() {
      return this.relativeIds;
    }

    public uploadProductCategoies_args setRelativeIds(boolean relativeIds) {
      this.relativeIds = relativeIds;
      setRelativeIdsIsSet(true);
      return this;
    }

    public void unsetRelativeIds() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATIVEIDS_ISSET_ID);
    }

    /** Returns true if field relativeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRelativeIds() {
      return EncodingUtils.testBit(__isset_bitfield, __RELATIVEIDS_ISSET_ID);
    }

    public void setRelativeIdsIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATIVEIDS_ISSET_ID, value);
    }

    public boolean isCleanShopBeforeUpload() {
      return this.cleanShopBeforeUpload;
    }

    public uploadProductCategoies_args setCleanShopBeforeUpload(boolean cleanShopBeforeUpload) {
      this.cleanShopBeforeUpload = cleanShopBeforeUpload;
      setCleanShopBeforeUploadIsSet(true);
      return this;
    }

    public void unsetCleanShopBeforeUpload() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID);
    }

    /** Returns true if field cleanShopBeforeUpload is set (has been assigned a value) and false otherwise */
    public boolean isSetCleanShopBeforeUpload() {
      return EncodingUtils.testBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID);
    }

    public void setCleanShopBeforeUploadIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEANSHOPBEFOREUPLOAD_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CATEGORIES:
        if (value == null) {
          unsetCategories();
        } else {
          setCategories((Set<ProductCategory>)value);
        }
        break;

      case RELATIVE_IDS:
        if (value == null) {
          unsetRelativeIds();
        } else {
          setRelativeIds((Boolean)value);
        }
        break;

      case CLEAN_SHOP_BEFORE_UPLOAD:
        if (value == null) {
          unsetCleanShopBeforeUpload();
        } else {
          setCleanShopBeforeUpload((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORIES:
        return getCategories();

      case RELATIVE_IDS:
        return Boolean.valueOf(isRelativeIds());

      case CLEAN_SHOP_BEFORE_UPLOAD:
        return Boolean.valueOf(isCleanShopBeforeUpload());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CATEGORIES:
        return isSetCategories();
      case RELATIVE_IDS:
        return isSetRelativeIds();
      case CLEAN_SHOP_BEFORE_UPLOAD:
        return isSetCleanShopBeforeUpload();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProductCategoies_args)
        return this.equals((uploadProductCategoies_args)that);
      return false;
    }

    public boolean equals(uploadProductCategoies_args that) {
      if (that == null)
        return false;

      boolean this_present_categories = true && this.isSetCategories();
      boolean that_present_categories = true && that.isSetCategories();
      if (this_present_categories || that_present_categories) {
        if (!(this_present_categories && that_present_categories))
          return false;
        if (!this.categories.equals(that.categories))
          return false;
      }

      boolean this_present_relativeIds = true;
      boolean that_present_relativeIds = true;
      if (this_present_relativeIds || that_present_relativeIds) {
        if (!(this_present_relativeIds && that_present_relativeIds))
          return false;
        if (this.relativeIds != that.relativeIds)
          return false;
      }

      boolean this_present_cleanShopBeforeUpload = true;
      boolean that_present_cleanShopBeforeUpload = true;
      if (this_present_cleanShopBeforeUpload || that_present_cleanShopBeforeUpload) {
        if (!(this_present_cleanShopBeforeUpload && that_present_cleanShopBeforeUpload))
          return false;
        if (this.cleanShopBeforeUpload != that.cleanShopBeforeUpload)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadProductCategoies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCategories()).compareTo(other.isSetCategories());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategories()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, other.categories);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRelativeIds()).compareTo(other.isSetRelativeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRelativeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relativeIds, other.relativeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCleanShopBeforeUpload()).compareTo(other.isSetCleanShopBeforeUpload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCleanShopBeforeUpload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cleanShopBeforeUpload, other.cleanShopBeforeUpload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProductCategoies_args(");
      boolean first = true;

      sb.append("categories:");
      if (this.categories == null) {
        sb.append("null");
      } else {
        sb.append(this.categories);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("relativeIds:");
      sb.append(this.relativeIds);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cleanShopBeforeUpload:");
      sb.append(this.cleanShopBeforeUpload);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProductCategoies_argsStandardSchemeFactory implements SchemeFactory {
      public uploadProductCategoies_argsStandardScheme getScheme() {
        return new uploadProductCategoies_argsStandardScheme();
      }
    }

    private static class uploadProductCategoies_argsStandardScheme extends StandardScheme<uploadProductCategoies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadProductCategoies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORIES
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set128 = iprot.readSetBegin();
                  struct.categories = new HashSet<ProductCategory>(2*_set128.size);
                  for (int _i129 = 0; _i129 < _set128.size; ++_i129)
                  {
                    ProductCategory _elem130;
                    _elem130 = new ProductCategory();
                    _elem130.read(iprot);
                    struct.categories.add(_elem130);
                  }
                  iprot.readSetEnd();
                }
                struct.setCategoriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RELATIVE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.relativeIds = iprot.readBool();
                struct.setRelativeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLEAN_SHOP_BEFORE_UPLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.cleanShopBeforeUpload = iprot.readBool();
                struct.setCleanShopBeforeUploadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadProductCategoies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categories != null) {
          oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.categories.size()));
            for (ProductCategory _iter131 : struct.categories)
            {
              _iter131.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RELATIVE_IDS_FIELD_DESC);
        oprot.writeBool(struct.relativeIds);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLEAN_SHOP_BEFORE_UPLOAD_FIELD_DESC);
        oprot.writeBool(struct.cleanShopBeforeUpload);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProductCategoies_argsTupleSchemeFactory implements SchemeFactory {
      public uploadProductCategoies_argsTupleScheme getScheme() {
        return new uploadProductCategoies_argsTupleScheme();
      }
    }

    private static class uploadProductCategoies_argsTupleScheme extends TupleScheme<uploadProductCategoies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadProductCategoies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCategories()) {
          optionals.set(0);
        }
        if (struct.isSetRelativeIds()) {
          optionals.set(1);
        }
        if (struct.isSetCleanShopBeforeUpload()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCategories()) {
          {
            oprot.writeI32(struct.categories.size());
            for (ProductCategory _iter132 : struct.categories)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetRelativeIds()) {
          oprot.writeBool(struct.relativeIds);
        }
        if (struct.isSetCleanShopBeforeUpload()) {
          oprot.writeBool(struct.cleanShopBeforeUpload);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadProductCategoies_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set133 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.categories = new HashSet<ProductCategory>(2*_set133.size);
            for (int _i134 = 0; _i134 < _set133.size; ++_i134)
            {
              ProductCategory _elem135;
              _elem135 = new ProductCategory();
              _elem135.read(iprot);
              struct.categories.add(_elem135);
            }
          }
          struct.setCategoriesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.relativeIds = iprot.readBool();
          struct.setRelativeIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cleanShopBeforeUpload = iprot.readBool();
          struct.setCleanShopBeforeUploadIsSet(true);
        }
      }
    }

  }

  public static class uploadProductCategoies_result implements org.apache.thrift.TBase<uploadProductCategoies_result, uploadProductCategoies_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadProductCategoies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadProductCategoies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadProductCategoies_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadProductCategoies_resultTupleSchemeFactory());
    }

    public Set<ProductCategory> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductCategory.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadProductCategoies_result.class, metaDataMap);
    }

    public uploadProductCategoies_result() {
    }

    public uploadProductCategoies_result(
      Set<ProductCategory> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadProductCategoies_result(uploadProductCategoies_result other) {
      if (other.isSetSuccess()) {
        Set<ProductCategory> __this__success = new HashSet<ProductCategory>(other.success.size());
        for (ProductCategory other_element : other.success) {
          __this__success.add(new ProductCategory(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public uploadProductCategoies_result deepCopy() {
      return new uploadProductCategoies_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProductCategory> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProductCategory elem) {
      if (this.success == null) {
        this.success = new HashSet<ProductCategory>();
      }
      this.success.add(elem);
    }

    public Set<ProductCategory> getSuccess() {
      return this.success;
    }

    public uploadProductCategoies_result setSuccess(Set<ProductCategory> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public uploadProductCategoies_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<ProductCategory>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadProductCategoies_result)
        return this.equals((uploadProductCategoies_result)that);
      return false;
    }

    public boolean equals(uploadProductCategoies_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(uploadProductCategoies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadProductCategoies_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadProductCategoies_resultStandardSchemeFactory implements SchemeFactory {
      public uploadProductCategoies_resultStandardScheme getScheme() {
        return new uploadProductCategoies_resultStandardScheme();
      }
    }

    private static class uploadProductCategoies_resultStandardScheme extends StandardScheme<uploadProductCategoies_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadProductCategoies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set136 = iprot.readSetBegin();
                  struct.success = new HashSet<ProductCategory>(2*_set136.size);
                  for (int _i137 = 0; _i137 < _set136.size; ++_i137)
                  {
                    ProductCategory _elem138;
                    _elem138 = new ProductCategory();
                    _elem138.read(iprot);
                    struct.success.add(_elem138);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadProductCategoies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProductCategory _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadProductCategoies_resultTupleSchemeFactory implements SchemeFactory {
      public uploadProductCategoies_resultTupleScheme getScheme() {
        return new uploadProductCategoies_resultTupleScheme();
      }
    }

    private static class uploadProductCategoies_resultTupleScheme extends TupleScheme<uploadProductCategoies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadProductCategoies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProductCategory _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadProductCategoies_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set141 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashSet<ProductCategory>(2*_set141.size);
            for (int _i142 = 0; _i142 < _set141.size; ++_i142)
            {
              ProductCategory _elem143;
              _elem143 = new ProductCategory();
              _elem143.read(iprot);
              struct.success.add(_elem143);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getFullOrders_args implements org.apache.thrift.TBase<getFullOrders_args, getFullOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFullOrders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFullOrders_args");

    private static final org.apache.thrift.protocol.TField DATE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("dateFrom", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTo", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFullOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFullOrders_argsTupleSchemeFactory());
    }

    public int dateFrom; // required
    public int dateTo; // required
    public long userId; // required
    public long shopId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE_FROM((short)1, "dateFrom"),
      DATE_TO((short)2, "dateTo"),
      USER_ID((short)3, "userId"),
      SHOP_ID((short)4, "shopId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE_FROM
            return DATE_FROM;
          case 2: // DATE_TO
            return DATE_TO;
          case 3: // USER_ID
            return USER_ID;
          case 4: // SHOP_ID
            return SHOP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATEFROM_ISSET_ID = 0;
    private static final int __DATETO_ISSET_ID = 1;
    private static final int __USERID_ISSET_ID = 2;
    private static final int __SHOPID_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE_FROM, new org.apache.thrift.meta_data.FieldMetaData("dateFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATE_TO, new org.apache.thrift.meta_data.FieldMetaData("dateTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFullOrders_args.class, metaDataMap);
    }

    public getFullOrders_args() {
    }

    public getFullOrders_args(
      int dateFrom,
      int dateTo,
      long userId,
      long shopId)
    {
      this();
      this.dateFrom = dateFrom;
      setDateFromIsSet(true);
      this.dateTo = dateTo;
      setDateToIsSet(true);
      this.userId = userId;
      setUserIdIsSet(true);
      this.shopId = shopId;
      setShopIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFullOrders_args(getFullOrders_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dateFrom = other.dateFrom;
      this.dateTo = other.dateTo;
      this.userId = other.userId;
      this.shopId = other.shopId;
    }

    public getFullOrders_args deepCopy() {
      return new getFullOrders_args(this);
    }

    @Override
    public void clear() {
      setDateFromIsSet(false);
      this.dateFrom = 0;
      setDateToIsSet(false);
      this.dateTo = 0;
      setUserIdIsSet(false);
      this.userId = 0;
      setShopIdIsSet(false);
      this.shopId = 0;
    }

    public int getDateFrom() {
      return this.dateFrom;
    }

    public getFullOrders_args setDateFrom(int dateFrom) {
      this.dateFrom = dateFrom;
      setDateFromIsSet(true);
      return this;
    }

    public void unsetDateFrom() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEFROM_ISSET_ID);
    }

    /** Returns true if field dateFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetDateFrom() {
      return EncodingUtils.testBit(__isset_bitfield, __DATEFROM_ISSET_ID);
    }

    public void setDateFromIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEFROM_ISSET_ID, value);
    }

    public int getDateTo() {
      return this.dateTo;
    }

    public getFullOrders_args setDateTo(int dateTo) {
      this.dateTo = dateTo;
      setDateToIsSet(true);
      return this;
    }

    public void unsetDateTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETO_ISSET_ID);
    }

    /** Returns true if field dateTo is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTo() {
      return EncodingUtils.testBit(__isset_bitfield, __DATETO_ISSET_ID);
    }

    public void setDateToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETO_ISSET_ID, value);
    }

    public long getUserId() {
      return this.userId;
    }

    public getFullOrders_args setUserId(long userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public long getShopId() {
      return this.shopId;
    }

    public getFullOrders_args setShopId(long shopId) {
      this.shopId = shopId;
      setShopIdIsSet(true);
      return this;
    }

    public void unsetShopId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    public void setShopIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE_FROM:
        if (value == null) {
          unsetDateFrom();
        } else {
          setDateFrom((Integer)value);
        }
        break;

      case DATE_TO:
        if (value == null) {
          unsetDateTo();
        } else {
          setDateTo((Integer)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Long)value);
        }
        break;

      case SHOP_ID:
        if (value == null) {
          unsetShopId();
        } else {
          setShopId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE_FROM:
        return Integer.valueOf(getDateFrom());

      case DATE_TO:
        return Integer.valueOf(getDateTo());

      case USER_ID:
        return Long.valueOf(getUserId());

      case SHOP_ID:
        return Long.valueOf(getShopId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE_FROM:
        return isSetDateFrom();
      case DATE_TO:
        return isSetDateTo();
      case USER_ID:
        return isSetUserId();
      case SHOP_ID:
        return isSetShopId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFullOrders_args)
        return this.equals((getFullOrders_args)that);
      return false;
    }

    public boolean equals(getFullOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_dateFrom = true;
      boolean that_present_dateFrom = true;
      if (this_present_dateFrom || that_present_dateFrom) {
        if (!(this_present_dateFrom && that_present_dateFrom))
          return false;
        if (this.dateFrom != that.dateFrom)
          return false;
      }

      boolean this_present_dateTo = true;
      boolean that_present_dateTo = true;
      if (this_present_dateTo || that_present_dateTo) {
        if (!(this_present_dateTo && that_present_dateTo))
          return false;
        if (this.dateTo != that.dateTo)
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_shopId = true;
      boolean that_present_shopId = true;
      if (this_present_shopId || that_present_shopId) {
        if (!(this_present_shopId && that_present_shopId))
          return false;
        if (this.shopId != that.shopId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFullOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDateFrom()).compareTo(other.isSetDateFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateFrom, other.dateFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDateTo()).compareTo(other.isSetDateTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTo, other.dateTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFullOrders_args(");
      boolean first = true;

      sb.append("dateFrom:");
      sb.append(this.dateFrom);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateTo:");
      sb.append(this.dateTo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shopId:");
      sb.append(this.shopId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFullOrders_argsStandardSchemeFactory implements SchemeFactory {
      public getFullOrders_argsStandardScheme getScheme() {
        return new getFullOrders_argsStandardScheme();
      }
    }

    private static class getFullOrders_argsStandardScheme extends StandardScheme<getFullOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFullOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dateFrom = iprot.readI32();
                struct.setDateFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dateTo = iprot.readI32();
                struct.setDateToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.userId = iprot.readI64();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SHOP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shopId = iprot.readI64();
                struct.setShopIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFullOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FROM_FIELD_DESC);
        oprot.writeI32(struct.dateFrom);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATE_TO_FIELD_DESC);
        oprot.writeI32(struct.dateTo);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI64(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeI64(struct.shopId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFullOrders_argsTupleSchemeFactory implements SchemeFactory {
      public getFullOrders_argsTupleScheme getScheme() {
        return new getFullOrders_argsTupleScheme();
      }
    }

    private static class getFullOrders_argsTupleScheme extends TupleScheme<getFullOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFullOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDateFrom()) {
          optionals.set(0);
        }
        if (struct.isSetDateTo()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        if (struct.isSetShopId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDateFrom()) {
          oprot.writeI32(struct.dateFrom);
        }
        if (struct.isSetDateTo()) {
          oprot.writeI32(struct.dateTo);
        }
        if (struct.isSetUserId()) {
          oprot.writeI64(struct.userId);
        }
        if (struct.isSetShopId()) {
          oprot.writeI64(struct.shopId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFullOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dateFrom = iprot.readI32();
          struct.setDateFromIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dateTo = iprot.readI32();
          struct.setDateToIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readI64();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.shopId = iprot.readI64();
          struct.setShopIdIsSet(true);
        }
      }
    }

  }

  public static class getFullOrders_result implements org.apache.thrift.TBase<getFullOrders_result, getFullOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFullOrders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFullOrders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFullOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFullOrders_resultTupleSchemeFactory());
    }

    public List<Order> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Order.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFullOrders_result.class, metaDataMap);
    }

    public getFullOrders_result() {
    }

    public getFullOrders_result(
      List<Order> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFullOrders_result(getFullOrders_result other) {
      if (other.isSetSuccess()) {
        List<Order> __this__success = new ArrayList<Order>(other.success.size());
        for (Order other_element : other.success) {
          __this__success.add(new Order(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getFullOrders_result deepCopy() {
      return new getFullOrders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Order> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Order elem) {
      if (this.success == null) {
        this.success = new ArrayList<Order>();
      }
      this.success.add(elem);
    }

    public List<Order> getSuccess() {
      return this.success;
    }

    public getFullOrders_result setSuccess(List<Order> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getFullOrders_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Order>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFullOrders_result)
        return this.equals((getFullOrders_result)that);
      return false;
    }

    public boolean equals(getFullOrders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFullOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFullOrders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFullOrders_resultStandardSchemeFactory implements SchemeFactory {
      public getFullOrders_resultStandardScheme getScheme() {
        return new getFullOrders_resultStandardScheme();
      }
    }

    private static class getFullOrders_resultStandardScheme extends StandardScheme<getFullOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFullOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<Order>(_list144.size);
                  for (int _i145 = 0; _i145 < _list144.size; ++_i145)
                  {
                    Order _elem146;
                    _elem146 = new Order();
                    _elem146.read(iprot);
                    struct.success.add(_elem146);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFullOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Order _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFullOrders_resultTupleSchemeFactory implements SchemeFactory {
      public getFullOrders_resultTupleScheme getScheme() {
        return new getFullOrders_resultTupleScheme();
      }
    }

    private static class getFullOrders_resultTupleScheme extends TupleScheme<getFullOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFullOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Order _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFullOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Order>(_list149.size);
            for (int _i150 = 0; _i150 < _list149.size; ++_i150)
            {
              Order _elem151;
              _elem151 = new Order();
              _elem151.read(iprot);
              struct.success.add(_elem151);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class updateOrderStatusesById_args implements org.apache.thrift.TBase<updateOrderStatusesById_args, updateOrderStatusesById_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderStatusesById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderStatusesById_args");

    private static final org.apache.thrift.protocol.TField ORDER_STATUS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("orderStatusMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderStatusesById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderStatusesById_argsTupleSchemeFactory());
    }

    public Map<Long,OrderStatus> orderStatusMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_STATUS_MAP((short)1, "orderStatusMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_STATUS_MAP
            return ORDER_STATUS_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_STATUS_MAP, new org.apache.thrift.meta_data.FieldMetaData("orderStatusMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, OrderStatus.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderStatusesById_args.class, metaDataMap);
    }

    public updateOrderStatusesById_args() {
    }

    public updateOrderStatusesById_args(
      Map<Long,OrderStatus> orderStatusMap)
    {
      this();
      this.orderStatusMap = orderStatusMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderStatusesById_args(updateOrderStatusesById_args other) {
      if (other.isSetOrderStatusMap()) {
        Map<Long,OrderStatus> __this__orderStatusMap = new HashMap<Long,OrderStatus>(other.orderStatusMap.size());
        for (Map.Entry<Long, OrderStatus> other_element : other.orderStatusMap.entrySet()) {

          Long other_element_key = other_element.getKey();
          OrderStatus other_element_value = other_element.getValue();

          Long __this__orderStatusMap_copy_key = other_element_key;

          OrderStatus __this__orderStatusMap_copy_value = other_element_value;

          __this__orderStatusMap.put(__this__orderStatusMap_copy_key, __this__orderStatusMap_copy_value);
        }
        this.orderStatusMap = __this__orderStatusMap;
      }
    }

    public updateOrderStatusesById_args deepCopy() {
      return new updateOrderStatusesById_args(this);
    }

    @Override
    public void clear() {
      this.orderStatusMap = null;
    }

    public int getOrderStatusMapSize() {
      return (this.orderStatusMap == null) ? 0 : this.orderStatusMap.size();
    }

    public void putToOrderStatusMap(long key, OrderStatus val) {
      if (this.orderStatusMap == null) {
        this.orderStatusMap = new HashMap<Long,OrderStatus>();
      }
      this.orderStatusMap.put(key, val);
    }

    public Map<Long,OrderStatus> getOrderStatusMap() {
      return this.orderStatusMap;
    }

    public updateOrderStatusesById_args setOrderStatusMap(Map<Long,OrderStatus> orderStatusMap) {
      this.orderStatusMap = orderStatusMap;
      return this;
    }

    public void unsetOrderStatusMap() {
      this.orderStatusMap = null;
    }

    /** Returns true if field orderStatusMap is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderStatusMap() {
      return this.orderStatusMap != null;
    }

    public void setOrderStatusMapIsSet(boolean value) {
      if (!value) {
        this.orderStatusMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_STATUS_MAP:
        if (value == null) {
          unsetOrderStatusMap();
        } else {
          setOrderStatusMap((Map<Long,OrderStatus>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_STATUS_MAP:
        return getOrderStatusMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_STATUS_MAP:
        return isSetOrderStatusMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderStatusesById_args)
        return this.equals((updateOrderStatusesById_args)that);
      return false;
    }

    public boolean equals(updateOrderStatusesById_args that) {
      if (that == null)
        return false;

      boolean this_present_orderStatusMap = true && this.isSetOrderStatusMap();
      boolean that_present_orderStatusMap = true && that.isSetOrderStatusMap();
      if (this_present_orderStatusMap || that_present_orderStatusMap) {
        if (!(this_present_orderStatusMap && that_present_orderStatusMap))
          return false;
        if (!this.orderStatusMap.equals(that.orderStatusMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateOrderStatusesById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderStatusMap()).compareTo(other.isSetOrderStatusMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderStatusMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderStatusMap, other.orderStatusMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderStatusesById_args(");
      boolean first = true;

      sb.append("orderStatusMap:");
      if (this.orderStatusMap == null) {
        sb.append("null");
      } else {
        sb.append(this.orderStatusMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderStatusesById_argsStandardSchemeFactory implements SchemeFactory {
      public updateOrderStatusesById_argsStandardScheme getScheme() {
        return new updateOrderStatusesById_argsStandardScheme();
      }
    }

    private static class updateOrderStatusesById_argsStandardScheme extends StandardScheme<updateOrderStatusesById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderStatusesById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_STATUS_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map152 = iprot.readMapBegin();
                  struct.orderStatusMap = new HashMap<Long,OrderStatus>(2*_map152.size);
                  for (int _i153 = 0; _i153 < _map152.size; ++_i153)
                  {
                    long _key154;
                    OrderStatus _val155;
                    _key154 = iprot.readI64();
                    _val155 = OrderStatus.findByValue(iprot.readI32());
                    struct.orderStatusMap.put(_key154, _val155);
                  }
                  iprot.readMapEnd();
                }
                struct.setOrderStatusMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderStatusesById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderStatusMap != null) {
          oprot.writeFieldBegin(ORDER_STATUS_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, struct.orderStatusMap.size()));
            for (Map.Entry<Long, OrderStatus> _iter156 : struct.orderStatusMap.entrySet())
            {
              oprot.writeI64(_iter156.getKey());
              oprot.writeI32(_iter156.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderStatusesById_argsTupleSchemeFactory implements SchemeFactory {
      public updateOrderStatusesById_argsTupleScheme getScheme() {
        return new updateOrderStatusesById_argsTupleScheme();
      }
    }

    private static class updateOrderStatusesById_argsTupleScheme extends TupleScheme<updateOrderStatusesById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderStatusesById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderStatusMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderStatusMap()) {
          {
            oprot.writeI32(struct.orderStatusMap.size());
            for (Map.Entry<Long, OrderStatus> _iter157 : struct.orderStatusMap.entrySet())
            {
              oprot.writeI64(_iter157.getKey());
              oprot.writeI32(_iter157.getValue().getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderStatusesById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map158 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.orderStatusMap = new HashMap<Long,OrderStatus>(2*_map158.size);
            for (int _i159 = 0; _i159 < _map158.size; ++_i159)
            {
              long _key160;
              OrderStatus _val161;
              _key160 = iprot.readI64();
              _val161 = OrderStatus.findByValue(iprot.readI32());
              struct.orderStatusMap.put(_key160, _val161);
            }
          }
          struct.setOrderStatusMapIsSet(true);
        }
      }
    }

  }

  public static class updateOrderStatusesById_result implements org.apache.thrift.TBase<updateOrderStatusesById_result, updateOrderStatusesById_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOrderStatusesById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOrderStatusesById_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOrderStatusesById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOrderStatusesById_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOrderStatusesById_result.class, metaDataMap);
    }

    public updateOrderStatusesById_result() {
    }

    public updateOrderStatusesById_result(
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOrderStatusesById_result(updateOrderStatusesById_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public updateOrderStatusesById_result deepCopy() {
      return new updateOrderStatusesById_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public updateOrderStatusesById_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOrderStatusesById_result)
        return this.equals((updateOrderStatusesById_result)that);
      return false;
    }

    public boolean equals(updateOrderStatusesById_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateOrderStatusesById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOrderStatusesById_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOrderStatusesById_resultStandardSchemeFactory implements SchemeFactory {
      public updateOrderStatusesById_resultStandardScheme getScheme() {
        return new updateOrderStatusesById_resultStandardScheme();
      }
    }

    private static class updateOrderStatusesById_resultStandardScheme extends StandardScheme<updateOrderStatusesById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOrderStatusesById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOrderStatusesById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOrderStatusesById_resultTupleSchemeFactory implements SchemeFactory {
      public updateOrderStatusesById_resultTupleScheme getScheme() {
        return new updateOrderStatusesById_resultTupleScheme();
      }
    }

    private static class updateOrderStatusesById_resultTupleScheme extends TupleScheme<updateOrderStatusesById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOrderStatusesById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOrderStatusesById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setDates_args implements org.apache.thrift.TBase<setDates_args, setDates_args._Fields>, java.io.Serializable, Cloneable, Comparable<setDates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDates_args");

    private static final org.apache.thrift.protocol.TField DATE_DATE_TYPE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("dateDateTypeMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDates_argsTupleSchemeFactory());
    }

    public Map<Integer,DateType> dateDateTypeMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE_DATE_TYPE_MAP((short)1, "dateDateTypeMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE_DATE_TYPE_MAP
            return DATE_DATE_TYPE_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE_DATE_TYPE_MAP, new org.apache.thrift.meta_data.FieldMetaData("dateDateTypeMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DateType.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDates_args.class, metaDataMap);
    }

    public setDates_args() {
    }

    public setDates_args(
      Map<Integer,DateType> dateDateTypeMap)
    {
      this();
      this.dateDateTypeMap = dateDateTypeMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDates_args(setDates_args other) {
      if (other.isSetDateDateTypeMap()) {
        Map<Integer,DateType> __this__dateDateTypeMap = new HashMap<Integer,DateType>(other.dateDateTypeMap.size());
        for (Map.Entry<Integer, DateType> other_element : other.dateDateTypeMap.entrySet()) {

          Integer other_element_key = other_element.getKey();
          DateType other_element_value = other_element.getValue();

          Integer __this__dateDateTypeMap_copy_key = other_element_key;

          DateType __this__dateDateTypeMap_copy_value = other_element_value;

          __this__dateDateTypeMap.put(__this__dateDateTypeMap_copy_key, __this__dateDateTypeMap_copy_value);
        }
        this.dateDateTypeMap = __this__dateDateTypeMap;
      }
    }

    public setDates_args deepCopy() {
      return new setDates_args(this);
    }

    @Override
    public void clear() {
      this.dateDateTypeMap = null;
    }

    public int getDateDateTypeMapSize() {
      return (this.dateDateTypeMap == null) ? 0 : this.dateDateTypeMap.size();
    }

    public void putToDateDateTypeMap(int key, DateType val) {
      if (this.dateDateTypeMap == null) {
        this.dateDateTypeMap = new HashMap<Integer,DateType>();
      }
      this.dateDateTypeMap.put(key, val);
    }

    public Map<Integer,DateType> getDateDateTypeMap() {
      return this.dateDateTypeMap;
    }

    public setDates_args setDateDateTypeMap(Map<Integer,DateType> dateDateTypeMap) {
      this.dateDateTypeMap = dateDateTypeMap;
      return this;
    }

    public void unsetDateDateTypeMap() {
      this.dateDateTypeMap = null;
    }

    /** Returns true if field dateDateTypeMap is set (has been assigned a value) and false otherwise */
    public boolean isSetDateDateTypeMap() {
      return this.dateDateTypeMap != null;
    }

    public void setDateDateTypeMapIsSet(boolean value) {
      if (!value) {
        this.dateDateTypeMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE_DATE_TYPE_MAP:
        if (value == null) {
          unsetDateDateTypeMap();
        } else {
          setDateDateTypeMap((Map<Integer,DateType>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE_DATE_TYPE_MAP:
        return getDateDateTypeMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE_DATE_TYPE_MAP:
        return isSetDateDateTypeMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDates_args)
        return this.equals((setDates_args)that);
      return false;
    }

    public boolean equals(setDates_args that) {
      if (that == null)
        return false;

      boolean this_present_dateDateTypeMap = true && this.isSetDateDateTypeMap();
      boolean that_present_dateDateTypeMap = true && that.isSetDateDateTypeMap();
      if (this_present_dateDateTypeMap || that_present_dateDateTypeMap) {
        if (!(this_present_dateDateTypeMap && that_present_dateDateTypeMap))
          return false;
        if (!this.dateDateTypeMap.equals(that.dateDateTypeMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDateDateTypeMap()).compareTo(other.isSetDateDateTypeMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateDateTypeMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateDateTypeMap, other.dateDateTypeMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDates_args(");
      boolean first = true;

      sb.append("dateDateTypeMap:");
      if (this.dateDateTypeMap == null) {
        sb.append("null");
      } else {
        sb.append(this.dateDateTypeMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDates_argsStandardSchemeFactory implements SchemeFactory {
      public setDates_argsStandardScheme getScheme() {
        return new setDates_argsStandardScheme();
      }
    }

    private static class setDates_argsStandardScheme extends StandardScheme<setDates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE_DATE_TYPE_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map162 = iprot.readMapBegin();
                  struct.dateDateTypeMap = new HashMap<Integer,DateType>(2*_map162.size);
                  for (int _i163 = 0; _i163 < _map162.size; ++_i163)
                  {
                    int _key164;
                    DateType _val165;
                    _key164 = iprot.readI32();
                    _val165 = DateType.findByValue(iprot.readI32());
                    struct.dateDateTypeMap.put(_key164, _val165);
                  }
                  iprot.readMapEnd();
                }
                struct.setDateDateTypeMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dateDateTypeMap != null) {
          oprot.writeFieldBegin(DATE_DATE_TYPE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.dateDateTypeMap.size()));
            for (Map.Entry<Integer, DateType> _iter166 : struct.dateDateTypeMap.entrySet())
            {
              oprot.writeI32(_iter166.getKey());
              oprot.writeI32(_iter166.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDates_argsTupleSchemeFactory implements SchemeFactory {
      public setDates_argsTupleScheme getScheme() {
        return new setDates_argsTupleScheme();
      }
    }

    private static class setDates_argsTupleScheme extends TupleScheme<setDates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDateDateTypeMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDateDateTypeMap()) {
          {
            oprot.writeI32(struct.dateDateTypeMap.size());
            for (Map.Entry<Integer, DateType> _iter167 : struct.dateDateTypeMap.entrySet())
            {
              oprot.writeI32(_iter167.getKey());
              oprot.writeI32(_iter167.getValue().getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map168 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.dateDateTypeMap = new HashMap<Integer,DateType>(2*_map168.size);
            for (int _i169 = 0; _i169 < _map168.size; ++_i169)
            {
              int _key170;
              DateType _val171;
              _key170 = iprot.readI32();
              _val171 = DateType.findByValue(iprot.readI32());
              struct.dateDateTypeMap.put(_key170, _val171);
            }
          }
          struct.setDateDateTypeMapIsSet(true);
        }
      }
    }

  }

  public static class setDates_result implements org.apache.thrift.TBase<setDates_result, setDates_result._Fields>, java.io.Serializable, Cloneable, Comparable<setDates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDates_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDates_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDates_result.class, metaDataMap);
    }

    public setDates_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDates_result(setDates_result other) {
    }

    public setDates_result deepCopy() {
      return new setDates_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDates_result)
        return this.equals((setDates_result)that);
      return false;
    }

    public boolean equals(setDates_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDates_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDates_resultStandardSchemeFactory implements SchemeFactory {
      public setDates_resultStandardScheme getScheme() {
        return new setDates_resultStandardScheme();
      }
    }

    private static class setDates_resultStandardScheme extends StandardScheme<setDates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDates_resultTupleSchemeFactory implements SchemeFactory {
      public setDates_resultTupleScheme getScheme() {
        return new setDates_resultTupleScheme();
      }
    }

    private static class setDates_resultTupleScheme extends TupleScheme<setDates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setDeliveryCosts_args implements org.apache.thrift.TBase<setDeliveryCosts_args, setDeliveryCosts_args._Fields>, java.io.Serializable, Cloneable, Comparable<setDeliveryCosts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeliveryCosts_args");

    private static final org.apache.thrift.protocol.TField NEW_DELIVERY_COSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("newDeliveryCosts", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeliveryCosts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeliveryCosts_argsTupleSchemeFactory());
    }

    public Map<DeliveryType,Double> newDeliveryCosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_DELIVERY_COSTS((short)1, "newDeliveryCosts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_DELIVERY_COSTS
            return NEW_DELIVERY_COSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_DELIVERY_COSTS, new org.apache.thrift.meta_data.FieldMetaData("newDeliveryCosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeliveryCosts_args.class, metaDataMap);
    }

    public setDeliveryCosts_args() {
    }

    public setDeliveryCosts_args(
      Map<DeliveryType,Double> newDeliveryCosts)
    {
      this();
      this.newDeliveryCosts = newDeliveryCosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeliveryCosts_args(setDeliveryCosts_args other) {
      if (other.isSetNewDeliveryCosts()) {
        Map<DeliveryType,Double> __this__newDeliveryCosts = new HashMap<DeliveryType,Double>(other.newDeliveryCosts.size());
        for (Map.Entry<DeliveryType, Double> other_element : other.newDeliveryCosts.entrySet()) {

          DeliveryType other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          DeliveryType __this__newDeliveryCosts_copy_key = other_element_key;

          Double __this__newDeliveryCosts_copy_value = other_element_value;

          __this__newDeliveryCosts.put(__this__newDeliveryCosts_copy_key, __this__newDeliveryCosts_copy_value);
        }
        this.newDeliveryCosts = __this__newDeliveryCosts;
      }
    }

    public setDeliveryCosts_args deepCopy() {
      return new setDeliveryCosts_args(this);
    }

    @Override
    public void clear() {
      this.newDeliveryCosts = null;
    }

    public int getNewDeliveryCostsSize() {
      return (this.newDeliveryCosts == null) ? 0 : this.newDeliveryCosts.size();
    }

    public void putToNewDeliveryCosts(DeliveryType key, double val) {
      if (this.newDeliveryCosts == null) {
        this.newDeliveryCosts = new HashMap<DeliveryType,Double>();
      }
      this.newDeliveryCosts.put(key, val);
    }

    public Map<DeliveryType,Double> getNewDeliveryCosts() {
      return this.newDeliveryCosts;
    }

    public setDeliveryCosts_args setNewDeliveryCosts(Map<DeliveryType,Double> newDeliveryCosts) {
      this.newDeliveryCosts = newDeliveryCosts;
      return this;
    }

    public void unsetNewDeliveryCosts() {
      this.newDeliveryCosts = null;
    }

    /** Returns true if field newDeliveryCosts is set (has been assigned a value) and false otherwise */
    public boolean isSetNewDeliveryCosts() {
      return this.newDeliveryCosts != null;
    }

    public void setNewDeliveryCostsIsSet(boolean value) {
      if (!value) {
        this.newDeliveryCosts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_DELIVERY_COSTS:
        if (value == null) {
          unsetNewDeliveryCosts();
        } else {
          setNewDeliveryCosts((Map<DeliveryType,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_DELIVERY_COSTS:
        return getNewDeliveryCosts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_DELIVERY_COSTS:
        return isSetNewDeliveryCosts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeliveryCosts_args)
        return this.equals((setDeliveryCosts_args)that);
      return false;
    }

    public boolean equals(setDeliveryCosts_args that) {
      if (that == null)
        return false;

      boolean this_present_newDeliveryCosts = true && this.isSetNewDeliveryCosts();
      boolean that_present_newDeliveryCosts = true && that.isSetNewDeliveryCosts();
      if (this_present_newDeliveryCosts || that_present_newDeliveryCosts) {
        if (!(this_present_newDeliveryCosts && that_present_newDeliveryCosts))
          return false;
        if (!this.newDeliveryCosts.equals(that.newDeliveryCosts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDeliveryCosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewDeliveryCosts()).compareTo(other.isSetNewDeliveryCosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewDeliveryCosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newDeliveryCosts, other.newDeliveryCosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeliveryCosts_args(");
      boolean first = true;

      sb.append("newDeliveryCosts:");
      if (this.newDeliveryCosts == null) {
        sb.append("null");
      } else {
        sb.append(this.newDeliveryCosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeliveryCosts_argsStandardSchemeFactory implements SchemeFactory {
      public setDeliveryCosts_argsStandardScheme getScheme() {
        return new setDeliveryCosts_argsStandardScheme();
      }
    }

    private static class setDeliveryCosts_argsStandardScheme extends StandardScheme<setDeliveryCosts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeliveryCosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_DELIVERY_COSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map172 = iprot.readMapBegin();
                  struct.newDeliveryCosts = new HashMap<DeliveryType,Double>(2*_map172.size);
                  for (int _i173 = 0; _i173 < _map172.size; ++_i173)
                  {
                    DeliveryType _key174;
                    double _val175;
                    _key174 = DeliveryType.findByValue(iprot.readI32());
                    _val175 = iprot.readDouble();
                    struct.newDeliveryCosts.put(_key174, _val175);
                  }
                  iprot.readMapEnd();
                }
                struct.setNewDeliveryCostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeliveryCosts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newDeliveryCosts != null) {
          oprot.writeFieldBegin(NEW_DELIVERY_COSTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.newDeliveryCosts.size()));
            for (Map.Entry<DeliveryType, Double> _iter176 : struct.newDeliveryCosts.entrySet())
            {
              oprot.writeI32(_iter176.getKey().getValue());
              oprot.writeDouble(_iter176.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeliveryCosts_argsTupleSchemeFactory implements SchemeFactory {
      public setDeliveryCosts_argsTupleScheme getScheme() {
        return new setDeliveryCosts_argsTupleScheme();
      }
    }

    private static class setDeliveryCosts_argsTupleScheme extends TupleScheme<setDeliveryCosts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeliveryCosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewDeliveryCosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewDeliveryCosts()) {
          {
            oprot.writeI32(struct.newDeliveryCosts.size());
            for (Map.Entry<DeliveryType, Double> _iter177 : struct.newDeliveryCosts.entrySet())
            {
              oprot.writeI32(_iter177.getKey().getValue());
              oprot.writeDouble(_iter177.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeliveryCosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.newDeliveryCosts = new HashMap<DeliveryType,Double>(2*_map178.size);
            for (int _i179 = 0; _i179 < _map178.size; ++_i179)
            {
              DeliveryType _key180;
              double _val181;
              _key180 = DeliveryType.findByValue(iprot.readI32());
              _val181 = iprot.readDouble();
              struct.newDeliveryCosts.put(_key180, _val181);
            }
          }
          struct.setNewDeliveryCostsIsSet(true);
        }
      }
    }

  }

  public static class setDeliveryCosts_result implements org.apache.thrift.TBase<setDeliveryCosts_result, setDeliveryCosts_result._Fields>, java.io.Serializable, Cloneable, Comparable<setDeliveryCosts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeliveryCosts_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeliveryCosts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeliveryCosts_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeliveryCosts_result.class, metaDataMap);
    }

    public setDeliveryCosts_result() {
    }

    public setDeliveryCosts_result(
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeliveryCosts_result(setDeliveryCosts_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setDeliveryCosts_result deepCopy() {
      return new setDeliveryCosts_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setDeliveryCosts_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeliveryCosts_result)
        return this.equals((setDeliveryCosts_result)that);
      return false;
    }

    public boolean equals(setDeliveryCosts_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDeliveryCosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeliveryCosts_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeliveryCosts_resultStandardSchemeFactory implements SchemeFactory {
      public setDeliveryCosts_resultStandardScheme getScheme() {
        return new setDeliveryCosts_resultStandardScheme();
      }
    }

    private static class setDeliveryCosts_resultStandardScheme extends StandardScheme<setDeliveryCosts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeliveryCosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeliveryCosts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeliveryCosts_resultTupleSchemeFactory implements SchemeFactory {
      public setDeliveryCosts_resultTupleScheme getScheme() {
        return new setDeliveryCosts_resultTupleScheme();
      }
    }

    private static class setDeliveryCosts_resultTupleScheme extends TupleScheme<setDeliveryCosts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeliveryCosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeliveryCosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setPaymentTypesCosts_args implements org.apache.thrift.TBase<setPaymentTypesCosts_args, setPaymentTypesCosts_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPaymentTypesCosts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPaymentTypesCosts_args");

    private static final org.apache.thrift.protocol.TField NEW_PAYMENT_TYPE_COSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("newPaymentTypeCosts", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPaymentTypesCosts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPaymentTypesCosts_argsTupleSchemeFactory());
    }

    public Map<PaymentType,Double> newPaymentTypeCosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_PAYMENT_TYPE_COSTS((short)1, "newPaymentTypeCosts");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_PAYMENT_TYPE_COSTS
            return NEW_PAYMENT_TYPE_COSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_PAYMENT_TYPE_COSTS, new org.apache.thrift.meta_data.FieldMetaData("newPaymentTypeCosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPaymentTypesCosts_args.class, metaDataMap);
    }

    public setPaymentTypesCosts_args() {
    }

    public setPaymentTypesCosts_args(
      Map<PaymentType,Double> newPaymentTypeCosts)
    {
      this();
      this.newPaymentTypeCosts = newPaymentTypeCosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPaymentTypesCosts_args(setPaymentTypesCosts_args other) {
      if (other.isSetNewPaymentTypeCosts()) {
        Map<PaymentType,Double> __this__newPaymentTypeCosts = new HashMap<PaymentType,Double>(other.newPaymentTypeCosts.size());
        for (Map.Entry<PaymentType, Double> other_element : other.newPaymentTypeCosts.entrySet()) {

          PaymentType other_element_key = other_element.getKey();
          Double other_element_value = other_element.getValue();

          PaymentType __this__newPaymentTypeCosts_copy_key = other_element_key;

          Double __this__newPaymentTypeCosts_copy_value = other_element_value;

          __this__newPaymentTypeCosts.put(__this__newPaymentTypeCosts_copy_key, __this__newPaymentTypeCosts_copy_value);
        }
        this.newPaymentTypeCosts = __this__newPaymentTypeCosts;
      }
    }

    public setPaymentTypesCosts_args deepCopy() {
      return new setPaymentTypesCosts_args(this);
    }

    @Override
    public void clear() {
      this.newPaymentTypeCosts = null;
    }

    public int getNewPaymentTypeCostsSize() {
      return (this.newPaymentTypeCosts == null) ? 0 : this.newPaymentTypeCosts.size();
    }

    public void putToNewPaymentTypeCosts(PaymentType key, double val) {
      if (this.newPaymentTypeCosts == null) {
        this.newPaymentTypeCosts = new HashMap<PaymentType,Double>();
      }
      this.newPaymentTypeCosts.put(key, val);
    }

    public Map<PaymentType,Double> getNewPaymentTypeCosts() {
      return this.newPaymentTypeCosts;
    }

    public setPaymentTypesCosts_args setNewPaymentTypeCosts(Map<PaymentType,Double> newPaymentTypeCosts) {
      this.newPaymentTypeCosts = newPaymentTypeCosts;
      return this;
    }

    public void unsetNewPaymentTypeCosts() {
      this.newPaymentTypeCosts = null;
    }

    /** Returns true if field newPaymentTypeCosts is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPaymentTypeCosts() {
      return this.newPaymentTypeCosts != null;
    }

    public void setNewPaymentTypeCostsIsSet(boolean value) {
      if (!value) {
        this.newPaymentTypeCosts = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_PAYMENT_TYPE_COSTS:
        if (value == null) {
          unsetNewPaymentTypeCosts();
        } else {
          setNewPaymentTypeCosts((Map<PaymentType,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_PAYMENT_TYPE_COSTS:
        return getNewPaymentTypeCosts();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_PAYMENT_TYPE_COSTS:
        return isSetNewPaymentTypeCosts();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPaymentTypesCosts_args)
        return this.equals((setPaymentTypesCosts_args)that);
      return false;
    }

    public boolean equals(setPaymentTypesCosts_args that) {
      if (that == null)
        return false;

      boolean this_present_newPaymentTypeCosts = true && this.isSetNewPaymentTypeCosts();
      boolean that_present_newPaymentTypeCosts = true && that.isSetNewPaymentTypeCosts();
      if (this_present_newPaymentTypeCosts || that_present_newPaymentTypeCosts) {
        if (!(this_present_newPaymentTypeCosts && that_present_newPaymentTypeCosts))
          return false;
        if (!this.newPaymentTypeCosts.equals(that.newPaymentTypeCosts))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setPaymentTypesCosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewPaymentTypeCosts()).compareTo(other.isSetNewPaymentTypeCosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPaymentTypeCosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPaymentTypeCosts, other.newPaymentTypeCosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPaymentTypesCosts_args(");
      boolean first = true;

      sb.append("newPaymentTypeCosts:");
      if (this.newPaymentTypeCosts == null) {
        sb.append("null");
      } else {
        sb.append(this.newPaymentTypeCosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPaymentTypesCosts_argsStandardSchemeFactory implements SchemeFactory {
      public setPaymentTypesCosts_argsStandardScheme getScheme() {
        return new setPaymentTypesCosts_argsStandardScheme();
      }
    }

    private static class setPaymentTypesCosts_argsStandardScheme extends StandardScheme<setPaymentTypesCosts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPaymentTypesCosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_PAYMENT_TYPE_COSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin();
                  struct.newPaymentTypeCosts = new HashMap<PaymentType,Double>(2*_map182.size);
                  for (int _i183 = 0; _i183 < _map182.size; ++_i183)
                  {
                    PaymentType _key184;
                    double _val185;
                    _key184 = PaymentType.findByValue(iprot.readI32());
                    _val185 = iprot.readDouble();
                    struct.newPaymentTypeCosts.put(_key184, _val185);
                  }
                  iprot.readMapEnd();
                }
                struct.setNewPaymentTypeCostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPaymentTypesCosts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newPaymentTypeCosts != null) {
          oprot.writeFieldBegin(NEW_PAYMENT_TYPE_COSTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.newPaymentTypeCosts.size()));
            for (Map.Entry<PaymentType, Double> _iter186 : struct.newPaymentTypeCosts.entrySet())
            {
              oprot.writeI32(_iter186.getKey().getValue());
              oprot.writeDouble(_iter186.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPaymentTypesCosts_argsTupleSchemeFactory implements SchemeFactory {
      public setPaymentTypesCosts_argsTupleScheme getScheme() {
        return new setPaymentTypesCosts_argsTupleScheme();
      }
    }

    private static class setPaymentTypesCosts_argsTupleScheme extends TupleScheme<setPaymentTypesCosts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPaymentTypesCosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewPaymentTypeCosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewPaymentTypeCosts()) {
          {
            oprot.writeI32(struct.newPaymentTypeCosts.size());
            for (Map.Entry<PaymentType, Double> _iter187 : struct.newPaymentTypeCosts.entrySet())
            {
              oprot.writeI32(_iter187.getKey().getValue());
              oprot.writeDouble(_iter187.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPaymentTypesCosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.newPaymentTypeCosts = new HashMap<PaymentType,Double>(2*_map188.size);
            for (int _i189 = 0; _i189 < _map188.size; ++_i189)
            {
              PaymentType _key190;
              double _val191;
              _key190 = PaymentType.findByValue(iprot.readI32());
              _val191 = iprot.readDouble();
              struct.newPaymentTypeCosts.put(_key190, _val191);
            }
          }
          struct.setNewPaymentTypeCostsIsSet(true);
        }
      }
    }

  }

  public static class setPaymentTypesCosts_result implements org.apache.thrift.TBase<setPaymentTypesCosts_result, setPaymentTypesCosts_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPaymentTypesCosts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPaymentTypesCosts_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPaymentTypesCosts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPaymentTypesCosts_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPaymentTypesCosts_result.class, metaDataMap);
    }

    public setPaymentTypesCosts_result() {
    }

    public setPaymentTypesCosts_result(
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPaymentTypesCosts_result(setPaymentTypesCosts_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setPaymentTypesCosts_result deepCopy() {
      return new setPaymentTypesCosts_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setPaymentTypesCosts_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPaymentTypesCosts_result)
        return this.equals((setPaymentTypesCosts_result)that);
      return false;
    }

    public boolean equals(setPaymentTypesCosts_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setPaymentTypesCosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPaymentTypesCosts_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPaymentTypesCosts_resultStandardSchemeFactory implements SchemeFactory {
      public setPaymentTypesCosts_resultStandardScheme getScheme() {
        return new setPaymentTypesCosts_resultStandardScheme();
      }
    }

    private static class setPaymentTypesCosts_resultStandardScheme extends StandardScheme<setPaymentTypesCosts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPaymentTypesCosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPaymentTypesCosts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPaymentTypesCosts_resultTupleSchemeFactory implements SchemeFactory {
      public setPaymentTypesCosts_resultTupleScheme getScheme() {
        return new setPaymentTypesCosts_resultTupleScheme();
      }
    }

    private static class setPaymentTypesCosts_resultTupleScheme extends TupleScheme<setPaymentTypesCosts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPaymentTypesCosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPaymentTypesCosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setOrderPaymentStatus_args implements org.apache.thrift.TBase<setOrderPaymentStatus_args, setOrderPaymentStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderPaymentStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderPaymentStatus_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("newStatus", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderPaymentStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderPaymentStatus_argsTupleSchemeFactory());
    }

    public long orderId; // required
    /**
     * 
     * @see PaymentStatus
     */
    public PaymentStatus newStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      /**
       * 
       * @see PaymentStatus
       */
      NEW_STATUS((short)2, "newStatus");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // NEW_STATUS
            return NEW_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("newStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderPaymentStatus_args.class, metaDataMap);
    }

    public setOrderPaymentStatus_args() {
    }

    public setOrderPaymentStatus_args(
      long orderId,
      PaymentStatus newStatus)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
      this.newStatus = newStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderPaymentStatus_args(setOrderPaymentStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
      if (other.isSetNewStatus()) {
        this.newStatus = other.newStatus;
      }
    }

    public setOrderPaymentStatus_args deepCopy() {
      return new setOrderPaymentStatus_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
      this.newStatus = null;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public setOrderPaymentStatus_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    /**
     * 
     * @see PaymentStatus
     */
    public PaymentStatus getNewStatus() {
      return this.newStatus;
    }

    /**
     * 
     * @see PaymentStatus
     */
    public setOrderPaymentStatus_args setNewStatus(PaymentStatus newStatus) {
      this.newStatus = newStatus;
      return this;
    }

    public void unsetNewStatus() {
      this.newStatus = null;
    }

    /** Returns true if field newStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetNewStatus() {
      return this.newStatus != null;
    }

    public void setNewStatusIsSet(boolean value) {
      if (!value) {
        this.newStatus = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      case NEW_STATUS:
        if (value == null) {
          unsetNewStatus();
        } else {
          setNewStatus((PaymentStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return Long.valueOf(getOrderId());

      case NEW_STATUS:
        return getNewStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case NEW_STATUS:
        return isSetNewStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderPaymentStatus_args)
        return this.equals((setOrderPaymentStatus_args)that);
      return false;
    }

    public boolean equals(setOrderPaymentStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      boolean this_present_newStatus = true && this.isSetNewStatus();
      boolean that_present_newStatus = true && that.isSetNewStatus();
      if (this_present_newStatus || that_present_newStatus) {
        if (!(this_present_newStatus && that_present_newStatus))
          return false;
        if (!this.newStatus.equals(that.newStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderPaymentStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNewStatus()).compareTo(other.isSetNewStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newStatus, other.newStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderPaymentStatus_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("newStatus:");
      if (this.newStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.newStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderPaymentStatus_argsStandardSchemeFactory implements SchemeFactory {
      public setOrderPaymentStatus_argsStandardScheme getScheme() {
        return new setOrderPaymentStatus_argsStandardScheme();
      }
    }

    private static class setOrderPaymentStatus_argsStandardScheme extends StandardScheme<setOrderPaymentStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderPaymentStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newStatus = PaymentStatus.findByValue(iprot.readI32());
                struct.setNewStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderPaymentStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        if (struct.newStatus != null) {
          oprot.writeFieldBegin(NEW_STATUS_FIELD_DESC);
          oprot.writeI32(struct.newStatus.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderPaymentStatus_argsTupleSchemeFactory implements SchemeFactory {
      public setOrderPaymentStatus_argsTupleScheme getScheme() {
        return new setOrderPaymentStatus_argsTupleScheme();
      }
    }

    private static class setOrderPaymentStatus_argsTupleScheme extends TupleScheme<setOrderPaymentStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetNewStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
        if (struct.isSetNewStatus()) {
          oprot.writeI32(struct.newStatus.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newStatus = PaymentStatus.findByValue(iprot.readI32());
          struct.setNewStatusIsSet(true);
        }
      }
    }

  }

  public static class setOrderPaymentStatus_result implements org.apache.thrift.TBase<setOrderPaymentStatus_result, setOrderPaymentStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderPaymentStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderPaymentStatus_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderPaymentStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderPaymentStatus_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderPaymentStatus_result.class, metaDataMap);
    }

    public setOrderPaymentStatus_result() {
    }

    public setOrderPaymentStatus_result(
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderPaymentStatus_result(setOrderPaymentStatus_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setOrderPaymentStatus_result deepCopy() {
      return new setOrderPaymentStatus_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setOrderPaymentStatus_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderPaymentStatus_result)
        return this.equals((setOrderPaymentStatus_result)that);
      return false;
    }

    public boolean equals(setOrderPaymentStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderPaymentStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderPaymentStatus_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderPaymentStatus_resultStandardSchemeFactory implements SchemeFactory {
      public setOrderPaymentStatus_resultStandardScheme getScheme() {
        return new setOrderPaymentStatus_resultStandardScheme();
      }
    }

    private static class setOrderPaymentStatus_resultStandardScheme extends StandardScheme<setOrderPaymentStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderPaymentStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderPaymentStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderPaymentStatus_resultTupleSchemeFactory implements SchemeFactory {
      public setOrderPaymentStatus_resultTupleScheme getScheme() {
        return new setOrderPaymentStatus_resultTupleScheme();
      }
    }

    private static class setOrderPaymentStatus_resultTupleScheme extends TupleScheme<setOrderPaymentStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setProductPrices_args implements org.apache.thrift.TBase<setProductPrices_args, setProductPrices_args._Fields>, java.io.Serializable, Cloneable, Comparable<setProductPrices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProductPrices_args");

    private static final org.apache.thrift.protocol.TField NEW_PRICES_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("newPricesMap", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProductPrices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProductPrices_argsTupleSchemeFactory());
    }

    public Map<Long,Map<PriceType,Double>> newPricesMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_PRICES_MAP((short)1, "newPricesMap");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_PRICES_MAP
            return NEW_PRICES_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_PRICES_MAP, new org.apache.thrift.meta_data.FieldMetaData("newPricesMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceType.class), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProductPrices_args.class, metaDataMap);
    }

    public setProductPrices_args() {
    }

    public setProductPrices_args(
      Map<Long,Map<PriceType,Double>> newPricesMap)
    {
      this();
      this.newPricesMap = newPricesMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProductPrices_args(setProductPrices_args other) {
      if (other.isSetNewPricesMap()) {
        Map<Long,Map<PriceType,Double>> __this__newPricesMap = new HashMap<Long,Map<PriceType,Double>>(other.newPricesMap.size());
        for (Map.Entry<Long, Map<PriceType,Double>> other_element : other.newPricesMap.entrySet()) {

          Long other_element_key = other_element.getKey();
          Map<PriceType,Double> other_element_value = other_element.getValue();

          Long __this__newPricesMap_copy_key = other_element_key;

          Map<PriceType,Double> __this__newPricesMap_copy_value = new HashMap<PriceType,Double>(other_element_value.size());
          for (Map.Entry<PriceType, Double> other_element_value_element : other_element_value.entrySet()) {

            PriceType other_element_value_element_key = other_element_value_element.getKey();
            Double other_element_value_element_value = other_element_value_element.getValue();

            PriceType __this__newPricesMap_copy_value_copy_key = other_element_value_element_key;

            Double __this__newPricesMap_copy_value_copy_value = other_element_value_element_value;

            __this__newPricesMap_copy_value.put(__this__newPricesMap_copy_value_copy_key, __this__newPricesMap_copy_value_copy_value);
          }

          __this__newPricesMap.put(__this__newPricesMap_copy_key, __this__newPricesMap_copy_value);
        }
        this.newPricesMap = __this__newPricesMap;
      }
    }

    public setProductPrices_args deepCopy() {
      return new setProductPrices_args(this);
    }

    @Override
    public void clear() {
      this.newPricesMap = null;
    }

    public int getNewPricesMapSize() {
      return (this.newPricesMap == null) ? 0 : this.newPricesMap.size();
    }

    public void putToNewPricesMap(long key, Map<PriceType,Double> val) {
      if (this.newPricesMap == null) {
        this.newPricesMap = new HashMap<Long,Map<PriceType,Double>>();
      }
      this.newPricesMap.put(key, val);
    }

    public Map<Long,Map<PriceType,Double>> getNewPricesMap() {
      return this.newPricesMap;
    }

    public setProductPrices_args setNewPricesMap(Map<Long,Map<PriceType,Double>> newPricesMap) {
      this.newPricesMap = newPricesMap;
      return this;
    }

    public void unsetNewPricesMap() {
      this.newPricesMap = null;
    }

    /** Returns true if field newPricesMap is set (has been assigned a value) and false otherwise */
    public boolean isSetNewPricesMap() {
      return this.newPricesMap != null;
    }

    public void setNewPricesMapIsSet(boolean value) {
      if (!value) {
        this.newPricesMap = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_PRICES_MAP:
        if (value == null) {
          unsetNewPricesMap();
        } else {
          setNewPricesMap((Map<Long,Map<PriceType,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_PRICES_MAP:
        return getNewPricesMap();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_PRICES_MAP:
        return isSetNewPricesMap();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProductPrices_args)
        return this.equals((setProductPrices_args)that);
      return false;
    }

    public boolean equals(setProductPrices_args that) {
      if (that == null)
        return false;

      boolean this_present_newPricesMap = true && this.isSetNewPricesMap();
      boolean that_present_newPricesMap = true && that.isSetNewPricesMap();
      if (this_present_newPricesMap || that_present_newPricesMap) {
        if (!(this_present_newPricesMap && that_present_newPricesMap))
          return false;
        if (!this.newPricesMap.equals(that.newPricesMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setProductPrices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewPricesMap()).compareTo(other.isSetNewPricesMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewPricesMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPricesMap, other.newPricesMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProductPrices_args(");
      boolean first = true;

      sb.append("newPricesMap:");
      if (this.newPricesMap == null) {
        sb.append("null");
      } else {
        sb.append(this.newPricesMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProductPrices_argsStandardSchemeFactory implements SchemeFactory {
      public setProductPrices_argsStandardScheme getScheme() {
        return new setProductPrices_argsStandardScheme();
      }
    }

    private static class setProductPrices_argsStandardScheme extends StandardScheme<setProductPrices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProductPrices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_PRICES_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                  struct.newPricesMap = new HashMap<Long,Map<PriceType,Double>>(2*_map192.size);
                  for (int _i193 = 0; _i193 < _map192.size; ++_i193)
                  {
                    long _key194;
                    Map<PriceType,Double> _val195;
                    _key194 = iprot.readI64();
                    {
                      org.apache.thrift.protocol.TMap _map196 = iprot.readMapBegin();
                      _val195 = new HashMap<PriceType,Double>(2*_map196.size);
                      for (int _i197 = 0; _i197 < _map196.size; ++_i197)
                      {
                        PriceType _key198;
                        double _val199;
                        _key198 = PriceType.findByValue(iprot.readI32());
                        _val199 = iprot.readDouble();
                        _val195.put(_key198, _val199);
                      }
                      iprot.readMapEnd();
                    }
                    struct.newPricesMap.put(_key194, _val195);
                  }
                  iprot.readMapEnd();
                }
                struct.setNewPricesMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProductPrices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newPricesMap != null) {
          oprot.writeFieldBegin(NEW_PRICES_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, struct.newPricesMap.size()));
            for (Map.Entry<Long, Map<PriceType,Double>> _iter200 : struct.newPricesMap.entrySet())
            {
              oprot.writeI64(_iter200.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter200.getValue().size()));
                for (Map.Entry<PriceType, Double> _iter201 : _iter200.getValue().entrySet())
                {
                  oprot.writeI32(_iter201.getKey().getValue());
                  oprot.writeDouble(_iter201.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProductPrices_argsTupleSchemeFactory implements SchemeFactory {
      public setProductPrices_argsTupleScheme getScheme() {
        return new setProductPrices_argsTupleScheme();
      }
    }

    private static class setProductPrices_argsTupleScheme extends TupleScheme<setProductPrices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProductPrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewPricesMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewPricesMap()) {
          {
            oprot.writeI32(struct.newPricesMap.size());
            for (Map.Entry<Long, Map<PriceType,Double>> _iter202 : struct.newPricesMap.entrySet())
            {
              oprot.writeI64(_iter202.getKey());
              {
                oprot.writeI32(_iter202.getValue().size());
                for (Map.Entry<PriceType, Double> _iter203 : _iter202.getValue().entrySet())
                {
                  oprot.writeI32(_iter203.getKey().getValue());
                  oprot.writeDouble(_iter203.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProductPrices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map204 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.newPricesMap = new HashMap<Long,Map<PriceType,Double>>(2*_map204.size);
            for (int _i205 = 0; _i205 < _map204.size; ++_i205)
            {
              long _key206;
              Map<PriceType,Double> _val207;
              _key206 = iprot.readI64();
              {
                org.apache.thrift.protocol.TMap _map208 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val207 = new HashMap<PriceType,Double>(2*_map208.size);
                for (int _i209 = 0; _i209 < _map208.size; ++_i209)
                {
                  PriceType _key210;
                  double _val211;
                  _key210 = PriceType.findByValue(iprot.readI32());
                  _val211 = iprot.readDouble();
                  _val207.put(_key210, _val211);
                }
              }
              struct.newPricesMap.put(_key206, _val207);
            }
          }
          struct.setNewPricesMapIsSet(true);
        }
      }
    }

  }

  public static class setProductPrices_result implements org.apache.thrift.TBase<setProductPrices_result, setProductPrices_result._Fields>, java.io.Serializable, Cloneable, Comparable<setProductPrices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setProductPrices_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setProductPrices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setProductPrices_resultTupleSchemeFactory());
    }

    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setProductPrices_result.class, metaDataMap);
    }

    public setProductPrices_result() {
    }

    public setProductPrices_result(
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setProductPrices_result(setProductPrices_result other) {
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setProductPrices_result deepCopy() {
      return new setProductPrices_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setProductPrices_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setProductPrices_result)
        return this.equals((setProductPrices_result)that);
      return false;
    }

    public boolean equals(setProductPrices_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setProductPrices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setProductPrices_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setProductPrices_resultStandardSchemeFactory implements SchemeFactory {
      public setProductPrices_resultStandardScheme getScheme() {
        return new setProductPrices_resultStandardScheme();
      }
    }

    private static class setProductPrices_resultStandardScheme extends StandardScheme<setProductPrices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setProductPrices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setProductPrices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setProductPrices_resultTupleSchemeFactory implements SchemeFactory {
      public setProductPrices_resultTupleScheme getScheme() {
        return new setProductPrices_resultTupleScheme();
      }
    }

    private static class setProductPrices_resultTupleScheme extends TupleScheme<setProductPrices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setProductPrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setProductPrices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getShops_args implements org.apache.thrift.TBase<getShops_args, getShops_args._Fields>, java.io.Serializable, Cloneable, Comparable<getShops_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShops_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShops_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShops_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShops_args.class, metaDataMap);
    }

    public getShops_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShops_args(getShops_args other) {
    }

    public getShops_args deepCopy() {
      return new getShops_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShops_args)
        return this.equals((getShops_args)that);
      return false;
    }

    public boolean equals(getShops_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getShops_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShops_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShops_argsStandardSchemeFactory implements SchemeFactory {
      public getShops_argsStandardScheme getScheme() {
        return new getShops_argsStandardScheme();
      }
    }

    private static class getShops_argsStandardScheme extends StandardScheme<getShops_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShops_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShops_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShops_argsTupleSchemeFactory implements SchemeFactory {
      public getShops_argsTupleScheme getScheme() {
        return new getShops_argsTupleScheme();
      }
    }

    private static class getShops_argsTupleScheme extends TupleScheme<getShops_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShops_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShops_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getShops_result implements org.apache.thrift.TBase<getShops_result, getShops_result._Fields>, java.io.Serializable, Cloneable, Comparable<getShops_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShops_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShops_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShops_resultTupleSchemeFactory());
    }

    public List<Shop> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shop.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShops_result.class, metaDataMap);
    }

    public getShops_result() {
    }

    public getShops_result(
      List<Shop> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShops_result(getShops_result other) {
      if (other.isSetSuccess()) {
        List<Shop> __this__success = new ArrayList<Shop>(other.success.size());
        for (Shop other_element : other.success) {
          __this__success.add(new Shop(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getShops_result deepCopy() {
      return new getShops_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Shop> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Shop elem) {
      if (this.success == null) {
        this.success = new ArrayList<Shop>();
      }
      this.success.add(elem);
    }

    public List<Shop> getSuccess() {
      return this.success;
    }

    public getShops_result setSuccess(List<Shop> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getShops_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Shop>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShops_result)
        return this.equals((getShops_result)that);
      return false;
    }

    public boolean equals(getShops_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getShops_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShops_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShops_resultStandardSchemeFactory implements SchemeFactory {
      public getShops_resultStandardScheme getScheme() {
        return new getShops_resultStandardScheme();
      }
    }

    private static class getShops_resultStandardScheme extends StandardScheme<getShops_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShops_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list212 = iprot.readListBegin();
                  struct.success = new ArrayList<Shop>(_list212.size);
                  for (int _i213 = 0; _i213 < _list212.size; ++_i213)
                  {
                    Shop _elem214;
                    _elem214 = new Shop();
                    _elem214.read(iprot);
                    struct.success.add(_elem214);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShops_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Shop _iter215 : struct.success)
            {
              _iter215.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShops_resultTupleSchemeFactory implements SchemeFactory {
      public getShops_resultTupleScheme getScheme() {
        return new getShops_resultTupleScheme();
      }
    }

    private static class getShops_resultTupleScheme extends TupleScheme<getShops_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShops_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Shop _iter216 : struct.success)
            {
              _iter216.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShops_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list217 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Shop>(_list217.size);
            for (int _i218 = 0; _i218 < _list217.size; ++_i218)
            {
              Shop _elem219;
              _elem219 = new Shop();
              _elem219.read(iprot);
              struct.success.add(_elem219);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getDates_args implements org.apache.thrift.TBase<getDates_args, getDates_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDates_args");

    private static final org.apache.thrift.protocol.TField FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("from", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TO_FIELD_DESC = new org.apache.thrift.protocol.TField("to", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDates_argsTupleSchemeFactory());
    }

    public int from; // required
    public int to; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FROM((short)1, "from"),
      TO((short)2, "to");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FROM
            return FROM;
          case 2: // TO
            return TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FROM_ISSET_ID = 0;
    private static final int __TO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FROM, new org.apache.thrift.meta_data.FieldMetaData("from", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TO, new org.apache.thrift.meta_data.FieldMetaData("to", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDates_args.class, metaDataMap);
    }

    public getDates_args() {
    }

    public getDates_args(
      int from,
      int to)
    {
      this();
      this.from = from;
      setFromIsSet(true);
      this.to = to;
      setToIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDates_args(getDates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.from = other.from;
      this.to = other.to;
    }

    public getDates_args deepCopy() {
      return new getDates_args(this);
    }

    @Override
    public void clear() {
      setFromIsSet(false);
      this.from = 0;
      setToIsSet(false);
      this.to = 0;
    }

    public int getFrom() {
      return this.from;
    }

    public getDates_args setFrom(int from) {
      this.from = from;
      setFromIsSet(true);
      return this;
    }

    public void unsetFrom() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROM_ISSET_ID);
    }

    /** Returns true if field from is set (has been assigned a value) and false otherwise */
    public boolean isSetFrom() {
      return EncodingUtils.testBit(__isset_bitfield, __FROM_ISSET_ID);
    }

    public void setFromIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROM_ISSET_ID, value);
    }

    public int getTo() {
      return this.to;
    }

    public getDates_args setTo(int to) {
      this.to = to;
      setToIsSet(true);
      return this;
    }

    public void unsetTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TO_ISSET_ID);
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return EncodingUtils.testBit(__isset_bitfield, __TO_ISSET_ID);
    }

    public void setToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FROM:
        if (value == null) {
          unsetFrom();
        } else {
          setFrom((Integer)value);
        }
        break;

      case TO:
        if (value == null) {
          unsetTo();
        } else {
          setTo((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FROM:
        return Integer.valueOf(getFrom());

      case TO:
        return Integer.valueOf(getTo());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FROM:
        return isSetFrom();
      case TO:
        return isSetTo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDates_args)
        return this.equals((getDates_args)that);
      return false;
    }

    public boolean equals(getDates_args that) {
      if (that == null)
        return false;

      boolean this_present_from = true;
      boolean that_present_from = true;
      if (this_present_from || that_present_from) {
        if (!(this_present_from && that_present_from))
          return false;
        if (this.from != that.from)
          return false;
      }

      boolean this_present_to = true;
      boolean that_present_to = true;
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (this.to != that.to)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFrom()).compareTo(other.isSetFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.from, other.from);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTo()).compareTo(other.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to, other.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDates_args(");
      boolean first = true;

      sb.append("from:");
      sb.append(this.from);
      first = false;
      if (!first) sb.append(", ");
      sb.append("to:");
      sb.append(this.to);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDates_argsStandardSchemeFactory implements SchemeFactory {
      public getDates_argsStandardScheme getScheme() {
        return new getDates_argsStandardScheme();
      }
    }

    private static class getDates_argsStandardScheme extends StandardScheme<getDates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.from = iprot.readI32();
                struct.setFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.to = iprot.readI32();
                struct.setToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FROM_FIELD_DESC);
        oprot.writeI32(struct.from);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeI32(struct.to);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDates_argsTupleSchemeFactory implements SchemeFactory {
      public getDates_argsTupleScheme getScheme() {
        return new getDates_argsTupleScheme();
      }
    }

    private static class getDates_argsTupleScheme extends TupleScheme<getDates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFrom()) {
          optionals.set(0);
        }
        if (struct.isSetTo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFrom()) {
          oprot.writeI32(struct.from);
        }
        if (struct.isSetTo()) {
          oprot.writeI32(struct.to);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.from = iprot.readI32();
          struct.setFromIsSet(true);
        }
        if (incoming.get(1)) {
          struct.to = iprot.readI32();
          struct.setToIsSet(true);
        }
      }
    }

  }

  public static class getDates_result implements org.apache.thrift.TBase<getDates_result, getDates_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDates_resultTupleSchemeFactory());
    }

    public Map<Integer,DateType> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DateType.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDates_result.class, metaDataMap);
    }

    public getDates_result() {
    }

    public getDates_result(
      Map<Integer,DateType> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDates_result(getDates_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,DateType> __this__success = new HashMap<Integer,DateType>(other.success.size());
        for (Map.Entry<Integer, DateType> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          DateType other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          DateType __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getDates_result deepCopy() {
      return new getDates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, DateType val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,DateType>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,DateType> getSuccess() {
      return this.success;
    }

    public getDates_result setSuccess(Map<Integer,DateType> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getDates_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,DateType>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDates_result)
        return this.equals((getDates_result)that);
      return false;
    }

    public boolean equals(getDates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getDates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDates_resultStandardSchemeFactory implements SchemeFactory {
      public getDates_resultStandardScheme getScheme() {
        return new getDates_resultStandardScheme();
      }
    }

    private static class getDates_resultStandardScheme extends StandardScheme<getDates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,DateType>(2*_map220.size);
                  for (int _i221 = 0; _i221 < _map220.size; ++_i221)
                  {
                    int _key222;
                    DateType _val223;
                    _key222 = iprot.readI32();
                    _val223 = DateType.findByValue(iprot.readI32());
                    struct.success.put(_key222, _val223);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (Map.Entry<Integer, DateType> _iter224 : struct.success.entrySet())
            {
              oprot.writeI32(_iter224.getKey());
              oprot.writeI32(_iter224.getValue().getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDates_resultTupleSchemeFactory implements SchemeFactory {
      public getDates_resultTupleScheme getScheme() {
        return new getDates_resultTupleScheme();
      }
    }

    private static class getDates_resultTupleScheme extends TupleScheme<getDates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, DateType> _iter225 : struct.success.entrySet())
            {
              oprot.writeI32(_iter225.getKey());
              oprot.writeI32(_iter225.getValue().getValue());
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map226 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new HashMap<Integer,DateType>(2*_map226.size);
            for (int _i227 = 0; _i227 < _map226.size; ++_i227)
            {
              int _key228;
              DateType _val229;
              _key228 = iprot.readI32();
              _val229 = DateType.findByValue(iprot.readI32());
              struct.success.put(_key228, _val229);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getShop_args implements org.apache.thrift.TBase<getShop_args, getShop_args._Fields>, java.io.Serializable, Cloneable, Comparable<getShop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShop_args");

    private static final org.apache.thrift.protocol.TField SHOP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shopId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShop_argsTupleSchemeFactory());
    }

    public long shopId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SHOP_ID((short)1, "shopId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SHOP_ID
            return SHOP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SHOPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SHOP_ID, new org.apache.thrift.meta_data.FieldMetaData("shopId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShop_args.class, metaDataMap);
    }

    public getShop_args() {
    }

    public getShop_args(
      long shopId)
    {
      this();
      this.shopId = shopId;
      setShopIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShop_args(getShop_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.shopId = other.shopId;
    }

    public getShop_args deepCopy() {
      return new getShop_args(this);
    }

    @Override
    public void clear() {
      setShopIdIsSet(false);
      this.shopId = 0;
    }

    public long getShopId() {
      return this.shopId;
    }

    public getShop_args setShopId(long shopId) {
      this.shopId = shopId;
      setShopIdIsSet(true);
      return this;
    }

    public void unsetShopId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    /** Returns true if field shopId is set (has been assigned a value) and false otherwise */
    public boolean isSetShopId() {
      return EncodingUtils.testBit(__isset_bitfield, __SHOPID_ISSET_ID);
    }

    public void setShopIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOPID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SHOP_ID:
        if (value == null) {
          unsetShopId();
        } else {
          setShopId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SHOP_ID:
        return Long.valueOf(getShopId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SHOP_ID:
        return isSetShopId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShop_args)
        return this.equals((getShop_args)that);
      return false;
    }

    public boolean equals(getShop_args that) {
      if (that == null)
        return false;

      boolean this_present_shopId = true;
      boolean that_present_shopId = true;
      if (this_present_shopId || that_present_shopId) {
        if (!(this_present_shopId && that_present_shopId))
          return false;
        if (this.shopId != that.shopId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getShop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetShopId()).compareTo(other.isSetShopId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShopId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shopId, other.shopId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShop_args(");
      boolean first = true;

      sb.append("shopId:");
      sb.append(this.shopId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShop_argsStandardSchemeFactory implements SchemeFactory {
      public getShop_argsStandardScheme getScheme() {
        return new getShop_argsStandardScheme();
      }
    }

    private static class getShop_argsStandardScheme extends StandardScheme<getShop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SHOP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.shopId = iprot.readI64();
                struct.setShopIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SHOP_ID_FIELD_DESC);
        oprot.writeI64(struct.shopId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShop_argsTupleSchemeFactory implements SchemeFactory {
      public getShop_argsTupleScheme getScheme() {
        return new getShop_argsTupleScheme();
      }
    }

    private static class getShop_argsTupleScheme extends TupleScheme<getShop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetShopId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetShopId()) {
          oprot.writeI64(struct.shopId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.shopId = iprot.readI64();
          struct.setShopIdIsSet(true);
        }
      }
    }

  }

  public static class getShop_result implements org.apache.thrift.TBase<getShop_result, getShop_result._Fields>, java.io.Serializable, Cloneable, Comparable<getShop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getShop_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getShop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getShop_resultTupleSchemeFactory());
    }

    public Shop success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Shop.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getShop_result.class, metaDataMap);
    }

    public getShop_result() {
    }

    public getShop_result(
      Shop success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getShop_result(getShop_result other) {
      if (other.isSetSuccess()) {
        this.success = new Shop(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getShop_result deepCopy() {
      return new getShop_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Shop getSuccess() {
      return this.success;
    }

    public getShop_result setSuccess(Shop success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getShop_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Shop)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getShop_result)
        return this.equals((getShop_result)that);
      return false;
    }

    public boolean equals(getShop_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getShop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getShop_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getShop_resultStandardSchemeFactory implements SchemeFactory {
      public getShop_resultStandardScheme getScheme() {
        return new getShop_resultStandardScheme();
      }
    }

    private static class getShop_resultStandardScheme extends StandardScheme<getShop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getShop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Shop();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getShop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getShop_resultTupleSchemeFactory implements SchemeFactory {
      public getShop_resultTupleScheme getScheme() {
        return new getShop_resultTupleScheme();
      }
    }

    private static class getShop_resultTupleScheme extends TupleScheme<getShop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getShop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Shop();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getProducers_args implements org.apache.thrift.TBase<getProducers_args, getProducers_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProducers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducers_args.class, metaDataMap);
    }

    public getProducers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducers_args(getProducers_args other) {
    }

    public getProducers_args deepCopy() {
      return new getProducers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducers_args)
        return this.equals((getProducers_args)that);
      return false;
    }

    public boolean equals(getProducers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProducers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducers_argsStandardSchemeFactory implements SchemeFactory {
      public getProducers_argsStandardScheme getScheme() {
        return new getProducers_argsStandardScheme();
      }
    }

    private static class getProducers_argsStandardScheme extends StandardScheme<getProducers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducers_argsTupleSchemeFactory implements SchemeFactory {
      public getProducers_argsTupleScheme getScheme() {
        return new getProducers_argsTupleScheme();
      }
    }

    private static class getProducers_argsTupleScheme extends TupleScheme<getProducers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getProducers_result implements org.apache.thrift.TBase<getProducers_result, getProducers_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProducers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducers_resultTupleSchemeFactory());
    }

    public List<Producer> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Producer.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducers_result.class, metaDataMap);
    }

    public getProducers_result() {
    }

    public getProducers_result(
      List<Producer> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducers_result(getProducers_result other) {
      if (other.isSetSuccess()) {
        List<Producer> __this__success = new ArrayList<Producer>(other.success.size());
        for (Producer other_element : other.success) {
          __this__success.add(new Producer(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getProducers_result deepCopy() {
      return new getProducers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Producer> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Producer elem) {
      if (this.success == null) {
        this.success = new ArrayList<Producer>();
      }
      this.success.add(elem);
    }

    public List<Producer> getSuccess() {
      return this.success;
    }

    public getProducers_result setSuccess(List<Producer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getProducers_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Producer>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducers_result)
        return this.equals((getProducers_result)that);
      return false;
    }

    public boolean equals(getProducers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProducers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducers_resultStandardSchemeFactory implements SchemeFactory {
      public getProducers_resultStandardScheme getScheme() {
        return new getProducers_resultStandardScheme();
      }
    }

    private static class getProducers_resultStandardScheme extends StandardScheme<getProducers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.success = new ArrayList<Producer>(_list230.size);
                  for (int _i231 = 0; _i231 < _list230.size; ++_i231)
                  {
                    Producer _elem232;
                    _elem232 = new Producer();
                    _elem232.read(iprot);
                    struct.success.add(_elem232);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Producer _iter233 : struct.success)
            {
              _iter233.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducers_resultTupleSchemeFactory implements SchemeFactory {
      public getProducers_resultTupleScheme getScheme() {
        return new getProducers_resultTupleScheme();
      }
    }

    private static class getProducers_resultTupleScheme extends TupleScheme<getProducers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Producer _iter234 : struct.success)
            {
              _iter234.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list235 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Producer>(_list235.size);
            for (int _i236 = 0; _i236 < _list235.size; ++_i236)
            {
              Producer _elem237;
              _elem237 = new Producer();
              _elem237.read(iprot);
              struct.success.add(_elem237);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getProductCategories_args implements org.apache.thrift.TBase<getProductCategories_args, getProductCategories_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategories_args");

    private static final org.apache.thrift.protocol.TField CURRENT_PRODUCT_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentProductCategoryId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategories_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategories_argsTupleSchemeFactory());
    }

    public long currentProductCategoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CURRENT_PRODUCT_CATEGORY_ID((short)1, "currentProductCategoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CURRENT_PRODUCT_CATEGORY_ID
            return CURRENT_PRODUCT_CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURRENTPRODUCTCATEGORYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CURRENT_PRODUCT_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("currentProductCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategories_args.class, metaDataMap);
    }

    public getProductCategories_args() {
    }

    public getProductCategories_args(
      long currentProductCategoryId)
    {
      this();
      this.currentProductCategoryId = currentProductCategoryId;
      setCurrentProductCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategories_args(getProductCategories_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.currentProductCategoryId = other.currentProductCategoryId;
    }

    public getProductCategories_args deepCopy() {
      return new getProductCategories_args(this);
    }

    @Override
    public void clear() {
      setCurrentProductCategoryIdIsSet(false);
      this.currentProductCategoryId = 0;
    }

    public long getCurrentProductCategoryId() {
      return this.currentProductCategoryId;
    }

    public getProductCategories_args setCurrentProductCategoryId(long currentProductCategoryId) {
      this.currentProductCategoryId = currentProductCategoryId;
      setCurrentProductCategoryIdIsSet(true);
      return this;
    }

    public void unsetCurrentProductCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTPRODUCTCATEGORYID_ISSET_ID);
    }

    /** Returns true if field currentProductCategoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentProductCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CURRENTPRODUCTCATEGORYID_ISSET_ID);
    }

    public void setCurrentProductCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTPRODUCTCATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CURRENT_PRODUCT_CATEGORY_ID:
        if (value == null) {
          unsetCurrentProductCategoryId();
        } else {
          setCurrentProductCategoryId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CURRENT_PRODUCT_CATEGORY_ID:
        return Long.valueOf(getCurrentProductCategoryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CURRENT_PRODUCT_CATEGORY_ID:
        return isSetCurrentProductCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategories_args)
        return this.equals((getProductCategories_args)that);
      return false;
    }

    public boolean equals(getProductCategories_args that) {
      if (that == null)
        return false;

      boolean this_present_currentProductCategoryId = true;
      boolean that_present_currentProductCategoryId = true;
      if (this_present_currentProductCategoryId || that_present_currentProductCategoryId) {
        if (!(this_present_currentProductCategoryId && that_present_currentProductCategoryId))
          return false;
        if (this.currentProductCategoryId != that.currentProductCategoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProductCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCurrentProductCategoryId()).compareTo(other.isSetCurrentProductCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentProductCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentProductCategoryId, other.currentProductCategoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategories_args(");
      boolean first = true;

      sb.append("currentProductCategoryId:");
      sb.append(this.currentProductCategoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategories_argsStandardSchemeFactory implements SchemeFactory {
      public getProductCategories_argsStandardScheme getScheme() {
        return new getProductCategories_argsStandardScheme();
      }
    }

    private static class getProductCategories_argsStandardScheme extends StandardScheme<getProductCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CURRENT_PRODUCT_CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.currentProductCategoryId = iprot.readI64();
                struct.setCurrentProductCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CURRENT_PRODUCT_CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.currentProductCategoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategories_argsTupleSchemeFactory implements SchemeFactory {
      public getProductCategories_argsTupleScheme getScheme() {
        return new getProductCategories_argsTupleScheme();
      }
    }

    private static class getProductCategories_argsTupleScheme extends TupleScheme<getProductCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCurrentProductCategoryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCurrentProductCategoryId()) {
          oprot.writeI64(struct.currentProductCategoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategories_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.currentProductCategoryId = iprot.readI64();
          struct.setCurrentProductCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class getProductCategories_result implements org.apache.thrift.TBase<getProductCategories_result, getProductCategories_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductCategories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductCategories_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductCategories_resultTupleSchemeFactory());
    }

    public List<ProductCategory> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductCategory.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductCategories_result.class, metaDataMap);
    }

    public getProductCategories_result() {
    }

    public getProductCategories_result(
      List<ProductCategory> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductCategories_result(getProductCategories_result other) {
      if (other.isSetSuccess()) {
        List<ProductCategory> __this__success = new ArrayList<ProductCategory>(other.success.size());
        for (ProductCategory other_element : other.success) {
          __this__success.add(new ProductCategory(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getProductCategories_result deepCopy() {
      return new getProductCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProductCategory> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProductCategory elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProductCategory>();
      }
      this.success.add(elem);
    }

    public List<ProductCategory> getSuccess() {
      return this.success;
    }

    public getProductCategories_result setSuccess(List<ProductCategory> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getProductCategories_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProductCategory>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductCategories_result)
        return this.equals((getProductCategories_result)that);
      return false;
    }

    public boolean equals(getProductCategories_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProductCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductCategories_resultStandardSchemeFactory implements SchemeFactory {
      public getProductCategories_resultStandardScheme getScheme() {
        return new getProductCategories_resultStandardScheme();
      }
    }

    private static class getProductCategories_resultStandardScheme extends StandardScheme<getProductCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                  struct.success = new ArrayList<ProductCategory>(_list238.size);
                  for (int _i239 = 0; _i239 < _list238.size; ++_i239)
                  {
                    ProductCategory _elem240;
                    _elem240 = new ProductCategory();
                    _elem240.read(iprot);
                    struct.success.add(_elem240);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProductCategory _iter241 : struct.success)
            {
              _iter241.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductCategories_resultTupleSchemeFactory implements SchemeFactory {
      public getProductCategories_resultTupleScheme getScheme() {
        return new getProductCategories_resultTupleScheme();
      }
    }

    private static class getProductCategories_resultTupleScheme extends TupleScheme<getProductCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProductCategory _iter242 : struct.success)
            {
              _iter242.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductCategories_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list243 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProductCategory>(_list243.size);
            for (int _i244 = 0; _i244 < _list243.size; ++_i244)
            {
              ProductCategory _elem245;
              _elem245 = new ProductCategory();
              _elem245.read(iprot);
              struct.success.add(_elem245);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getProducts_args implements org.apache.thrift.TBase<getProducts_args, getProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducts_args");

    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducts_argsTupleSchemeFactory());
    }

    public int offset; // required
    public int length; // required
    public long categoryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OFFSET((short)1, "offset"),
      LENGTH((short)2, "length"),
      CATEGORY_ID((short)3, "categoryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OFFSET
            return OFFSET;
          case 2: // LENGTH
            return LENGTH;
          case 3: // CATEGORY_ID
            return CATEGORY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private static final int __CATEGORYID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducts_args.class, metaDataMap);
    }

    public getProducts_args() {
    }

    public getProducts_args(
      int offset,
      int length,
      long categoryId)
    {
      this();
      this.offset = offset;
      setOffsetIsSet(true);
      this.length = length;
      setLengthIsSet(true);
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducts_args(getProducts_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.offset = other.offset;
      this.length = other.length;
      this.categoryId = other.categoryId;
    }

    public getProducts_args deepCopy() {
      return new getProducts_args(this);
    }

    @Override
    public void clear() {
      setOffsetIsSet(false);
      this.offset = 0;
      setLengthIsSet(false);
      this.length = 0;
      setCategoryIdIsSet(false);
      this.categoryId = 0;
    }

    public int getOffset() {
      return this.offset;
    }

    public getProducts_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public getProducts_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public long getCategoryId() {
      return this.categoryId;
    }

    public getProducts_args setCategoryId(long categoryId) {
      this.categoryId = categoryId;
      setCategoryIdIsSet(true);
      return this;
    }

    public void unsetCategoryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return EncodingUtils.testBit(__isset_bitfield, __CATEGORYID_ISSET_ID);
    }

    public void setCategoryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CATEGORYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Integer)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OFFSET:
        return Integer.valueOf(getOffset());

      case LENGTH:
        return Integer.valueOf(getLength());

      case CATEGORY_ID:
        return Long.valueOf(getCategoryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OFFSET:
        return isSetOffset();
      case LENGTH:
        return isSetLength();
      case CATEGORY_ID:
        return isSetCategoryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducts_args)
        return this.equals((getProducts_args)that);
      return false;
    }

    public boolean equals(getProducts_args that) {
      if (that == null)
        return false;

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_categoryId = true;
      boolean that_present_categoryId = true;
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (this.categoryId != that.categoryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducts_args(");
      boolean first = true;

      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("categoryId:");
      sb.append(this.categoryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducts_argsStandardSchemeFactory implements SchemeFactory {
      public getProducts_argsStandardScheme getScheme() {
        return new getProducts_argsStandardScheme();
      }
    }

    private static class getProducts_argsStandardScheme extends StandardScheme<getProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.categoryId = iprot.readI64();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
        oprot.writeI64(struct.categoryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducts_argsTupleSchemeFactory implements SchemeFactory {
      public getProducts_argsTupleScheme getScheme() {
        return new getProducts_argsTupleScheme();
      }
    }

    private static class getProducts_argsTupleScheme extends TupleScheme<getProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOffset()) {
          optionals.set(0);
        }
        if (struct.isSetLength()) {
          optionals.set(1);
        }
        if (struct.isSetCategoryId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
        if (struct.isSetCategoryId()) {
          oprot.writeI64(struct.categoryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(1)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
        if (incoming.get(2)) {
          struct.categoryId = iprot.readI64();
          struct.setCategoryIdIsSet(true);
        }
      }
    }

  }

  public static class getProducts_result implements org.apache.thrift.TBase<getProducts_result, getProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProducts_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProducts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProducts_resultTupleSchemeFactory());
    }

    public ProductListPart success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductListPart.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProducts_result.class, metaDataMap);
    }

    public getProducts_result() {
    }

    public getProducts_result(
      ProductListPart success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProducts_result(getProducts_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductListPart(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getProducts_result deepCopy() {
      return new getProducts_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public ProductListPart getSuccess() {
      return this.success;
    }

    public getProducts_result setSuccess(ProductListPart success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getProducts_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductListPart)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProducts_result)
        return this.equals((getProducts_result)that);
      return false;
    }

    public boolean equals(getProducts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProducts_resultStandardSchemeFactory implements SchemeFactory {
      public getProducts_resultStandardScheme getScheme() {
        return new getProducts_resultStandardScheme();
      }
    }

    private static class getProducts_resultStandardScheme extends StandardScheme<getProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductListPart();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProducts_resultTupleSchemeFactory implements SchemeFactory {
      public getProducts_resultTupleScheme getScheme() {
        return new getProducts_resultTupleScheme();
      }
    }

    private static class getProducts_resultTupleScheme extends TupleScheme<getProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProducts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductListPart();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getProductDetails_args implements org.apache.thrift.TBase<getProductDetails_args, getProductDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProductDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductDetails_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductDetails_argsTupleSchemeFactory());
    }

    public long productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductDetails_args.class, metaDataMap);
    }

    public getProductDetails_args() {
    }

    public getProductDetails_args(
      long productId)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductDetails_args(getProductDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
    }

    public getProductDetails_args deepCopy() {
      return new getProductDetails_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
    }

    public long getProductId() {
      return this.productId;
    }

    public getProductDetails_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductDetails_args)
        return this.equals((getProductDetails_args)that);
      return false;
    }

    public boolean equals(getProductDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProductDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductDetails_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getProductDetails_argsStandardScheme getScheme() {
        return new getProductDetails_argsStandardScheme();
      }
    }

    private static class getProductDetails_argsStandardScheme extends StandardScheme<getProductDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getProductDetails_argsTupleScheme getScheme() {
        return new getProductDetails_argsTupleScheme();
      }
    }

    private static class getProductDetails_argsTupleScheme extends TupleScheme<getProductDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class getProductDetails_result implements org.apache.thrift.TBase<getProductDetails_result, getProductDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProductDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProductDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProductDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProductDetails_resultTupleSchemeFactory());
    }

    public ProductDetails success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProductDetails.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProductDetails_result.class, metaDataMap);
    }

    public getProductDetails_result() {
    }

    public getProductDetails_result(
      ProductDetails success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductDetails_result(getProductDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductDetails(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getProductDetails_result deepCopy() {
      return new getProductDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public ProductDetails getSuccess() {
      return this.success;
    }

    public getProductDetails_result setSuccess(ProductDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getProductDetails_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ProductDetails)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductDetails_result)
        return this.equals((getProductDetails_result)that);
      return false;
    }

    public boolean equals(getProductDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProductDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProductDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProductDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getProductDetails_resultStandardScheme getScheme() {
        return new getProductDetails_resultStandardScheme();
      }
    }

    private static class getProductDetails_resultStandardScheme extends StandardScheme<getProductDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProductDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ProductDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProductDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProductDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getProductDetails_resultTupleScheme getScheme() {
        return new getProductDetails_resultTupleScheme();
      }
    }

    private static class getProductDetails_resultTupleScheme extends TupleScheme<getProductDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProductDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProductDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ProductDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getOrders_args implements org.apache.thrift.TBase<getOrders_args, getOrders_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrders_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrders_args");

    private static final org.apache.thrift.protocol.TField DATE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("dateFrom", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTo", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrders_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrders_argsTupleSchemeFactory());
    }

    public int dateFrom; // required
    public int dateTo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE_FROM((short)1, "dateFrom"),
      DATE_TO((short)2, "dateTo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE_FROM
            return DATE_FROM;
          case 2: // DATE_TO
            return DATE_TO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATEFROM_ISSET_ID = 0;
    private static final int __DATETO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE_FROM, new org.apache.thrift.meta_data.FieldMetaData("dateFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DATE_TO, new org.apache.thrift.meta_data.FieldMetaData("dateTo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrders_args.class, metaDataMap);
    }

    public getOrders_args() {
    }

    public getOrders_args(
      int dateFrom,
      int dateTo)
    {
      this();
      this.dateFrom = dateFrom;
      setDateFromIsSet(true);
      this.dateTo = dateTo;
      setDateToIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrders_args(getOrders_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dateFrom = other.dateFrom;
      this.dateTo = other.dateTo;
    }

    public getOrders_args deepCopy() {
      return new getOrders_args(this);
    }

    @Override
    public void clear() {
      setDateFromIsSet(false);
      this.dateFrom = 0;
      setDateToIsSet(false);
      this.dateTo = 0;
    }

    public int getDateFrom() {
      return this.dateFrom;
    }

    public getOrders_args setDateFrom(int dateFrom) {
      this.dateFrom = dateFrom;
      setDateFromIsSet(true);
      return this;
    }

    public void unsetDateFrom() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATEFROM_ISSET_ID);
    }

    /** Returns true if field dateFrom is set (has been assigned a value) and false otherwise */
    public boolean isSetDateFrom() {
      return EncodingUtils.testBit(__isset_bitfield, __DATEFROM_ISSET_ID);
    }

    public void setDateFromIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATEFROM_ISSET_ID, value);
    }

    public int getDateTo() {
      return this.dateTo;
    }

    public getOrders_args setDateTo(int dateTo) {
      this.dateTo = dateTo;
      setDateToIsSet(true);
      return this;
    }

    public void unsetDateTo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETO_ISSET_ID);
    }

    /** Returns true if field dateTo is set (has been assigned a value) and false otherwise */
    public boolean isSetDateTo() {
      return EncodingUtils.testBit(__isset_bitfield, __DATETO_ISSET_ID);
    }

    public void setDateToIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE_FROM:
        if (value == null) {
          unsetDateFrom();
        } else {
          setDateFrom((Integer)value);
        }
        break;

      case DATE_TO:
        if (value == null) {
          unsetDateTo();
        } else {
          setDateTo((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE_FROM:
        return Integer.valueOf(getDateFrom());

      case DATE_TO:
        return Integer.valueOf(getDateTo());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE_FROM:
        return isSetDateFrom();
      case DATE_TO:
        return isSetDateTo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrders_args)
        return this.equals((getOrders_args)that);
      return false;
    }

    public boolean equals(getOrders_args that) {
      if (that == null)
        return false;

      boolean this_present_dateFrom = true;
      boolean that_present_dateFrom = true;
      if (this_present_dateFrom || that_present_dateFrom) {
        if (!(this_present_dateFrom && that_present_dateFrom))
          return false;
        if (this.dateFrom != that.dateFrom)
          return false;
      }

      boolean this_present_dateTo = true;
      boolean that_present_dateTo = true;
      if (this_present_dateTo || that_present_dateTo) {
        if (!(this_present_dateTo && that_present_dateTo))
          return false;
        if (this.dateTo != that.dateTo)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOrders_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDateFrom()).compareTo(other.isSetDateFrom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateFrom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateFrom, other.dateFrom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDateTo()).compareTo(other.isSetDateTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateTo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTo, other.dateTo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrders_args(");
      boolean first = true;

      sb.append("dateFrom:");
      sb.append(this.dateFrom);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateTo:");
      sb.append(this.dateTo);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrders_argsStandardSchemeFactory implements SchemeFactory {
      public getOrders_argsStandardScheme getScheme() {
        return new getOrders_argsStandardScheme();
      }
    }

    private static class getOrders_argsStandardScheme extends StandardScheme<getOrders_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrders_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE_FROM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dateFrom = iprot.readI32();
                struct.setDateFromIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_TO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dateTo = iprot.readI32();
                struct.setDateToIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrders_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FROM_FIELD_DESC);
        oprot.writeI32(struct.dateFrom);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DATE_TO_FIELD_DESC);
        oprot.writeI32(struct.dateTo);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrders_argsTupleSchemeFactory implements SchemeFactory {
      public getOrders_argsTupleScheme getScheme() {
        return new getOrders_argsTupleScheme();
      }
    }

    private static class getOrders_argsTupleScheme extends TupleScheme<getOrders_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDateFrom()) {
          optionals.set(0);
        }
        if (struct.isSetDateTo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDateFrom()) {
          oprot.writeI32(struct.dateFrom);
        }
        if (struct.isSetDateTo()) {
          oprot.writeI32(struct.dateTo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrders_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dateFrom = iprot.readI32();
          struct.setDateFromIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dateTo = iprot.readI32();
          struct.setDateToIsSet(true);
        }
      }
    }

  }

  public static class getOrders_result implements org.apache.thrift.TBase<getOrders_result, getOrders_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrders_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrders_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrders_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrders_resultTupleSchemeFactory());
    }

    public List<Order> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Order.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrders_result.class, metaDataMap);
    }

    public getOrders_result() {
    }

    public getOrders_result(
      List<Order> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrders_result(getOrders_result other) {
      if (other.isSetSuccess()) {
        List<Order> __this__success = new ArrayList<Order>(other.success.size());
        for (Order other_element : other.success) {
          __this__success.add(new Order(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getOrders_result deepCopy() {
      return new getOrders_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Order> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Order elem) {
      if (this.success == null) {
        this.success = new ArrayList<Order>();
      }
      this.success.add(elem);
    }

    public List<Order> getSuccess() {
      return this.success;
    }

    public getOrders_result setSuccess(List<Order> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getOrders_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Order>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrders_result)
        return this.equals((getOrders_result)that);
      return false;
    }

    public boolean equals(getOrders_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOrders_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrders_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrders_resultStandardSchemeFactory implements SchemeFactory {
      public getOrders_resultStandardScheme getScheme() {
        return new getOrders_resultStandardScheme();
      }
    }

    private static class getOrders_resultStandardScheme extends StandardScheme<getOrders_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrders_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list246 = iprot.readListBegin();
                  struct.success = new ArrayList<Order>(_list246.size);
                  for (int _i247 = 0; _i247 < _list246.size; ++_i247)
                  {
                    Order _elem248;
                    _elem248 = new Order();
                    _elem248.read(iprot);
                    struct.success.add(_elem248);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrders_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Order _iter249 : struct.success)
            {
              _iter249.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrders_resultTupleSchemeFactory implements SchemeFactory {
      public getOrders_resultTupleScheme getScheme() {
        return new getOrders_resultTupleScheme();
      }
    }

    private static class getOrders_resultTupleScheme extends TupleScheme<getOrders_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Order _iter250 : struct.success)
            {
              _iter250.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrders_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list251 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Order>(_list251.size);
            for (int _i252 = 0; _i252 < _list251.size; ++_i252)
            {
              Order _elem253;
              _elem253 = new Order();
              _elem253.read(iprot);
              struct.success.add(_elem253);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getOrderDetails_args implements org.apache.thrift.TBase<getOrderDetails_args, getOrderDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderDetails_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderDetails_argsTupleSchemeFactory());
    }

    public long orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderDetails_args.class, metaDataMap);
    }

    public getOrderDetails_args() {
    }

    public getOrderDetails_args(
      long orderId)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderDetails_args(getOrderDetails_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
    }

    public getOrderDetails_args deepCopy() {
      return new getOrderDetails_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public getOrderDetails_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return Long.valueOf(getOrderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderDetails_args)
        return this.equals((getOrderDetails_args)that);
      return false;
    }

    public boolean equals(getOrderDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOrderDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderDetails_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getOrderDetails_argsStandardScheme getScheme() {
        return new getOrderDetails_argsStandardScheme();
      }
    }

    private static class getOrderDetails_argsStandardScheme extends StandardScheme<getOrderDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getOrderDetails_argsTupleScheme getScheme() {
        return new getOrderDetails_argsTupleScheme();
      }
    }

    private static class getOrderDetails_argsTupleScheme extends TupleScheme<getOrderDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class getOrderDetails_result implements org.apache.thrift.TBase<getOrderDetails_result, getOrderDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrderDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrderDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOrderDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOrderDetails_resultTupleSchemeFactory());
    }

    public OrderDetails success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetails.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderDetails_result.class, metaDataMap);
    }

    public getOrderDetails_result() {
    }

    public getOrderDetails_result(
      OrderDetails success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrderDetails_result(getOrderDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderDetails(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getOrderDetails_result deepCopy() {
      return new getOrderDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public OrderDetails getSuccess() {
      return this.success;
    }

    public getOrderDetails_result setSuccess(OrderDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getOrderDetails_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderDetails)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrderDetails_result)
        return this.equals((getOrderDetails_result)that);
      return false;
    }

    public boolean equals(getOrderDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getOrderDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOrderDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrderDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getOrderDetails_resultStandardScheme getScheme() {
        return new getOrderDetails_resultStandardScheme();
      }
    }

    private static class getOrderDetails_resultStandardScheme extends StandardScheme<getOrderDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrderDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getOrderDetails_resultTupleScheme getScheme() {
        return new getOrderDetails_resultTupleScheme();
      }
    }

    private static class getOrderDetails_resultTupleScheme extends TupleScheme<getOrderDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrderDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrderDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class createOrder_args implements org.apache.thrift.TBase<createOrder_args, createOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrder_argsTupleSchemeFactory());
    }

    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_args.class, metaDataMap);
    }

    public createOrder_args() {
    }

    public createOrder_args(
      int date)
    {
      this();
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_args(createOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
    }

    public createOrder_args deepCopy() {
      return new createOrder_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
    }

    public int getDate() {
      return this.date;
    }

    public createOrder_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_args)
        return this.equals((createOrder_args)that);
      return false;
    }

    public boolean equals(createOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrder_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_argsStandardSchemeFactory implements SchemeFactory {
      public createOrder_argsStandardScheme getScheme() {
        return new createOrder_argsStandardScheme();
      }
    }

    private static class createOrder_argsStandardScheme extends StandardScheme<createOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_argsTupleSchemeFactory implements SchemeFactory {
      public createOrder_argsTupleScheme getScheme() {
        return new createOrder_argsTupleScheme();
      }
    }

    private static class createOrder_argsTupleScheme extends TupleScheme<createOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class createOrder_result implements org.apache.thrift.TBase<createOrder_result, createOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createOrder_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_result.class, metaDataMap);
    }

    public createOrder_result() {
    }

    public createOrder_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_result(createOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public createOrder_result deepCopy() {
      return new createOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public createOrder_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_result)
        return this.equals((createOrder_result)that);
      return false;
    }

    public boolean equals(createOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(createOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_resultStandardSchemeFactory implements SchemeFactory {
      public createOrder_resultStandardScheme getScheme() {
        return new createOrder_resultStandardScheme();
      }
    }

    private static class createOrder_resultStandardScheme extends StandardScheme<createOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_resultTupleSchemeFactory implements SchemeFactory {
      public createOrder_resultTupleScheme getScheme() {
        return new createOrder_resultTupleScheme();
      }
    }

    private static class createOrder_resultTupleScheme extends TupleScheme<createOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class cancelOrder_args implements org.apache.thrift.TBase<cancelOrder_args, cancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrder_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrder_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_args.class, metaDataMap);
    }

    public cancelOrder_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrder_args(cancelOrder_args other) {
    }

    public cancelOrder_args deepCopy() {
      return new cancelOrder_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrder_args)
        return this.equals((cancelOrder_args)that);
      return false;
    }

    public boolean equals(cancelOrder_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrder_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public cancelOrder_argsStandardScheme getScheme() {
        return new cancelOrder_argsStandardScheme();
      }
    }

    private static class cancelOrder_argsStandardScheme extends StandardScheme<cancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public cancelOrder_argsTupleScheme getScheme() {
        return new cancelOrder_argsTupleScheme();
      }
    }

    private static class cancelOrder_argsTupleScheme extends TupleScheme<cancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class cancelOrder_result implements org.apache.thrift.TBase<cancelOrder_result, cancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrder_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_result.class, metaDataMap);
    }

    public cancelOrder_result() {
    }

    public cancelOrder_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrder_result(cancelOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public cancelOrder_result deepCopy() {
      return new cancelOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public cancelOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public cancelOrder_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrder_result)
        return this.equals((cancelOrder_result)that);
      return false;
    }

    public boolean equals(cancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(cancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public cancelOrder_resultStandardScheme getScheme() {
        return new cancelOrder_resultStandardScheme();
      }
    }

    private static class cancelOrder_resultStandardScheme extends StandardScheme<cancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public cancelOrder_resultTupleScheme getScheme() {
        return new cancelOrder_resultTupleScheme();
      }
    }

    private static class cancelOrder_resultTupleScheme extends TupleScheme<cancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class confirmOrder_args implements org.apache.thrift.TBase<confirmOrder_args, confirmOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOrder_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOrder_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOrder_args.class, metaDataMap);
    }

    public confirmOrder_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOrder_args(confirmOrder_args other) {
    }

    public confirmOrder_args deepCopy() {
      return new confirmOrder_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOrder_args)
        return this.equals((confirmOrder_args)that);
      return false;
    }

    public boolean equals(confirmOrder_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(confirmOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOrder_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOrder_argsStandardSchemeFactory implements SchemeFactory {
      public confirmOrder_argsStandardScheme getScheme() {
        return new confirmOrder_argsStandardScheme();
      }
    }

    private static class confirmOrder_argsStandardScheme extends StandardScheme<confirmOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOrder_argsTupleSchemeFactory implements SchemeFactory {
      public confirmOrder_argsTupleScheme getScheme() {
        return new confirmOrder_argsTupleScheme();
      }
    }

    private static class confirmOrder_argsTupleScheme extends TupleScheme<confirmOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class confirmOrder_result implements org.apache.thrift.TBase<confirmOrder_result, confirmOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOrder_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOrder_result.class, metaDataMap);
    }

    public confirmOrder_result() {
    }

    public confirmOrder_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOrder_result(confirmOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public confirmOrder_result deepCopy() {
      return new confirmOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public confirmOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public confirmOrder_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOrder_result)
        return this.equals((confirmOrder_result)that);
      return false;
    }

    public boolean equals(confirmOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(confirmOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOrder_resultStandardSchemeFactory implements SchemeFactory {
      public confirmOrder_resultStandardScheme getScheme() {
        return new confirmOrder_resultStandardScheme();
      }
    }

    private static class confirmOrder_resultStandardScheme extends StandardScheme<confirmOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOrder_resultTupleSchemeFactory implements SchemeFactory {
      public confirmOrder_resultTupleScheme getScheme() {
        return new confirmOrder_resultTupleScheme();
      }
    }

    private static class confirmOrder_resultTupleScheme extends TupleScheme<confirmOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class appendOrder_args implements org.apache.thrift.TBase<appendOrder_args, appendOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<appendOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendOrder_args");

    private static final org.apache.thrift.protocol.TField OLD_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldOrderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendOrder_argsTupleSchemeFactory());
    }

    public long oldOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_ORDER_ID((short)1, "oldOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_ORDER_ID
            return OLD_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OLDORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("oldOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendOrder_args.class, metaDataMap);
    }

    public appendOrder_args() {
    }

    public appendOrder_args(
      long oldOrderId)
    {
      this();
      this.oldOrderId = oldOrderId;
      setOldOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendOrder_args(appendOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.oldOrderId = other.oldOrderId;
    }

    public appendOrder_args deepCopy() {
      return new appendOrder_args(this);
    }

    @Override
    public void clear() {
      setOldOrderIdIsSet(false);
      this.oldOrderId = 0;
    }

    public long getOldOrderId() {
      return this.oldOrderId;
    }

    public appendOrder_args setOldOrderId(long oldOrderId) {
      this.oldOrderId = oldOrderId;
      setOldOrderIdIsSet(true);
      return this;
    }

    public void unsetOldOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDORDERID_ISSET_ID);
    }

    /** Returns true if field oldOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOldOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDORDERID_ISSET_ID);
    }

    public void setOldOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_ORDER_ID:
        if (value == null) {
          unsetOldOrderId();
        } else {
          setOldOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_ORDER_ID:
        return Long.valueOf(getOldOrderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_ORDER_ID:
        return isSetOldOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendOrder_args)
        return this.equals((appendOrder_args)that);
      return false;
    }

    public boolean equals(appendOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_oldOrderId = true;
      boolean that_present_oldOrderId = true;
      if (this_present_oldOrderId || that_present_oldOrderId) {
        if (!(this_present_oldOrderId && that_present_oldOrderId))
          return false;
        if (this.oldOrderId != that.oldOrderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(appendOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldOrderId()).compareTo(other.isSetOldOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldOrderId, other.oldOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendOrder_args(");
      boolean first = true;

      sb.append("oldOrderId:");
      sb.append(this.oldOrderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendOrder_argsStandardSchemeFactory implements SchemeFactory {
      public appendOrder_argsStandardScheme getScheme() {
        return new appendOrder_argsStandardScheme();
      }
    }

    private static class appendOrder_argsStandardScheme extends StandardScheme<appendOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.oldOrderId = iprot.readI64();
                struct.setOldOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OLD_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.oldOrderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendOrder_argsTupleSchemeFactory implements SchemeFactory {
      public appendOrder_argsTupleScheme getScheme() {
        return new appendOrder_argsTupleScheme();
      }
    }

    private static class appendOrder_argsTupleScheme extends TupleScheme<appendOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOldOrderId()) {
          oprot.writeI64(struct.oldOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oldOrderId = iprot.readI64();
          struct.setOldOrderIdIsSet(true);
        }
      }
    }

  }

  public static class appendOrder_result implements org.apache.thrift.TBase<appendOrder_result, appendOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<appendOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new appendOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new appendOrder_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendOrder_result.class, metaDataMap);
    }

    public appendOrder_result() {
    }

    public appendOrder_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendOrder_result(appendOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public appendOrder_result deepCopy() {
      return new appendOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public appendOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public appendOrder_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof appendOrder_result)
        return this.equals((appendOrder_result)that);
      return false;
    }

    public boolean equals(appendOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(appendOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("appendOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendOrder_resultStandardSchemeFactory implements SchemeFactory {
      public appendOrder_resultStandardScheme getScheme() {
        return new appendOrder_resultStandardScheme();
      }
    }

    private static class appendOrder_resultStandardScheme extends StandardScheme<appendOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendOrder_resultTupleSchemeFactory implements SchemeFactory {
      public appendOrder_resultTupleScheme getScheme() {
        return new appendOrder_resultTupleScheme();
      }
    }

    private static class appendOrder_resultTupleScheme extends TupleScheme<appendOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class mergeOrder_args implements org.apache.thrift.TBase<mergeOrder_args, mergeOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeOrder_args");

    private static final org.apache.thrift.protocol.TField OLD_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldOrderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeOrder_argsTupleSchemeFactory());
    }

    public long oldOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OLD_ORDER_ID((short)1, "oldOrderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OLD_ORDER_ID
            return OLD_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OLDORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OLD_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("oldOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeOrder_args.class, metaDataMap);
    }

    public mergeOrder_args() {
    }

    public mergeOrder_args(
      long oldOrderId)
    {
      this();
      this.oldOrderId = oldOrderId;
      setOldOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeOrder_args(mergeOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.oldOrderId = other.oldOrderId;
    }

    public mergeOrder_args deepCopy() {
      return new mergeOrder_args(this);
    }

    @Override
    public void clear() {
      setOldOrderIdIsSet(false);
      this.oldOrderId = 0;
    }

    public long getOldOrderId() {
      return this.oldOrderId;
    }

    public mergeOrder_args setOldOrderId(long oldOrderId) {
      this.oldOrderId = oldOrderId;
      setOldOrderIdIsSet(true);
      return this;
    }

    public void unsetOldOrderId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDORDERID_ISSET_ID);
    }

    /** Returns true if field oldOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOldOrderId() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDORDERID_ISSET_ID);
    }

    public void setOldOrderIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OLD_ORDER_ID:
        if (value == null) {
          unsetOldOrderId();
        } else {
          setOldOrderId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OLD_ORDER_ID:
        return Long.valueOf(getOldOrderId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OLD_ORDER_ID:
        return isSetOldOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeOrder_args)
        return this.equals((mergeOrder_args)that);
      return false;
    }

    public boolean equals(mergeOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_oldOrderId = true;
      boolean that_present_oldOrderId = true;
      if (this_present_oldOrderId || that_present_oldOrderId) {
        if (!(this_present_oldOrderId && that_present_oldOrderId))
          return false;
        if (this.oldOrderId != that.oldOrderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOldOrderId()).compareTo(other.isSetOldOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldOrderId, other.oldOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeOrder_args(");
      boolean first = true;

      sb.append("oldOrderId:");
      sb.append(this.oldOrderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeOrder_argsStandardSchemeFactory implements SchemeFactory {
      public mergeOrder_argsStandardScheme getScheme() {
        return new mergeOrder_argsStandardScheme();
      }
    }

    private static class mergeOrder_argsStandardScheme extends StandardScheme<mergeOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OLD_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.oldOrderId = iprot.readI64();
                struct.setOldOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(OLD_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.oldOrderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeOrder_argsTupleSchemeFactory implements SchemeFactory {
      public mergeOrder_argsTupleScheme getScheme() {
        return new mergeOrder_argsTupleScheme();
      }
    }

    private static class mergeOrder_argsTupleScheme extends TupleScheme<mergeOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOldOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOldOrderId()) {
          oprot.writeI64(struct.oldOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.oldOrderId = iprot.readI64();
          struct.setOldOrderIdIsSet(true);
        }
      }
    }

  }

  public static class mergeOrder_result implements org.apache.thrift.TBase<mergeOrder_result, mergeOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new mergeOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new mergeOrder_resultTupleSchemeFactory());
    }

    public long success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeOrder_result.class, metaDataMap);
    }

    public mergeOrder_result() {
    }

    public mergeOrder_result(
      long success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeOrder_result(mergeOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public mergeOrder_result deepCopy() {
      return new mergeOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public mergeOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public mergeOrder_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mergeOrder_result)
        return this.equals((mergeOrder_result)that);
      return false;
    }

    public boolean equals(mergeOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(mergeOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mergeOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeOrder_resultStandardSchemeFactory implements SchemeFactory {
      public mergeOrder_resultStandardScheme getScheme() {
        return new mergeOrder_resultStandardScheme();
      }
    }

    private static class mergeOrder_resultStandardScheme extends StandardScheme<mergeOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeOrder_resultTupleSchemeFactory implements SchemeFactory {
      public mergeOrder_resultTupleScheme getScheme() {
        return new mergeOrder_resultTupleScheme();
      }
    }

    private static class mergeOrder_resultTupleScheme extends TupleScheme<mergeOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class addOrderLine_args implements org.apache.thrift.TBase<addOrderLine_args, addOrderLine_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOrderLine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrderLine_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField QUONTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quontity", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrderLine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrderLine_argsTupleSchemeFactory());
    }

    public long productId; // required
    public double quontity; // required
    /**
     * 
     * @see PriceType
     */
    public PriceType priceType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId"),
      QUONTITY((short)2, "quontity"),
      /**
       * 
       * @see PriceType
       */
      PRICE_TYPE((short)3, "priceType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          case 2: // QUONTITY
            return QUONTITY;
          case 3: // PRICE_TYPE
            return PRICE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private static final int __QUONTITY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.QUONTITY, new org.apache.thrift.meta_data.FieldMetaData("quontity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrderLine_args.class, metaDataMap);
    }

    public addOrderLine_args() {
    }

    public addOrderLine_args(
      long productId,
      double quontity,
      PriceType priceType)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
      this.quontity = quontity;
      setQuontityIsSet(true);
      this.priceType = priceType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrderLine_args(addOrderLine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
      this.quontity = other.quontity;
      if (other.isSetPriceType()) {
        this.priceType = other.priceType;
      }
    }

    public addOrderLine_args deepCopy() {
      return new addOrderLine_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
      setQuontityIsSet(false);
      this.quontity = 0.0;
      this.priceType = null;
    }

    public long getProductId() {
      return this.productId;
    }

    public addOrderLine_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public double getQuontity() {
      return this.quontity;
    }

    public addOrderLine_args setQuontity(double quontity) {
      this.quontity = quontity;
      setQuontityIsSet(true);
      return this;
    }

    public void unsetQuontity() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUONTITY_ISSET_ID);
    }

    /** Returns true if field quontity is set (has been assigned a value) and false otherwise */
    public boolean isSetQuontity() {
      return EncodingUtils.testBit(__isset_bitfield, __QUONTITY_ISSET_ID);
    }

    public void setQuontityIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUONTITY_ISSET_ID, value);
    }

    /**
     * 
     * @see PriceType
     */
    public PriceType getPriceType() {
      return this.priceType;
    }

    /**
     * 
     * @see PriceType
     */
    public addOrderLine_args setPriceType(PriceType priceType) {
      this.priceType = priceType;
      return this;
    }

    public void unsetPriceType() {
      this.priceType = null;
    }

    /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
    public boolean isSetPriceType() {
      return this.priceType != null;
    }

    public void setPriceTypeIsSet(boolean value) {
      if (!value) {
        this.priceType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      case QUONTITY:
        if (value == null) {
          unsetQuontity();
        } else {
          setQuontity((Double)value);
        }
        break;

      case PRICE_TYPE:
        if (value == null) {
          unsetPriceType();
        } else {
          setPriceType((PriceType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      case QUONTITY:
        return Double.valueOf(getQuontity());

      case PRICE_TYPE:
        return getPriceType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      case QUONTITY:
        return isSetQuontity();
      case PRICE_TYPE:
        return isSetPriceType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrderLine_args)
        return this.equals((addOrderLine_args)that);
      return false;
    }

    public boolean equals(addOrderLine_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      boolean this_present_quontity = true;
      boolean that_present_quontity = true;
      if (this_present_quontity || that_present_quontity) {
        if (!(this_present_quontity && that_present_quontity))
          return false;
        if (this.quontity != that.quontity)
          return false;
      }

      boolean this_present_priceType = true && this.isSetPriceType();
      boolean that_present_priceType = true && that.isSetPriceType();
      if (this_present_priceType || that_present_priceType) {
        if (!(this_present_priceType && that_present_priceType))
          return false;
        if (!this.priceType.equals(that.priceType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addOrderLine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuontity()).compareTo(other.isSetQuontity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuontity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quontity, other.quontity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(other.isSetPriceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPriceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, other.priceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrderLine_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("quontity:");
      sb.append(this.quontity);
      first = false;
      if (!first) sb.append(", ");
      sb.append("priceType:");
      if (this.priceType == null) {
        sb.append("null");
      } else {
        sb.append(this.priceType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrderLine_argsStandardSchemeFactory implements SchemeFactory {
      public addOrderLine_argsStandardScheme getScheme() {
        return new addOrderLine_argsStandardScheme();
      }
    }

    private static class addOrderLine_argsStandardScheme extends StandardScheme<addOrderLine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrderLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUONTITY
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.quontity = iprot.readDouble();
                struct.setQuontityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PRICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.priceType = PriceType.findByValue(iprot.readI32());
                struct.setPriceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrderLine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUONTITY_FIELD_DESC);
        oprot.writeDouble(struct.quontity);
        oprot.writeFieldEnd();
        if (struct.priceType != null) {
          oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.priceType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrderLine_argsTupleSchemeFactory implements SchemeFactory {
      public addOrderLine_argsTupleScheme getScheme() {
        return new addOrderLine_argsTupleScheme();
      }
    }

    private static class addOrderLine_argsTupleScheme extends TupleScheme<addOrderLine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrderLine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        if (struct.isSetQuontity()) {
          optionals.set(1);
        }
        if (struct.isSetPriceType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
        if (struct.isSetQuontity()) {
          oprot.writeDouble(struct.quontity);
        }
        if (struct.isSetPriceType()) {
          oprot.writeI32(struct.priceType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrderLine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.quontity = iprot.readDouble();
          struct.setQuontityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.priceType = PriceType.findByValue(iprot.readI32());
          struct.setPriceTypeIsSet(true);
        }
      }
    }

  }

  public static class addOrderLine_result implements org.apache.thrift.TBase<addOrderLine_result, addOrderLine_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOrderLine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOrderLine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOrderLine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOrderLine_resultTupleSchemeFactory());
    }

    public OrderLine success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderLine.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOrderLine_result.class, metaDataMap);
    }

    public addOrderLine_result() {
    }

    public addOrderLine_result(
      OrderLine success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOrderLine_result(addOrderLine_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderLine(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public addOrderLine_result deepCopy() {
      return new addOrderLine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public OrderLine getSuccess() {
      return this.success;
    }

    public addOrderLine_result setSuccess(OrderLine success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public addOrderLine_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderLine)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOrderLine_result)
        return this.equals((addOrderLine_result)that);
      return false;
    }

    public boolean equals(addOrderLine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addOrderLine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOrderLine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOrderLine_resultStandardSchemeFactory implements SchemeFactory {
      public addOrderLine_resultStandardScheme getScheme() {
        return new addOrderLine_resultStandardScheme();
      }
    }

    private static class addOrderLine_resultStandardScheme extends StandardScheme<addOrderLine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOrderLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderLine();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOrderLine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOrderLine_resultTupleSchemeFactory implements SchemeFactory {
      public addOrderLine_resultTupleScheme getScheme() {
        return new addOrderLine_resultTupleScheme();
      }
    }

    private static class addOrderLine_resultTupleScheme extends TupleScheme<addOrderLine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOrderLine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOrderLine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderLine();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class removeOrderLine_args implements org.apache.thrift.TBase<removeOrderLine_args, removeOrderLine_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeOrderLine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOrderLine_args");

    private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOrderLine_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOrderLine_argsTupleSchemeFactory());
    }

    public long productId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PRODUCT_ID((short)1, "productId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PRODUCT_ID
            return PRODUCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRODUCTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOrderLine_args.class, metaDataMap);
    }

    public removeOrderLine_args() {
    }

    public removeOrderLine_args(
      long productId)
    {
      this();
      this.productId = productId;
      setProductIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOrderLine_args(removeOrderLine_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.productId = other.productId;
    }

    public removeOrderLine_args deepCopy() {
      return new removeOrderLine_args(this);
    }

    @Override
    public void clear() {
      setProductIdIsSet(false);
      this.productId = 0;
    }

    public long getProductId() {
      return this.productId;
    }

    public removeOrderLine_args setProductId(long productId) {
      this.productId = productId;
      setProductIdIsSet(true);
      return this;
    }

    public void unsetProductId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
    }

    public void setProductIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PRODUCT_ID:
        if (value == null) {
          unsetProductId();
        } else {
          setProductId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PRODUCT_ID:
        return Long.valueOf(getProductId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PRODUCT_ID:
        return isSetProductId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOrderLine_args)
        return this.equals((removeOrderLine_args)that);
      return false;
    }

    public boolean equals(removeOrderLine_args that) {
      if (that == null)
        return false;

      boolean this_present_productId = true;
      boolean that_present_productId = true;
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (this.productId != that.productId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeOrderLine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOrderLine_args(");
      boolean first = true;

      sb.append("productId:");
      sb.append(this.productId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOrderLine_argsStandardSchemeFactory implements SchemeFactory {
      public removeOrderLine_argsStandardScheme getScheme() {
        return new removeOrderLine_argsStandardScheme();
      }
    }

    private static class removeOrderLine_argsStandardScheme extends StandardScheme<removeOrderLine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOrderLine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PRODUCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.productId = iprot.readI64();
                struct.setProductIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOrderLine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeI64(struct.productId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOrderLine_argsTupleSchemeFactory implements SchemeFactory {
      public removeOrderLine_argsTupleScheme getScheme() {
        return new removeOrderLine_argsTupleScheme();
      }
    }

    private static class removeOrderLine_argsTupleScheme extends TupleScheme<removeOrderLine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOrderLine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProductId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProductId()) {
          oprot.writeI64(struct.productId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOrderLine_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.productId = iprot.readI64();
          struct.setProductIdIsSet(true);
        }
      }
    }

  }

  public static class removeOrderLine_result implements org.apache.thrift.TBase<removeOrderLine_result, removeOrderLine_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeOrderLine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeOrderLine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeOrderLine_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeOrderLine_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeOrderLine_result.class, metaDataMap);
    }

    public removeOrderLine_result() {
    }

    public removeOrderLine_result(
      boolean success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeOrderLine_result(removeOrderLine_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public removeOrderLine_result deepCopy() {
      return new removeOrderLine_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeOrderLine_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public removeOrderLine_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeOrderLine_result)
        return this.equals((removeOrderLine_result)that);
      return false;
    }

    public boolean equals(removeOrderLine_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removeOrderLine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeOrderLine_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeOrderLine_resultStandardSchemeFactory implements SchemeFactory {
      public removeOrderLine_resultStandardScheme getScheme() {
        return new removeOrderLine_resultStandardScheme();
      }
    }

    private static class removeOrderLine_resultStandardScheme extends StandardScheme<removeOrderLine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeOrderLine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeOrderLine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeOrderLine_resultTupleSchemeFactory implements SchemeFactory {
      public removeOrderLine_resultTupleScheme getScheme() {
        return new removeOrderLine_resultTupleScheme();
      }
    }

    private static class removeOrderLine_resultTupleScheme extends TupleScheme<removeOrderLine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeOrderLine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeOrderLine_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setOrderDeliveryType_args implements org.apache.thrift.TBase<setOrderDeliveryType_args, setOrderDeliveryType_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderDeliveryType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderDeliveryType_args");

    private static final org.apache.thrift.protocol.TField DELIVERY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryType", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderDeliveryType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderDeliveryType_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see DeliveryType
     */
    public DeliveryType deliveryType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see DeliveryType
       */
      DELIVERY_TYPE((short)1, "deliveryType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DELIVERY_TYPE
            return DELIVERY_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DELIVERY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("deliveryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderDeliveryType_args.class, metaDataMap);
    }

    public setOrderDeliveryType_args() {
    }

    public setOrderDeliveryType_args(
      DeliveryType deliveryType)
    {
      this();
      this.deliveryType = deliveryType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderDeliveryType_args(setOrderDeliveryType_args other) {
      if (other.isSetDeliveryType()) {
        this.deliveryType = other.deliveryType;
      }
    }

    public setOrderDeliveryType_args deepCopy() {
      return new setOrderDeliveryType_args(this);
    }

    @Override
    public void clear() {
      this.deliveryType = null;
    }

    /**
     * 
     * @see DeliveryType
     */
    public DeliveryType getDeliveryType() {
      return this.deliveryType;
    }

    /**
     * 
     * @see DeliveryType
     */
    public setOrderDeliveryType_args setDeliveryType(DeliveryType deliveryType) {
      this.deliveryType = deliveryType;
      return this;
    }

    public void unsetDeliveryType() {
      this.deliveryType = null;
    }

    /** Returns true if field deliveryType is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryType() {
      return this.deliveryType != null;
    }

    public void setDeliveryTypeIsSet(boolean value) {
      if (!value) {
        this.deliveryType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DELIVERY_TYPE:
        if (value == null) {
          unsetDeliveryType();
        } else {
          setDeliveryType((DeliveryType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DELIVERY_TYPE:
        return getDeliveryType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DELIVERY_TYPE:
        return isSetDeliveryType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderDeliveryType_args)
        return this.equals((setOrderDeliveryType_args)that);
      return false;
    }

    public boolean equals(setOrderDeliveryType_args that) {
      if (that == null)
        return false;

      boolean this_present_deliveryType = true && this.isSetDeliveryType();
      boolean that_present_deliveryType = true && that.isSetDeliveryType();
      if (this_present_deliveryType || that_present_deliveryType) {
        if (!(this_present_deliveryType && that_present_deliveryType))
          return false;
        if (!this.deliveryType.equals(that.deliveryType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderDeliveryType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeliveryType()).compareTo(other.isSetDeliveryType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryType, other.deliveryType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderDeliveryType_args(");
      boolean first = true;

      sb.append("deliveryType:");
      if (this.deliveryType == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderDeliveryType_argsStandardSchemeFactory implements SchemeFactory {
      public setOrderDeliveryType_argsStandardScheme getScheme() {
        return new setOrderDeliveryType_argsStandardScheme();
      }
    }

    private static class setOrderDeliveryType_argsStandardScheme extends StandardScheme<setOrderDeliveryType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderDeliveryType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DELIVERY_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deliveryType = DeliveryType.findByValue(iprot.readI32());
                struct.setDeliveryTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderDeliveryType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deliveryType != null) {
          oprot.writeFieldBegin(DELIVERY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.deliveryType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderDeliveryType_argsTupleSchemeFactory implements SchemeFactory {
      public setOrderDeliveryType_argsTupleScheme getScheme() {
        return new setOrderDeliveryType_argsTupleScheme();
      }
    }

    private static class setOrderDeliveryType_argsTupleScheme extends TupleScheme<setOrderDeliveryType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeliveryType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeliveryType()) {
          oprot.writeI32(struct.deliveryType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deliveryType = DeliveryType.findByValue(iprot.readI32());
          struct.setDeliveryTypeIsSet(true);
        }
      }
    }

  }

  public static class setOrderDeliveryType_result implements org.apache.thrift.TBase<setOrderDeliveryType_result, setOrderDeliveryType_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderDeliveryType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderDeliveryType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderDeliveryType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderDeliveryType_resultTupleSchemeFactory());
    }

    public OrderDetails success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetails.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderDeliveryType_result.class, metaDataMap);
    }

    public setOrderDeliveryType_result() {
    }

    public setOrderDeliveryType_result(
      OrderDetails success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderDeliveryType_result(setOrderDeliveryType_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderDetails(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setOrderDeliveryType_result deepCopy() {
      return new setOrderDeliveryType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public OrderDetails getSuccess() {
      return this.success;
    }

    public setOrderDeliveryType_result setSuccess(OrderDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setOrderDeliveryType_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderDetails)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderDeliveryType_result)
        return this.equals((setOrderDeliveryType_result)that);
      return false;
    }

    public boolean equals(setOrderDeliveryType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderDeliveryType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderDeliveryType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderDeliveryType_resultStandardSchemeFactory implements SchemeFactory {
      public setOrderDeliveryType_resultStandardScheme getScheme() {
        return new setOrderDeliveryType_resultStandardScheme();
      }
    }

    private static class setOrderDeliveryType_resultStandardScheme extends StandardScheme<setOrderDeliveryType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderDeliveryType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderDeliveryType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderDeliveryType_resultTupleSchemeFactory implements SchemeFactory {
      public setOrderDeliveryType_resultTupleScheme getScheme() {
        return new setOrderDeliveryType_resultTupleScheme();
      }
    }

    private static class setOrderDeliveryType_resultTupleScheme extends TupleScheme<setOrderDeliveryType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setOrderPaymentType_args implements org.apache.thrift.TBase<setOrderPaymentType_args, setOrderPaymentType_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderPaymentType_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderPaymentType_args");

    private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentType", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderPaymentType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderPaymentType_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType paymentType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see PaymentType
       */
      PAYMENT_TYPE((short)1, "paymentType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAYMENT_TYPE
            return PAYMENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderPaymentType_args.class, metaDataMap);
    }

    public setOrderPaymentType_args() {
    }

    public setOrderPaymentType_args(
      PaymentType paymentType)
    {
      this();
      this.paymentType = paymentType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderPaymentType_args(setOrderPaymentType_args other) {
      if (other.isSetPaymentType()) {
        this.paymentType = other.paymentType;
      }
    }

    public setOrderPaymentType_args deepCopy() {
      return new setOrderPaymentType_args(this);
    }

    @Override
    public void clear() {
      this.paymentType = null;
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType getPaymentType() {
      return this.paymentType;
    }

    /**
     * 
     * @see PaymentType
     */
    public setOrderPaymentType_args setPaymentType(PaymentType paymentType) {
      this.paymentType = paymentType;
      return this;
    }

    public void unsetPaymentType() {
      this.paymentType = null;
    }

    /** Returns true if field paymentType is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentType() {
      return this.paymentType != null;
    }

    public void setPaymentTypeIsSet(boolean value) {
      if (!value) {
        this.paymentType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAYMENT_TYPE:
        if (value == null) {
          unsetPaymentType();
        } else {
          setPaymentType((PaymentType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAYMENT_TYPE:
        return getPaymentType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAYMENT_TYPE:
        return isSetPaymentType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderPaymentType_args)
        return this.equals((setOrderPaymentType_args)that);
      return false;
    }

    public boolean equals(setOrderPaymentType_args that) {
      if (that == null)
        return false;

      boolean this_present_paymentType = true && this.isSetPaymentType();
      boolean that_present_paymentType = true && that.isSetPaymentType();
      if (this_present_paymentType || that_present_paymentType) {
        if (!(this_present_paymentType && that_present_paymentType))
          return false;
        if (!this.paymentType.equals(that.paymentType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderPaymentType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(other.isSetPaymentType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, other.paymentType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderPaymentType_args(");
      boolean first = true;

      sb.append("paymentType:");
      if (this.paymentType == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderPaymentType_argsStandardSchemeFactory implements SchemeFactory {
      public setOrderPaymentType_argsStandardScheme getScheme() {
        return new setOrderPaymentType_argsStandardScheme();
      }
    }

    private static class setOrderPaymentType_argsStandardScheme extends StandardScheme<setOrderPaymentType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderPaymentType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAYMENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.paymentType = PaymentType.findByValue(iprot.readI32());
                struct.setPaymentTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderPaymentType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.paymentType != null) {
          oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.paymentType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderPaymentType_argsTupleSchemeFactory implements SchemeFactory {
      public setOrderPaymentType_argsTupleScheme getScheme() {
        return new setOrderPaymentType_argsTupleScheme();
      }
    }

    private static class setOrderPaymentType_argsTupleScheme extends TupleScheme<setOrderPaymentType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPaymentType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPaymentType()) {
          oprot.writeI32(struct.paymentType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.paymentType = PaymentType.findByValue(iprot.readI32());
          struct.setPaymentTypeIsSet(true);
        }
      }
    }

  }

  public static class setOrderPaymentType_result implements org.apache.thrift.TBase<setOrderPaymentType_result, setOrderPaymentType_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderPaymentType_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderPaymentType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderPaymentType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderPaymentType_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderPaymentType_result.class, metaDataMap);
    }

    public setOrderPaymentType_result() {
    }

    public setOrderPaymentType_result(
      boolean success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderPaymentType_result(setOrderPaymentType_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setOrderPaymentType_result deepCopy() {
      return new setOrderPaymentType_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setOrderPaymentType_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setOrderPaymentType_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderPaymentType_result)
        return this.equals((setOrderPaymentType_result)that);
      return false;
    }

    public boolean equals(setOrderPaymentType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderPaymentType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderPaymentType_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderPaymentType_resultStandardSchemeFactory implements SchemeFactory {
      public setOrderPaymentType_resultStandardScheme getScheme() {
        return new setOrderPaymentType_resultStandardScheme();
      }
    }

    private static class setOrderPaymentType_resultStandardScheme extends StandardScheme<setOrderPaymentType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderPaymentType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderPaymentType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderPaymentType_resultTupleSchemeFactory implements SchemeFactory {
      public setOrderPaymentType_resultTupleScheme getScheme() {
        return new setOrderPaymentType_resultTupleScheme();
      }
    }

    private static class setOrderPaymentType_resultTupleScheme extends TupleScheme<setOrderPaymentType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderPaymentType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setOrderDeliveryAddress_args implements org.apache.thrift.TBase<setOrderDeliveryAddress_args, setOrderDeliveryAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderDeliveryAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderDeliveryAddress_args");

    private static final org.apache.thrift.protocol.TField DELIVERY_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryAddress", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderDeliveryAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderDeliveryAddress_argsTupleSchemeFactory());
    }

    public com.vmesteonline.be.PostalAddress deliveryAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DELIVERY_ADDRESS((short)1, "deliveryAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DELIVERY_ADDRESS
            return DELIVERY_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DELIVERY_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("deliveryAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.PostalAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderDeliveryAddress_args.class, metaDataMap);
    }

    public setOrderDeliveryAddress_args() {
    }

    public setOrderDeliveryAddress_args(
      com.vmesteonline.be.PostalAddress deliveryAddress)
    {
      this();
      this.deliveryAddress = deliveryAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderDeliveryAddress_args(setOrderDeliveryAddress_args other) {
      if (other.isSetDeliveryAddress()) {
        this.deliveryAddress = new com.vmesteonline.be.PostalAddress(other.deliveryAddress);
      }
    }

    public setOrderDeliveryAddress_args deepCopy() {
      return new setOrderDeliveryAddress_args(this);
    }

    @Override
    public void clear() {
      this.deliveryAddress = null;
    }

    public com.vmesteonline.be.PostalAddress getDeliveryAddress() {
      return this.deliveryAddress;
    }

    public setOrderDeliveryAddress_args setDeliveryAddress(com.vmesteonline.be.PostalAddress deliveryAddress) {
      this.deliveryAddress = deliveryAddress;
      return this;
    }

    public void unsetDeliveryAddress() {
      this.deliveryAddress = null;
    }

    /** Returns true if field deliveryAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetDeliveryAddress() {
      return this.deliveryAddress != null;
    }

    public void setDeliveryAddressIsSet(boolean value) {
      if (!value) {
        this.deliveryAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DELIVERY_ADDRESS:
        if (value == null) {
          unsetDeliveryAddress();
        } else {
          setDeliveryAddress((com.vmesteonline.be.PostalAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DELIVERY_ADDRESS:
        return getDeliveryAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DELIVERY_ADDRESS:
        return isSetDeliveryAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderDeliveryAddress_args)
        return this.equals((setOrderDeliveryAddress_args)that);
      return false;
    }

    public boolean equals(setOrderDeliveryAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_deliveryAddress = true && this.isSetDeliveryAddress();
      boolean that_present_deliveryAddress = true && that.isSetDeliveryAddress();
      if (this_present_deliveryAddress || that_present_deliveryAddress) {
        if (!(this_present_deliveryAddress && that_present_deliveryAddress))
          return false;
        if (!this.deliveryAddress.equals(that.deliveryAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderDeliveryAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDeliveryAddress()).compareTo(other.isSetDeliveryAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeliveryAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryAddress, other.deliveryAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderDeliveryAddress_args(");
      boolean first = true;

      sb.append("deliveryAddress:");
      if (this.deliveryAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (deliveryAddress != null) {
        deliveryAddress.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderDeliveryAddress_argsStandardSchemeFactory implements SchemeFactory {
      public setOrderDeliveryAddress_argsStandardScheme getScheme() {
        return new setOrderDeliveryAddress_argsStandardScheme();
      }
    }

    private static class setOrderDeliveryAddress_argsStandardScheme extends StandardScheme<setOrderDeliveryAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderDeliveryAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DELIVERY_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.deliveryAddress = new com.vmesteonline.be.PostalAddress();
                struct.deliveryAddress.read(iprot);
                struct.setDeliveryAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderDeliveryAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deliveryAddress != null) {
          oprot.writeFieldBegin(DELIVERY_ADDRESS_FIELD_DESC);
          struct.deliveryAddress.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderDeliveryAddress_argsTupleSchemeFactory implements SchemeFactory {
      public setOrderDeliveryAddress_argsTupleScheme getScheme() {
        return new setOrderDeliveryAddress_argsTupleScheme();
      }
    }

    private static class setOrderDeliveryAddress_argsTupleScheme extends TupleScheme<setOrderDeliveryAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeliveryAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeliveryAddress()) {
          struct.deliveryAddress.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deliveryAddress = new com.vmesteonline.be.PostalAddress();
          struct.deliveryAddress.read(iprot);
          struct.setDeliveryAddressIsSet(true);
        }
      }
    }

  }

  public static class setOrderDeliveryAddress_result implements org.apache.thrift.TBase<setOrderDeliveryAddress_result, setOrderDeliveryAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<setOrderDeliveryAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setOrderDeliveryAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setOrderDeliveryAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setOrderDeliveryAddress_resultTupleSchemeFactory());
    }

    public OrderDetails success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetails.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrderDeliveryAddress_result.class, metaDataMap);
    }

    public setOrderDeliveryAddress_result() {
    }

    public setOrderDeliveryAddress_result(
      OrderDetails success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setOrderDeliveryAddress_result(setOrderDeliveryAddress_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderDetails(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public setOrderDeliveryAddress_result deepCopy() {
      return new setOrderDeliveryAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public OrderDetails getSuccess() {
      return this.success;
    }

    public setOrderDeliveryAddress_result setSuccess(OrderDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public setOrderDeliveryAddress_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderDetails)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setOrderDeliveryAddress_result)
        return this.equals((setOrderDeliveryAddress_result)that);
      return false;
    }

    public boolean equals(setOrderDeliveryAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setOrderDeliveryAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setOrderDeliveryAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setOrderDeliveryAddress_resultStandardSchemeFactory implements SchemeFactory {
      public setOrderDeliveryAddress_resultStandardScheme getScheme() {
        return new setOrderDeliveryAddress_resultStandardScheme();
      }
    }

    private static class setOrderDeliveryAddress_resultStandardScheme extends StandardScheme<setOrderDeliveryAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setOrderDeliveryAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setOrderDeliveryAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setOrderDeliveryAddress_resultTupleSchemeFactory implements SchemeFactory {
      public setOrderDeliveryAddress_resultTupleScheme getScheme() {
        return new setOrderDeliveryAddress_resultTupleScheme();
      }
    }

    private static class setOrderDeliveryAddress_resultTupleScheme extends TupleScheme<setOrderDeliveryAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setOrderDeliveryAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

}
