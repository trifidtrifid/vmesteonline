/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be.shop;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrderLine implements org.apache.thrift.TBase<OrderLine, OrderLine._Fields>, java.io.Serializable, Cloneable, Comparable<OrderLine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderLine");

  private static final org.apache.thrift.protocol.TField PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("product", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField QUONTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quontity", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderLineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderLineTupleSchemeFactory());
  }

  public Product product; // required
  public double quontity; // required
  /**
   * 
   * @see PriceType
   */
  public PriceType priceType; // required
  public double price; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT((short)1, "product"),
    QUONTITY((short)2, "quontity"),
    /**
     * 
     * @see PriceType
     */
    PRICE_TYPE((short)3, "priceType"),
    PRICE((short)4, "price");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT
          return PRODUCT;
        case 2: // QUONTITY
          return QUONTITY;
        case 3: // PRICE_TYPE
          return PRICE_TYPE;
        case 4: // PRICE
          return PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUONTITY_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("product", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class)));
    tmpMap.put(_Fields.QUONTITY, new org.apache.thrift.meta_data.FieldMetaData("quontity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PriceType.class)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderLine.class, metaDataMap);
  }

  public OrderLine() {
  }

  public OrderLine(
    Product product,
    double quontity,
    PriceType priceType,
    double price)
  {
    this();
    this.product = product;
    this.quontity = quontity;
    setQuontityIsSet(true);
    this.priceType = priceType;
    this.price = price;
    setPriceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderLine(OrderLine other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProduct()) {
      this.product = new Product(other.product);
    }
    this.quontity = other.quontity;
    if (other.isSetPriceType()) {
      this.priceType = other.priceType;
    }
    this.price = other.price;
  }

  public OrderLine deepCopy() {
    return new OrderLine(this);
  }

  @Override
  public void clear() {
    this.product = null;
    setQuontityIsSet(false);
    this.quontity = 0.0;
    this.priceType = null;
    setPriceIsSet(false);
    this.price = 0.0;
  }

  public Product getProduct() {
    return this.product;
  }

  public OrderLine setProduct(Product product) {
    this.product = product;
    return this;
  }

  public void unsetProduct() {
    this.product = null;
  }

  /** Returns true if field product is set (has been assigned a value) and false otherwise */
  public boolean isSetProduct() {
    return this.product != null;
  }

  public void setProductIsSet(boolean value) {
    if (!value) {
      this.product = null;
    }
  }

  public double getQuontity() {
    return this.quontity;
  }

  public OrderLine setQuontity(double quontity) {
    this.quontity = quontity;
    setQuontityIsSet(true);
    return this;
  }

  public void unsetQuontity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUONTITY_ISSET_ID);
  }

  /** Returns true if field quontity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuontity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUONTITY_ISSET_ID);
  }

  public void setQuontityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUONTITY_ISSET_ID, value);
  }

  /**
   * 
   * @see PriceType
   */
  public PriceType getPriceType() {
    return this.priceType;
  }

  /**
   * 
   * @see PriceType
   */
  public OrderLine setPriceType(PriceType priceType) {
    this.priceType = priceType;
    return this;
  }

  public void unsetPriceType() {
    this.priceType = null;
  }

  /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceType() {
    return this.priceType != null;
  }

  public void setPriceTypeIsSet(boolean value) {
    if (!value) {
      this.priceType = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public OrderLine setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT:
      if (value == null) {
        unsetProduct();
      } else {
        setProduct((Product)value);
      }
      break;

    case QUONTITY:
      if (value == null) {
        unsetQuontity();
      } else {
        setQuontity((Double)value);
      }
      break;

    case PRICE_TYPE:
      if (value == null) {
        unsetPriceType();
      } else {
        setPriceType((PriceType)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT:
      return getProduct();

    case QUONTITY:
      return Double.valueOf(getQuontity());

    case PRICE_TYPE:
      return getPriceType();

    case PRICE:
      return Double.valueOf(getPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT:
      return isSetProduct();
    case QUONTITY:
      return isSetQuontity();
    case PRICE_TYPE:
      return isSetPriceType();
    case PRICE:
      return isSetPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderLine)
      return this.equals((OrderLine)that);
    return false;
  }

  public boolean equals(OrderLine that) {
    if (that == null)
      return false;

    boolean this_present_product = true && this.isSetProduct();
    boolean that_present_product = true && that.isSetProduct();
    if (this_present_product || that_present_product) {
      if (!(this_present_product && that_present_product))
        return false;
      if (!this.product.equals(that.product))
        return false;
    }

    boolean this_present_quontity = true;
    boolean that_present_quontity = true;
    if (this_present_quontity || that_present_quontity) {
      if (!(this_present_quontity && that_present_quontity))
        return false;
      if (this.quontity != that.quontity)
        return false;
    }

    boolean this_present_priceType = true && this.isSetPriceType();
    boolean that_present_priceType = true && that.isSetPriceType();
    if (this_present_priceType || that_present_priceType) {
      if (!(this_present_priceType && that_present_priceType))
        return false;
      if (!this.priceType.equals(that.priceType))
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OrderLine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProduct()).compareTo(other.isSetProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProduct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.product, other.product);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuontity()).compareTo(other.isSetQuontity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuontity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quontity, other.quontity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(other.isSetPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, other.priceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderLine(");
    boolean first = true;

    sb.append("product:");
    if (this.product == null) {
      sb.append("null");
    } else {
      sb.append(this.product);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quontity:");
    sb.append(this.quontity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priceType:");
    if (this.priceType == null) {
      sb.append("null");
    } else {
      sb.append(this.priceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (product != null) {
      product.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderLineStandardSchemeFactory implements SchemeFactory {
    public OrderLineStandardScheme getScheme() {
      return new OrderLineStandardScheme();
    }
  }

  private static class OrderLineStandardScheme extends StandardScheme<OrderLine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderLine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.product = new Product();
              struct.product.read(iprot);
              struct.setProductIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUONTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quontity = iprot.readDouble();
              struct.setQuontityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceType = PriceType.findByValue(iprot.readI32());
              struct.setPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderLine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.product != null) {
        oprot.writeFieldBegin(PRODUCT_FIELD_DESC);
        struct.product.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUONTITY_FIELD_DESC);
      oprot.writeDouble(struct.quontity);
      oprot.writeFieldEnd();
      if (struct.priceType != null) {
        oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.priceType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeDouble(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderLineTupleSchemeFactory implements SchemeFactory {
    public OrderLineTupleScheme getScheme() {
      return new OrderLineTupleScheme();
    }
  }

  private static class OrderLineTupleScheme extends TupleScheme<OrderLine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderLine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProduct()) {
        optionals.set(0);
      }
      if (struct.isSetQuontity()) {
        optionals.set(1);
      }
      if (struct.isSetPriceType()) {
        optionals.set(2);
      }
      if (struct.isSetPrice()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetProduct()) {
        struct.product.write(oprot);
      }
      if (struct.isSetQuontity()) {
        oprot.writeDouble(struct.quontity);
      }
      if (struct.isSetPriceType()) {
        oprot.writeI32(struct.priceType.getValue());
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderLine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.product = new Product();
        struct.product.read(iprot);
        struct.setProductIsSet(true);
      }
      if (incoming.get(1)) {
        struct.quontity = iprot.readDouble();
        struct.setQuontityIsSet(true);
      }
      if (incoming.get(2)) {
        struct.priceType = PriceType.findByValue(iprot.readI32());
        struct.setPriceTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
    }
  }

}

