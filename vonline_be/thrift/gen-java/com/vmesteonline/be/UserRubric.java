/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserRubric implements org.apache.thrift.TBase<UserRubric, UserRubric._Fields>, java.io.Serializable, Cloneable, Comparable<UserRubric> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserRubric");

  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RUBRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("rubric", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField GRP_FIELD_DESC = new org.apache.thrift.protocol.TField("grp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIBED_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribed", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("topics", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserRubricStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserRubricTupleSchemeFactory());
  }

  public int user; // required
  public int rubric; // required
  public int grp; // optional
  public int subscribed; // required
  public int topics; // required
  public int messages; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER((short)1, "user"),
    RUBRIC((short)2, "rubric"),
    GRP((short)3, "grp"),
    SUBSCRIBED((short)4, "subscribed"),
    TOPICS((short)5, "topics"),
    MESSAGES((short)6, "messages");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER
          return USER;
        case 2: // RUBRIC
          return RUBRIC;
        case 3: // GRP
          return GRP;
        case 4: // SUBSCRIBED
          return SUBSCRIBED;
        case 5: // TOPICS
          return TOPICS;
        case 6: // MESSAGES
          return MESSAGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USER_ISSET_ID = 0;
  private static final int __RUBRIC_ISSET_ID = 1;
  private static final int __GRP_ISSET_ID = 2;
  private static final int __SUBSCRIBED_ISSET_ID = 3;
  private static final int __TOPICS_ISSET_ID = 4;
  private static final int __MESSAGES_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.GRP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RUBRIC, new org.apache.thrift.meta_data.FieldMetaData("rubric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GRP, new org.apache.thrift.meta_data.FieldMetaData("grp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBSCRIBED, new org.apache.thrift.meta_data.FieldMetaData("subscribed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPICS, new org.apache.thrift.meta_data.FieldMetaData("topics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRubric.class, metaDataMap);
  }

  public UserRubric() {
  }

  public UserRubric(
    int user,
    int rubric,
    int subscribed,
    int topics,
    int messages)
  {
    this();
    this.user = user;
    setUserIsSet(true);
    this.rubric = rubric;
    setRubricIsSet(true);
    this.subscribed = subscribed;
    setSubscribedIsSet(true);
    this.topics = topics;
    setTopicsIsSet(true);
    this.messages = messages;
    setMessagesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserRubric(UserRubric other) {
    __isset_bitfield = other.__isset_bitfield;
    this.user = other.user;
    this.rubric = other.rubric;
    this.grp = other.grp;
    this.subscribed = other.subscribed;
    this.topics = other.topics;
    this.messages = other.messages;
  }

  public UserRubric deepCopy() {
    return new UserRubric(this);
  }

  @Override
  public void clear() {
    setUserIsSet(false);
    this.user = 0;
    setRubricIsSet(false);
    this.rubric = 0;
    setGrpIsSet(false);
    this.grp = 0;
    setSubscribedIsSet(false);
    this.subscribed = 0;
    setTopicsIsSet(false);
    this.topics = 0;
    setMessagesIsSet(false);
    this.messages = 0;
  }

  public int getUser() {
    return this.user;
  }

  public UserRubric setUser(int user) {
    this.user = user;
    setUserIsSet(true);
    return this;
  }

  public void unsetUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
  }

  public void setUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
  }

  public int getRubric() {
    return this.rubric;
  }

  public UserRubric setRubric(int rubric) {
    this.rubric = rubric;
    setRubricIsSet(true);
    return this;
  }

  public void unsetRubric() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  /** Returns true if field rubric is set (has been assigned a value) and false otherwise */
  public boolean isSetRubric() {
    return EncodingUtils.testBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  public void setRubricIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRIC_ISSET_ID, value);
  }

  public int getGrp() {
    return this.grp;
  }

  public UserRubric setGrp(int grp) {
    this.grp = grp;
    setGrpIsSet(true);
    return this;
  }

  public void unsetGrp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GRP_ISSET_ID);
  }

  /** Returns true if field grp is set (has been assigned a value) and false otherwise */
  public boolean isSetGrp() {
    return EncodingUtils.testBit(__isset_bitfield, __GRP_ISSET_ID);
  }

  public void setGrpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GRP_ISSET_ID, value);
  }

  public int getSubscribed() {
    return this.subscribed;
  }

  public UserRubric setSubscribed(int subscribed) {
    this.subscribed = subscribed;
    setSubscribedIsSet(true);
    return this;
  }

  public void unsetSubscribed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID);
  }

  /** Returns true if field subscribed is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribed() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID);
  }

  public void setSubscribedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID, value);
  }

  public int getTopics() {
    return this.topics;
  }

  public UserRubric setTopics(int topics) {
    this.topics = topics;
    setTopicsIsSet(true);
    return this;
  }

  public void unsetTopics() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICS_ISSET_ID);
  }

  /** Returns true if field topics is set (has been assigned a value) and false otherwise */
  public boolean isSetTopics() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICS_ISSET_ID);
  }

  public void setTopicsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICS_ISSET_ID, value);
  }

  public int getMessages() {
    return this.messages;
  }

  public UserRubric setMessages(int messages) {
    this.messages = messages;
    setMessagesIsSet(true);
    return this;
  }

  public void unsetMessages() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGES_ISSET_ID);
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGES_ISSET_ID);
  }

  public void setMessagesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((Integer)value);
      }
      break;

    case RUBRIC:
      if (value == null) {
        unsetRubric();
      } else {
        setRubric((Integer)value);
      }
      break;

    case GRP:
      if (value == null) {
        unsetGrp();
      } else {
        setGrp((Integer)value);
      }
      break;

    case SUBSCRIBED:
      if (value == null) {
        unsetSubscribed();
      } else {
        setSubscribed((Integer)value);
      }
      break;

    case TOPICS:
      if (value == null) {
        unsetTopics();
      } else {
        setTopics((Integer)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER:
      return Integer.valueOf(getUser());

    case RUBRIC:
      return Integer.valueOf(getRubric());

    case GRP:
      return Integer.valueOf(getGrp());

    case SUBSCRIBED:
      return Integer.valueOf(getSubscribed());

    case TOPICS:
      return Integer.valueOf(getTopics());

    case MESSAGES:
      return Integer.valueOf(getMessages());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER:
      return isSetUser();
    case RUBRIC:
      return isSetRubric();
    case GRP:
      return isSetGrp();
    case SUBSCRIBED:
      return isSetSubscribed();
    case TOPICS:
      return isSetTopics();
    case MESSAGES:
      return isSetMessages();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserRubric)
      return this.equals((UserRubric)that);
    return false;
  }

  public boolean equals(UserRubric that) {
    if (that == null)
      return false;

    boolean this_present_user = true;
    boolean that_present_user = true;
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (this.user != that.user)
        return false;
    }

    boolean this_present_rubric = true;
    boolean that_present_rubric = true;
    if (this_present_rubric || that_present_rubric) {
      if (!(this_present_rubric && that_present_rubric))
        return false;
      if (this.rubric != that.rubric)
        return false;
    }

    boolean this_present_grp = true && this.isSetGrp();
    boolean that_present_grp = true && that.isSetGrp();
    if (this_present_grp || that_present_grp) {
      if (!(this_present_grp && that_present_grp))
        return false;
      if (this.grp != that.grp)
        return false;
    }

    boolean this_present_subscribed = true;
    boolean that_present_subscribed = true;
    if (this_present_subscribed || that_present_subscribed) {
      if (!(this_present_subscribed && that_present_subscribed))
        return false;
      if (this.subscribed != that.subscribed)
        return false;
    }

    boolean this_present_topics = true;
    boolean that_present_topics = true;
    if (this_present_topics || that_present_topics) {
      if (!(this_present_topics && that_present_topics))
        return false;
      if (this.topics != that.topics)
        return false;
    }

    boolean this_present_messages = true;
    boolean that_present_messages = true;
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (this.messages != that.messages)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserRubric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRubric()).compareTo(other.isSetRubric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRubric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubric, other.rubric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrp()).compareTo(other.isSetGrp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grp, other.grp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribed()).compareTo(other.isSetSubscribed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribed, other.subscribed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopics()).compareTo(other.isSetTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topics, other.topics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserRubric(");
    boolean first = true;

    sb.append("user:");
    sb.append(this.user);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rubric:");
    sb.append(this.rubric);
    first = false;
    if (isSetGrp()) {
      if (!first) sb.append(", ");
      sb.append("grp:");
      sb.append(this.grp);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("subscribed:");
    sb.append(this.subscribed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topics:");
    sb.append(this.topics);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    sb.append(this.messages);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserRubricStandardSchemeFactory implements SchemeFactory {
    public UserRubricStandardScheme getScheme() {
      return new UserRubricStandardScheme();
    }
  }

  private static class UserRubricStandardScheme extends StandardScheme<UserRubric> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserRubric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.user = iprot.readI32();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RUBRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rubric = iprot.readI32();
              struct.setRubricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GRP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.grp = iprot.readI32();
              struct.setGrpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIBED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subscribed = iprot.readI32();
              struct.setSubscribedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topics = iprot.readI32();
              struct.setTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messages = iprot.readI32();
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserRubric struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_FIELD_DESC);
      oprot.writeI32(struct.user);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUBRIC_FIELD_DESC);
      oprot.writeI32(struct.rubric);
      oprot.writeFieldEnd();
      if (struct.isSetGrp()) {
        oprot.writeFieldBegin(GRP_FIELD_DESC);
        oprot.writeI32(struct.grp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBSCRIBED_FIELD_DESC);
      oprot.writeI32(struct.subscribed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPICS_FIELD_DESC);
      oprot.writeI32(struct.topics);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
      oprot.writeI32(struct.messages);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserRubricTupleSchemeFactory implements SchemeFactory {
    public UserRubricTupleScheme getScheme() {
      return new UserRubricTupleScheme();
    }
  }

  private static class UserRubricTupleScheme extends TupleScheme<UserRubric> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserRubric struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetRubric()) {
        optionals.set(1);
      }
      if (struct.isSetGrp()) {
        optionals.set(2);
      }
      if (struct.isSetSubscribed()) {
        optionals.set(3);
      }
      if (struct.isSetTopics()) {
        optionals.set(4);
      }
      if (struct.isSetMessages()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUser()) {
        oprot.writeI32(struct.user);
      }
      if (struct.isSetRubric()) {
        oprot.writeI32(struct.rubric);
      }
      if (struct.isSetGrp()) {
        oprot.writeI32(struct.grp);
      }
      if (struct.isSetSubscribed()) {
        oprot.writeI32(struct.subscribed);
      }
      if (struct.isSetTopics()) {
        oprot.writeI32(struct.topics);
      }
      if (struct.isSetMessages()) {
        oprot.writeI32(struct.messages);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserRubric struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.user = iprot.readI32();
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rubric = iprot.readI32();
        struct.setRubricIsSet(true);
      }
      if (incoming.get(2)) {
        struct.grp = iprot.readI32();
        struct.setGrpIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subscribed = iprot.readI32();
        struct.setSubscribedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topics = iprot.readI32();
        struct.setTopicsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.messages = iprot.readI32();
        struct.setMessagesIsSet(true);
      }
    }
  }

}

