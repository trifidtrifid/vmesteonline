/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserRubric implements org.apache.thrift.TBase<UserRubric, UserRubric._Fields>, java.io.Serializable, Cloneable, Comparable<UserRubric> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserRubric");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RUBRIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rubricId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField GROU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("grouId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SUBSCRIBED_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribed", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOPICS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("topicsNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MESSAGES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("messagesNum", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserRubricStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserRubricTupleSchemeFactory());
  }

  public long userId; // required
  public long rubricId; // required
  public long grouId; // optional
  public int subscribed; // required
  public int topicsNum; // required
  public int messagesNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    RUBRIC_ID((short)2, "rubricId"),
    GROU_ID((short)3, "grouId"),
    SUBSCRIBED((short)4, "subscribed"),
    TOPICS_NUM((short)5, "topicsNum"),
    MESSAGES_NUM((short)6, "messagesNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // RUBRIC_ID
          return RUBRIC_ID;
        case 3: // GROU_ID
          return GROU_ID;
        case 4: // SUBSCRIBED
          return SUBSCRIBED;
        case 5: // TOPICS_NUM
          return TOPICS_NUM;
        case 6: // MESSAGES_NUM
          return MESSAGES_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __RUBRICID_ISSET_ID = 1;
  private static final int __GROUID_ISSET_ID = 2;
  private static final int __SUBSCRIBED_ISSET_ID = 3;
  private static final int __TOPICSNUM_ISSET_ID = 4;
  private static final int __MESSAGESNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.GROU_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RUBRIC_ID, new org.apache.thrift.meta_data.FieldMetaData("rubricId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROU_ID, new org.apache.thrift.meta_data.FieldMetaData("grouId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUBSCRIBED, new org.apache.thrift.meta_data.FieldMetaData("subscribed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPICS_NUM, new org.apache.thrift.meta_data.FieldMetaData("topicsNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGES_NUM, new org.apache.thrift.meta_data.FieldMetaData("messagesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRubric.class, metaDataMap);
  }

  public UserRubric() {
  }

  public UserRubric(
    long userId,
    long rubricId,
    int subscribed,
    int topicsNum,
    int messagesNum)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.rubricId = rubricId;
    setRubricIdIsSet(true);
    this.subscribed = subscribed;
    setSubscribedIsSet(true);
    this.topicsNum = topicsNum;
    setTopicsNumIsSet(true);
    this.messagesNum = messagesNum;
    setMessagesNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserRubric(UserRubric other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    this.rubricId = other.rubricId;
    this.grouId = other.grouId;
    this.subscribed = other.subscribed;
    this.topicsNum = other.topicsNum;
    this.messagesNum = other.messagesNum;
  }

  public UserRubric deepCopy() {
    return new UserRubric(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setRubricIdIsSet(false);
    this.rubricId = 0;
    setGrouIdIsSet(false);
    this.grouId = 0;
    setSubscribedIsSet(false);
    this.subscribed = 0;
    setTopicsNumIsSet(false);
    this.topicsNum = 0;
    setMessagesNumIsSet(false);
    this.messagesNum = 0;
  }

  public long getUserId() {
    return this.userId;
  }

  public UserRubric setUserId(long userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public long getRubricId() {
    return this.rubricId;
  }

  public UserRubric setRubricId(long rubricId) {
    this.rubricId = rubricId;
    setRubricIdIsSet(true);
    return this;
  }

  public void unsetRubricId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRICID_ISSET_ID);
  }

  /** Returns true if field rubricId is set (has been assigned a value) and false otherwise */
  public boolean isSetRubricId() {
    return EncodingUtils.testBit(__isset_bitfield, __RUBRICID_ISSET_ID);
  }

  public void setRubricIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRICID_ISSET_ID, value);
  }

  public long getGrouId() {
    return this.grouId;
  }

  public UserRubric setGrouId(long grouId) {
    this.grouId = grouId;
    setGrouIdIsSet(true);
    return this;
  }

  public void unsetGrouId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUID_ISSET_ID);
  }

  /** Returns true if field grouId is set (has been assigned a value) and false otherwise */
  public boolean isSetGrouId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUID_ISSET_ID);
  }

  public void setGrouIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUID_ISSET_ID, value);
  }

  public int getSubscribed() {
    return this.subscribed;
  }

  public UserRubric setSubscribed(int subscribed) {
    this.subscribed = subscribed;
    setSubscribedIsSet(true);
    return this;
  }

  public void unsetSubscribed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID);
  }

  /** Returns true if field subscribed is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribed() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID);
  }

  public void setSubscribedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBSCRIBED_ISSET_ID, value);
  }

  public int getTopicsNum() {
    return this.topicsNum;
  }

  public UserRubric setTopicsNum(int topicsNum) {
    this.topicsNum = topicsNum;
    setTopicsNumIsSet(true);
    return this;
  }

  public void unsetTopicsNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICSNUM_ISSET_ID);
  }

  /** Returns true if field topicsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicsNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICSNUM_ISSET_ID);
  }

  public void setTopicsNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICSNUM_ISSET_ID, value);
  }

  public int getMessagesNum() {
    return this.messagesNum;
  }

  public UserRubric setMessagesNum(int messagesNum) {
    this.messagesNum = messagesNum;
    setMessagesNumIsSet(true);
    return this;
  }

  public void unsetMessagesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID);
  }

  /** Returns true if field messagesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMessagesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID);
  }

  public void setMessagesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGESNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Long)value);
      }
      break;

    case RUBRIC_ID:
      if (value == null) {
        unsetRubricId();
      } else {
        setRubricId((Long)value);
      }
      break;

    case GROU_ID:
      if (value == null) {
        unsetGrouId();
      } else {
        setGrouId((Long)value);
      }
      break;

    case SUBSCRIBED:
      if (value == null) {
        unsetSubscribed();
      } else {
        setSubscribed((Integer)value);
      }
      break;

    case TOPICS_NUM:
      if (value == null) {
        unsetTopicsNum();
      } else {
        setTopicsNum((Integer)value);
      }
      break;

    case MESSAGES_NUM:
      if (value == null) {
        unsetMessagesNum();
      } else {
        setMessagesNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Long.valueOf(getUserId());

    case RUBRIC_ID:
      return Long.valueOf(getRubricId());

    case GROU_ID:
      return Long.valueOf(getGrouId());

    case SUBSCRIBED:
      return Integer.valueOf(getSubscribed());

    case TOPICS_NUM:
      return Integer.valueOf(getTopicsNum());

    case MESSAGES_NUM:
      return Integer.valueOf(getMessagesNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case RUBRIC_ID:
      return isSetRubricId();
    case GROU_ID:
      return isSetGrouId();
    case SUBSCRIBED:
      return isSetSubscribed();
    case TOPICS_NUM:
      return isSetTopicsNum();
    case MESSAGES_NUM:
      return isSetMessagesNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserRubric)
      return this.equals((UserRubric)that);
    return false;
  }

  public boolean equals(UserRubric that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_rubricId = true;
    boolean that_present_rubricId = true;
    if (this_present_rubricId || that_present_rubricId) {
      if (!(this_present_rubricId && that_present_rubricId))
        return false;
      if (this.rubricId != that.rubricId)
        return false;
    }

    boolean this_present_grouId = true && this.isSetGrouId();
    boolean that_present_grouId = true && that.isSetGrouId();
    if (this_present_grouId || that_present_grouId) {
      if (!(this_present_grouId && that_present_grouId))
        return false;
      if (this.grouId != that.grouId)
        return false;
    }

    boolean this_present_subscribed = true;
    boolean that_present_subscribed = true;
    if (this_present_subscribed || that_present_subscribed) {
      if (!(this_present_subscribed && that_present_subscribed))
        return false;
      if (this.subscribed != that.subscribed)
        return false;
    }

    boolean this_present_topicsNum = true;
    boolean that_present_topicsNum = true;
    if (this_present_topicsNum || that_present_topicsNum) {
      if (!(this_present_topicsNum && that_present_topicsNum))
        return false;
      if (this.topicsNum != that.topicsNum)
        return false;
    }

    boolean this_present_messagesNum = true;
    boolean that_present_messagesNum = true;
    if (this_present_messagesNum || that_present_messagesNum) {
      if (!(this_present_messagesNum && that_present_messagesNum))
        return false;
      if (this.messagesNum != that.messagesNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UserRubric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRubricId()).compareTo(other.isSetRubricId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRubricId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubricId, other.rubricId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGrouId()).compareTo(other.isSetGrouId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrouId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.grouId, other.grouId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribed()).compareTo(other.isSetSubscribed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribed, other.subscribed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicsNum()).compareTo(other.isSetTopicsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicsNum, other.topicsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessagesNum()).compareTo(other.isSetMessagesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessagesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messagesNum, other.messagesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserRubric(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rubricId:");
    sb.append(this.rubricId);
    first = false;
    if (isSetGrouId()) {
      if (!first) sb.append(", ");
      sb.append("grouId:");
      sb.append(this.grouId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("subscribed:");
    sb.append(this.subscribed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicsNum:");
    sb.append(this.topicsNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messagesNum:");
    sb.append(this.messagesNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserRubricStandardSchemeFactory implements SchemeFactory {
    public UserRubricStandardScheme getScheme() {
      return new UserRubricStandardScheme();
    }
  }

  private static class UserRubricStandardScheme extends StandardScheme<UserRubric> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserRubric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.userId = iprot.readI64();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RUBRIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rubricId = iprot.readI64();
              struct.setRubricIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.grouId = iprot.readI64();
              struct.setGrouIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBSCRIBED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subscribed = iprot.readI32();
              struct.setSubscribedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPICS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topicsNum = iprot.readI32();
              struct.setTopicsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MESSAGES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messagesNum = iprot.readI32();
              struct.setMessagesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserRubric struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI64(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RUBRIC_ID_FIELD_DESC);
      oprot.writeI64(struct.rubricId);
      oprot.writeFieldEnd();
      if (struct.isSetGrouId()) {
        oprot.writeFieldBegin(GROU_ID_FIELD_DESC);
        oprot.writeI64(struct.grouId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBSCRIBED_FIELD_DESC);
      oprot.writeI32(struct.subscribed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOPICS_NUM_FIELD_DESC);
      oprot.writeI32(struct.topicsNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_NUM_FIELD_DESC);
      oprot.writeI32(struct.messagesNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserRubricTupleSchemeFactory implements SchemeFactory {
    public UserRubricTupleScheme getScheme() {
      return new UserRubricTupleScheme();
    }
  }

  private static class UserRubricTupleScheme extends TupleScheme<UserRubric> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserRubric struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetRubricId()) {
        optionals.set(1);
      }
      if (struct.isSetGrouId()) {
        optionals.set(2);
      }
      if (struct.isSetSubscribed()) {
        optionals.set(3);
      }
      if (struct.isSetTopicsNum()) {
        optionals.set(4);
      }
      if (struct.isSetMessagesNum()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUserId()) {
        oprot.writeI64(struct.userId);
      }
      if (struct.isSetRubricId()) {
        oprot.writeI64(struct.rubricId);
      }
      if (struct.isSetGrouId()) {
        oprot.writeI64(struct.grouId);
      }
      if (struct.isSetSubscribed()) {
        oprot.writeI32(struct.subscribed);
      }
      if (struct.isSetTopicsNum()) {
        oprot.writeI32(struct.topicsNum);
      }
      if (struct.isSetMessagesNum()) {
        oprot.writeI32(struct.messagesNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserRubric struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.userId = iprot.readI64();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rubricId = iprot.readI64();
        struct.setRubricIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.grouId = iprot.readI64();
        struct.setGrouIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subscribed = iprot.readI32();
        struct.setSubscribedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topicsNum = iprot.readI32();
        struct.setTopicsNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.messagesNum = iprot.readI32();
        struct.setMessagesNumIsSet(true);
      }
    }
  }

}

