/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserService {

  public interface Iface {

    public List<Group> getUserGroups() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<Rubric> getUserRubrics() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<com.vmesteonline.be.Country> getCounties() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<com.vmesteonline.be.City> getCities(long countryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<com.vmesteonline.be.Street> getStreets(long cityId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public List<com.vmesteonline.be.Building> getBuildings(long streetId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public FullAddressCatalogue getAddressCatalogue() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException;

    public boolean setUserAddress(com.vmesteonline.be.PostalAddress newAddress) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getUserGroups(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserRubrics(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCounties(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCities(long countryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStreets(long cityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBuildings(long streetId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAddressCatalogue(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setUserAddress(com.vmesteonline.be.PostalAddress newAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Group> getUserGroups() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getUserGroups();
      return recv_getUserGroups();
    }

    public void send_getUserGroups() throws org.apache.thrift.TException
    {
      getUserGroups_args args = new getUserGroups_args();
      sendBase("getUserGroups", args);
    }

    public List<Group> recv_getUserGroups() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getUserGroups_result result = new getUserGroups_result();
      receiveBase(result, "getUserGroups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserGroups failed: unknown result");
    }

    public List<Rubric> getUserRubrics() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getUserRubrics();
      return recv_getUserRubrics();
    }

    public void send_getUserRubrics() throws org.apache.thrift.TException
    {
      getUserRubrics_args args = new getUserRubrics_args();
      sendBase("getUserRubrics", args);
    }

    public List<Rubric> recv_getUserRubrics() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getUserRubrics_result result = new getUserRubrics_result();
      receiveBase(result, "getUserRubrics");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserRubrics failed: unknown result");
    }

    public List<com.vmesteonline.be.Country> getCounties() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getCounties();
      return recv_getCounties();
    }

    public void send_getCounties() throws org.apache.thrift.TException
    {
      getCounties_args args = new getCounties_args();
      sendBase("getCounties", args);
    }

    public List<com.vmesteonline.be.Country> recv_getCounties() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getCounties_result result = new getCounties_result();
      receiveBase(result, "getCounties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCounties failed: unknown result");
    }

    public List<com.vmesteonline.be.City> getCities(long countryId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getCities(countryId);
      return recv_getCities();
    }

    public void send_getCities(long countryId) throws org.apache.thrift.TException
    {
      getCities_args args = new getCities_args();
      args.setCountryId(countryId);
      sendBase("getCities", args);
    }

    public List<com.vmesteonline.be.City> recv_getCities() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getCities_result result = new getCities_result();
      receiveBase(result, "getCities");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCities failed: unknown result");
    }

    public List<com.vmesteonline.be.Street> getStreets(long cityId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getStreets(cityId);
      return recv_getStreets();
    }

    public void send_getStreets(long cityId) throws org.apache.thrift.TException
    {
      getStreets_args args = new getStreets_args();
      args.setCityId(cityId);
      sendBase("getStreets", args);
    }

    public List<com.vmesteonline.be.Street> recv_getStreets() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getStreets_result result = new getStreets_result();
      receiveBase(result, "getStreets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreets failed: unknown result");
    }

    public List<com.vmesteonline.be.Building> getBuildings(long streetId) throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getBuildings(streetId);
      return recv_getBuildings();
    }

    public void send_getBuildings(long streetId) throws org.apache.thrift.TException
    {
      getBuildings_args args = new getBuildings_args();
      args.setStreetId(streetId);
      sendBase("getBuildings", args);
    }

    public List<com.vmesteonline.be.Building> recv_getBuildings() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getBuildings_result result = new getBuildings_result();
      receiveBase(result, "getBuildings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBuildings failed: unknown result");
    }

    public FullAddressCatalogue getAddressCatalogue() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      send_getAddressCatalogue();
      return recv_getAddressCatalogue();
    }

    public void send_getAddressCatalogue() throws org.apache.thrift.TException
    {
      getAddressCatalogue_args args = new getAddressCatalogue_args();
      sendBase("getAddressCatalogue", args);
    }

    public FullAddressCatalogue recv_getAddressCatalogue() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException
    {
      getAddressCatalogue_result result = new getAddressCatalogue_result();
      receiveBase(result, "getAddressCatalogue");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAddressCatalogue failed: unknown result");
    }

    public boolean setUserAddress(com.vmesteonline.be.PostalAddress newAddress) throws org.apache.thrift.TException
    {
      send_setUserAddress(newAddress);
      return recv_setUserAddress();
    }

    public void send_setUserAddress(com.vmesteonline.be.PostalAddress newAddress) throws org.apache.thrift.TException
    {
      setUserAddress_args args = new setUserAddress_args();
      args.setNewAddress(newAddress);
      sendBase("setUserAddress", args);
    }

    public boolean recv_setUserAddress() throws org.apache.thrift.TException
    {
      setUserAddress_result result = new setUserAddress_result();
      receiveBase(result, "setUserAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setUserAddress failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getUserGroups(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserGroups_call method_call = new getUserGroups_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserGroups_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUserGroups_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserGroups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserGroups_args args = new getUserGroups_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Group> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserGroups();
      }
    }

    public void getUserRubrics(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserRubrics_call method_call = new getUserRubrics_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserRubrics_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getUserRubrics_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserRubrics", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserRubrics_args args = new getUserRubrics_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Rubric> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserRubrics();
      }
    }

    public void getCounties(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCounties_call method_call = new getCounties_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCounties_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCounties_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCounties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCounties_args args = new getCounties_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.vmesteonline.be.Country> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCounties();
      }
    }

    public void getCities(long countryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCities_call method_call = new getCities_call(countryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCities_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long countryId;
      public getCities_call(long countryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countryId = countryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCities", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCities_args args = new getCities_args();
        args.setCountryId(countryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.vmesteonline.be.City> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCities();
      }
    }

    public void getStreets(long cityId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreets_call method_call = new getStreets_call(cityId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreets_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long cityId;
      public getStreets_call(long cityId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cityId = cityId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreets_args args = new getStreets_args();
        args.setCityId(cityId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.vmesteonline.be.Street> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreets();
      }
    }

    public void getBuildings(long streetId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBuildings_call method_call = new getBuildings_call(streetId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBuildings_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long streetId;
      public getBuildings_call(long streetId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streetId = streetId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBuildings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBuildings_args args = new getBuildings_args();
        args.setStreetId(streetId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.vmesteonline.be.Building> getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBuildings();
      }
    }

    public void getAddressCatalogue(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAddressCatalogue_call method_call = new getAddressCatalogue_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAddressCatalogue_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAddressCatalogue_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAddressCatalogue", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAddressCatalogue_args args = new getAddressCatalogue_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FullAddressCatalogue getResult() throws com.vmesteonline.be.InvalidOperation, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAddressCatalogue();
      }
    }

    public void setUserAddress(com.vmesteonline.be.PostalAddress newAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setUserAddress_call method_call = new setUserAddress_call(newAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setUserAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.vmesteonline.be.PostalAddress newAddress;
      public setUserAddress_call(com.vmesteonline.be.PostalAddress newAddress, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newAddress = newAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setUserAddress_args args = new setUserAddress_args();
        args.setNewAddress(newAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setUserAddress();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getUserGroups", new getUserGroups());
      processMap.put("getUserRubrics", new getUserRubrics());
      processMap.put("getCounties", new getCounties());
      processMap.put("getCities", new getCities());
      processMap.put("getStreets", new getStreets());
      processMap.put("getBuildings", new getBuildings());
      processMap.put("getAddressCatalogue", new getAddressCatalogue());
      processMap.put("setUserAddress", new setUserAddress());
      return processMap;
    }

    public static class getUserGroups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserGroups_args> {
      public getUserGroups() {
        super("getUserGroups");
      }

      public getUserGroups_args getEmptyArgsInstance() {
        return new getUserGroups_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserGroups_result getResult(I iface, getUserGroups_args args) throws org.apache.thrift.TException {
        getUserGroups_result result = new getUserGroups_result();
        try {
          result.success = iface.getUserGroups();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getUserRubrics<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserRubrics_args> {
      public getUserRubrics() {
        super("getUserRubrics");
      }

      public getUserRubrics_args getEmptyArgsInstance() {
        return new getUserRubrics_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserRubrics_result getResult(I iface, getUserRubrics_args args) throws org.apache.thrift.TException {
        getUserRubrics_result result = new getUserRubrics_result();
        try {
          result.success = iface.getUserRubrics();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getCounties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCounties_args> {
      public getCounties() {
        super("getCounties");
      }

      public getCounties_args getEmptyArgsInstance() {
        return new getCounties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCounties_result getResult(I iface, getCounties_args args) throws org.apache.thrift.TException {
        getCounties_result result = new getCounties_result();
        try {
          result.success = iface.getCounties();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getCities<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCities_args> {
      public getCities() {
        super("getCities");
      }

      public getCities_args getEmptyArgsInstance() {
        return new getCities_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCities_result getResult(I iface, getCities_args args) throws org.apache.thrift.TException {
        getCities_result result = new getCities_result();
        try {
          result.success = iface.getCities(args.countryId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getStreets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreets_args> {
      public getStreets() {
        super("getStreets");
      }

      public getStreets_args getEmptyArgsInstance() {
        return new getStreets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStreets_result getResult(I iface, getStreets_args args) throws org.apache.thrift.TException {
        getStreets_result result = new getStreets_result();
        try {
          result.success = iface.getStreets(args.cityId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getBuildings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBuildings_args> {
      public getBuildings() {
        super("getBuildings");
      }

      public getBuildings_args getEmptyArgsInstance() {
        return new getBuildings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBuildings_result getResult(I iface, getBuildings_args args) throws org.apache.thrift.TException {
        getBuildings_result result = new getBuildings_result();
        try {
          result.success = iface.getBuildings(args.streetId);
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class getAddressCatalogue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAddressCatalogue_args> {
      public getAddressCatalogue() {
        super("getAddressCatalogue");
      }

      public getAddressCatalogue_args getEmptyArgsInstance() {
        return new getAddressCatalogue_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAddressCatalogue_result getResult(I iface, getAddressCatalogue_args args) throws org.apache.thrift.TException {
        getAddressCatalogue_result result = new getAddressCatalogue_result();
        try {
          result.success = iface.getAddressCatalogue();
        } catch (com.vmesteonline.be.InvalidOperation exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class setUserAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserAddress_args> {
      public setUserAddress() {
        super("setUserAddress");
      }

      public setUserAddress_args getEmptyArgsInstance() {
        return new setUserAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setUserAddress_result getResult(I iface, setUserAddress_args args) throws org.apache.thrift.TException {
        setUserAddress_result result = new setUserAddress_result();
        result.success = iface.setUserAddress(args.newAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getUserGroups", new getUserGroups());
      processMap.put("getUserRubrics", new getUserRubrics());
      processMap.put("getCounties", new getCounties());
      processMap.put("getCities", new getCities());
      processMap.put("getStreets", new getStreets());
      processMap.put("getBuildings", new getBuildings());
      processMap.put("getAddressCatalogue", new getAddressCatalogue());
      processMap.put("setUserAddress", new setUserAddress());
      return processMap;
    }

    public static class getUserGroups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserGroups_args, List<Group>> {
      public getUserGroups() {
        super("getUserGroups");
      }

      public getUserGroups_args getEmptyArgsInstance() {
        return new getUserGroups_args();
      }

      public AsyncMethodCallback<List<Group>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Group>>() { 
          public void onComplete(List<Group> o) {
            getUserGroups_result result = new getUserGroups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserGroups_result result = new getUserGroups_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserGroups_args args, org.apache.thrift.async.AsyncMethodCallback<List<Group>> resultHandler) throws TException {
        iface.getUserGroups(resultHandler);
      }
    }

    public static class getUserRubrics<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserRubrics_args, List<Rubric>> {
      public getUserRubrics() {
        super("getUserRubrics");
      }

      public getUserRubrics_args getEmptyArgsInstance() {
        return new getUserRubrics_args();
      }

      public AsyncMethodCallback<List<Rubric>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Rubric>>() { 
          public void onComplete(List<Rubric> o) {
            getUserRubrics_result result = new getUserRubrics_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserRubrics_result result = new getUserRubrics_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserRubrics_args args, org.apache.thrift.async.AsyncMethodCallback<List<Rubric>> resultHandler) throws TException {
        iface.getUserRubrics(resultHandler);
      }
    }

    public static class getCounties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCounties_args, List<com.vmesteonline.be.Country>> {
      public getCounties() {
        super("getCounties");
      }

      public getCounties_args getEmptyArgsInstance() {
        return new getCounties_args();
      }

      public AsyncMethodCallback<List<com.vmesteonline.be.Country>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.vmesteonline.be.Country>>() { 
          public void onComplete(List<com.vmesteonline.be.Country> o) {
            getCounties_result result = new getCounties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCounties_result result = new getCounties_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCounties_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.vmesteonline.be.Country>> resultHandler) throws TException {
        iface.getCounties(resultHandler);
      }
    }

    public static class getCities<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCities_args, List<com.vmesteonline.be.City>> {
      public getCities() {
        super("getCities");
      }

      public getCities_args getEmptyArgsInstance() {
        return new getCities_args();
      }

      public AsyncMethodCallback<List<com.vmesteonline.be.City>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.vmesteonline.be.City>>() { 
          public void onComplete(List<com.vmesteonline.be.City> o) {
            getCities_result result = new getCities_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCities_result result = new getCities_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCities_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.vmesteonline.be.City>> resultHandler) throws TException {
        iface.getCities(args.countryId,resultHandler);
      }
    }

    public static class getStreets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStreets_args, List<com.vmesteonline.be.Street>> {
      public getStreets() {
        super("getStreets");
      }

      public getStreets_args getEmptyArgsInstance() {
        return new getStreets_args();
      }

      public AsyncMethodCallback<List<com.vmesteonline.be.Street>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.vmesteonline.be.Street>>() { 
          public void onComplete(List<com.vmesteonline.be.Street> o) {
            getStreets_result result = new getStreets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStreets_result result = new getStreets_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStreets_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.vmesteonline.be.Street>> resultHandler) throws TException {
        iface.getStreets(args.cityId,resultHandler);
      }
    }

    public static class getBuildings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBuildings_args, List<com.vmesteonline.be.Building>> {
      public getBuildings() {
        super("getBuildings");
      }

      public getBuildings_args getEmptyArgsInstance() {
        return new getBuildings_args();
      }

      public AsyncMethodCallback<List<com.vmesteonline.be.Building>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.vmesteonline.be.Building>>() { 
          public void onComplete(List<com.vmesteonline.be.Building> o) {
            getBuildings_result result = new getBuildings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBuildings_result result = new getBuildings_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBuildings_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.vmesteonline.be.Building>> resultHandler) throws TException {
        iface.getBuildings(args.streetId,resultHandler);
      }
    }

    public static class getAddressCatalogue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAddressCatalogue_args, FullAddressCatalogue> {
      public getAddressCatalogue() {
        super("getAddressCatalogue");
      }

      public getAddressCatalogue_args getEmptyArgsInstance() {
        return new getAddressCatalogue_args();
      }

      public AsyncMethodCallback<FullAddressCatalogue> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FullAddressCatalogue>() { 
          public void onComplete(FullAddressCatalogue o) {
            getAddressCatalogue_result result = new getAddressCatalogue_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAddressCatalogue_result result = new getAddressCatalogue_result();
            if (e instanceof com.vmesteonline.be.InvalidOperation) {
                        result.exc = (com.vmesteonline.be.InvalidOperation) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAddressCatalogue_args args, org.apache.thrift.async.AsyncMethodCallback<FullAddressCatalogue> resultHandler) throws TException {
        iface.getAddressCatalogue(resultHandler);
      }
    }

    public static class setUserAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setUserAddress_args, Boolean> {
      public setUserAddress() {
        super("setUserAddress");
      }

      public setUserAddress_args getEmptyArgsInstance() {
        return new setUserAddress_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setUserAddress_result result = new setUserAddress_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setUserAddress_result result = new setUserAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setUserAddress_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setUserAddress(args.newAddress,resultHandler);
      }
    }

  }

  public static class getUserGroups_args implements org.apache.thrift.TBase<getUserGroups_args, getUserGroups_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserGroups_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserGroups_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserGroups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserGroups_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserGroups_args.class, metaDataMap);
    }

    public getUserGroups_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserGroups_args(getUserGroups_args other) {
    }

    public getUserGroups_args deepCopy() {
      return new getUserGroups_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserGroups_args)
        return this.equals((getUserGroups_args)that);
      return false;
    }

    public boolean equals(getUserGroups_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserGroups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserGroups_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserGroups_argsStandardSchemeFactory implements SchemeFactory {
      public getUserGroups_argsStandardScheme getScheme() {
        return new getUserGroups_argsStandardScheme();
      }
    }

    private static class getUserGroups_argsStandardScheme extends StandardScheme<getUserGroups_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserGroups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserGroups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserGroups_argsTupleSchemeFactory implements SchemeFactory {
      public getUserGroups_argsTupleScheme getScheme() {
        return new getUserGroups_argsTupleScheme();
      }
    }

    private static class getUserGroups_argsTupleScheme extends TupleScheme<getUserGroups_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserGroups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUserGroups_result implements org.apache.thrift.TBase<getUserGroups_result, getUserGroups_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserGroups_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserGroups_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserGroups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserGroups_resultTupleSchemeFactory());
    }

    public List<Group> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Group.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserGroups_result.class, metaDataMap);
    }

    public getUserGroups_result() {
    }

    public getUserGroups_result(
      List<Group> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserGroups_result(getUserGroups_result other) {
      if (other.isSetSuccess()) {
        List<Group> __this__success = new ArrayList<Group>(other.success.size());
        for (Group other_element : other.success) {
          __this__success.add(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getUserGroups_result deepCopy() {
      return new getUserGroups_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Group> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new ArrayList<Group>();
      }
      this.success.add(elem);
    }

    public List<Group> getSuccess() {
      return this.success;
    }

    public getUserGroups_result setSuccess(List<Group> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getUserGroups_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Group>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserGroups_result)
        return this.equals((getUserGroups_result)that);
      return false;
    }

    public boolean equals(getUserGroups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserGroups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserGroups_resultStandardSchemeFactory implements SchemeFactory {
      public getUserGroups_resultStandardScheme getScheme() {
        return new getUserGroups_resultStandardScheme();
      }
    }

    private static class getUserGroups_resultStandardScheme extends StandardScheme<getUserGroups_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserGroups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<Group>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    Group _elem34;
                    _elem34 = new Group();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserGroups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Group _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserGroups_resultTupleSchemeFactory implements SchemeFactory {
      public getUserGroups_resultTupleScheme getScheme() {
        return new getUserGroups_resultTupleScheme();
      }
    }

    private static class getUserGroups_resultTupleScheme extends TupleScheme<getUserGroups_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Group _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserGroups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Group>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              Group _elem39;
              _elem39 = new Group();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getUserRubrics_args implements org.apache.thrift.TBase<getUserRubrics_args, getUserRubrics_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRubrics_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRubrics_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRubrics_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRubrics_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRubrics_args.class, metaDataMap);
    }

    public getUserRubrics_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRubrics_args(getUserRubrics_args other) {
    }

    public getUserRubrics_args deepCopy() {
      return new getUserRubrics_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRubrics_args)
        return this.equals((getUserRubrics_args)that);
      return false;
    }

    public boolean equals(getUserRubrics_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserRubrics_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRubrics_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRubrics_argsStandardSchemeFactory implements SchemeFactory {
      public getUserRubrics_argsStandardScheme getScheme() {
        return new getUserRubrics_argsStandardScheme();
      }
    }

    private static class getUserRubrics_argsStandardScheme extends StandardScheme<getUserRubrics_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRubrics_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRubrics_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRubrics_argsTupleSchemeFactory implements SchemeFactory {
      public getUserRubrics_argsTupleScheme getScheme() {
        return new getUserRubrics_argsTupleScheme();
      }
    }

    private static class getUserRubrics_argsTupleScheme extends TupleScheme<getUserRubrics_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRubrics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRubrics_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getUserRubrics_result implements org.apache.thrift.TBase<getUserRubrics_result, getUserRubrics_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserRubrics_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserRubrics_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserRubrics_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserRubrics_resultTupleSchemeFactory());
    }

    public List<Rubric> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rubric.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserRubrics_result.class, metaDataMap);
    }

    public getUserRubrics_result() {
    }

    public getUserRubrics_result(
      List<Rubric> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserRubrics_result(getUserRubrics_result other) {
      if (other.isSetSuccess()) {
        List<Rubric> __this__success = new ArrayList<Rubric>(other.success.size());
        for (Rubric other_element : other.success) {
          __this__success.add(new Rubric(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getUserRubrics_result deepCopy() {
      return new getUserRubrics_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Rubric> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Rubric elem) {
      if (this.success == null) {
        this.success = new ArrayList<Rubric>();
      }
      this.success.add(elem);
    }

    public List<Rubric> getSuccess() {
      return this.success;
    }

    public getUserRubrics_result setSuccess(List<Rubric> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getUserRubrics_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Rubric>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserRubrics_result)
        return this.equals((getUserRubrics_result)that);
      return false;
    }

    public boolean equals(getUserRubrics_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserRubrics_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserRubrics_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserRubrics_resultStandardSchemeFactory implements SchemeFactory {
      public getUserRubrics_resultStandardScheme getScheme() {
        return new getUserRubrics_resultStandardScheme();
      }
    }

    private static class getUserRubrics_resultStandardScheme extends StandardScheme<getUserRubrics_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserRubrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<Rubric>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    Rubric _elem42;
                    _elem42 = new Rubric();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserRubrics_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Rubric _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserRubrics_resultTupleSchemeFactory implements SchemeFactory {
      public getUserRubrics_resultTupleScheme getScheme() {
        return new getUserRubrics_resultTupleScheme();
      }
    }

    private static class getUserRubrics_resultTupleScheme extends TupleScheme<getUserRubrics_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserRubrics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Rubric _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserRubrics_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Rubric>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              Rubric _elem47;
              _elem47 = new Rubric();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getCounties_args implements org.apache.thrift.TBase<getCounties_args, getCounties_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCounties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounties_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounties_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounties_args.class, metaDataMap);
    }

    public getCounties_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounties_args(getCounties_args other) {
    }

    public getCounties_args deepCopy() {
      return new getCounties_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounties_args)
        return this.equals((getCounties_args)that);
      return false;
    }

    public boolean equals(getCounties_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounties_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounties_argsStandardSchemeFactory implements SchemeFactory {
      public getCounties_argsStandardScheme getScheme() {
        return new getCounties_argsStandardScheme();
      }
    }

    private static class getCounties_argsStandardScheme extends StandardScheme<getCounties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounties_argsTupleSchemeFactory implements SchemeFactory {
      public getCounties_argsTupleScheme getScheme() {
        return new getCounties_argsTupleScheme();
      }
    }

    private static class getCounties_argsTupleScheme extends TupleScheme<getCounties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCounties_result implements org.apache.thrift.TBase<getCounties_result, getCounties_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCounties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCounties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCounties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCounties_resultTupleSchemeFactory());
    }

    public List<com.vmesteonline.be.Country> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.Country.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCounties_result.class, metaDataMap);
    }

    public getCounties_result() {
    }

    public getCounties_result(
      List<com.vmesteonline.be.Country> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCounties_result(getCounties_result other) {
      if (other.isSetSuccess()) {
        List<com.vmesteonline.be.Country> __this__success = new ArrayList<com.vmesteonline.be.Country>(other.success.size());
        for (com.vmesteonline.be.Country other_element : other.success) {
          __this__success.add(new com.vmesteonline.be.Country(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getCounties_result deepCopy() {
      return new getCounties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.vmesteonline.be.Country> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.vmesteonline.be.Country elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.vmesteonline.be.Country>();
      }
      this.success.add(elem);
    }

    public List<com.vmesteonline.be.Country> getSuccess() {
      return this.success;
    }

    public getCounties_result setSuccess(List<com.vmesteonline.be.Country> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getCounties_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.vmesteonline.be.Country>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCounties_result)
        return this.equals((getCounties_result)that);
      return false;
    }

    public boolean equals(getCounties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCounties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCounties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCounties_resultStandardSchemeFactory implements SchemeFactory {
      public getCounties_resultStandardScheme getScheme() {
        return new getCounties_resultStandardScheme();
      }
    }

    private static class getCounties_resultStandardScheme extends StandardScheme<getCounties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCounties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<com.vmesteonline.be.Country>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    com.vmesteonline.be.Country _elem50;
                    _elem50 = new com.vmesteonline.be.Country();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCounties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.vmesteonline.be.Country _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCounties_resultTupleSchemeFactory implements SchemeFactory {
      public getCounties_resultTupleScheme getScheme() {
        return new getCounties_resultTupleScheme();
      }
    }

    private static class getCounties_resultTupleScheme extends TupleScheme<getCounties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCounties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.vmesteonline.be.Country _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCounties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.vmesteonline.be.Country>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              com.vmesteonline.be.Country _elem55;
              _elem55 = new com.vmesteonline.be.Country();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getCities_args implements org.apache.thrift.TBase<getCities_args, getCities_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCities_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCities_args");

    private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCities_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCities_argsTupleSchemeFactory());
    }

    public long countryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTRY_ID((short)1, "countryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COUNTRY_ID
            return COUNTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COUNTRYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCities_args.class, metaDataMap);
    }

    public getCities_args() {
    }

    public getCities_args(
      long countryId)
    {
      this();
      this.countryId = countryId;
      setCountryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCities_args(getCities_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.countryId = other.countryId;
    }

    public getCities_args deepCopy() {
      return new getCities_args(this);
    }

    @Override
    public void clear() {
      setCountryIdIsSet(false);
      this.countryId = 0;
    }

    public long getCountryId() {
      return this.countryId;
    }

    public getCities_args setCountryId(long countryId) {
      this.countryId = countryId;
      setCountryIdIsSet(true);
      return this;
    }

    public void unsetCountryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
    }

    /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryId() {
      return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
    }

    public void setCountryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COUNTRY_ID:
        if (value == null) {
          unsetCountryId();
        } else {
          setCountryId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTRY_ID:
        return Long.valueOf(getCountryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COUNTRY_ID:
        return isSetCountryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCities_args)
        return this.equals((getCities_args)that);
      return false;
    }

    public boolean equals(getCities_args that) {
      if (that == null)
        return false;

      boolean this_present_countryId = true;
      boolean that_present_countryId = true;
      if (this_present_countryId || that_present_countryId) {
        if (!(this_present_countryId && that_present_countryId))
          return false;
        if (this.countryId != that.countryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCities_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCities_args(");
      boolean first = true;

      sb.append("countryId:");
      sb.append(this.countryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCities_argsStandardSchemeFactory implements SchemeFactory {
      public getCities_argsStandardScheme getScheme() {
        return new getCities_argsStandardScheme();
      }
    }

    private static class getCities_argsStandardScheme extends StandardScheme<getCities_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCities_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COUNTRY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.countryId = iprot.readI64();
                struct.setCountryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCities_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI64(struct.countryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCities_argsTupleSchemeFactory implements SchemeFactory {
      public getCities_argsTupleScheme getScheme() {
        return new getCities_argsTupleScheme();
      }
    }

    private static class getCities_argsTupleScheme extends TupleScheme<getCities_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCountryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCountryId()) {
          oprot.writeI64(struct.countryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCities_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.countryId = iprot.readI64();
          struct.setCountryIdIsSet(true);
        }
      }
    }

  }

  public static class getCities_result implements org.apache.thrift.TBase<getCities_result, getCities_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCities_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCities_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCities_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCities_resultTupleSchemeFactory());
    }

    public List<com.vmesteonline.be.City> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.City.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCities_result.class, metaDataMap);
    }

    public getCities_result() {
    }

    public getCities_result(
      List<com.vmesteonline.be.City> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCities_result(getCities_result other) {
      if (other.isSetSuccess()) {
        List<com.vmesteonline.be.City> __this__success = new ArrayList<com.vmesteonline.be.City>(other.success.size());
        for (com.vmesteonline.be.City other_element : other.success) {
          __this__success.add(new com.vmesteonline.be.City(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getCities_result deepCopy() {
      return new getCities_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.vmesteonline.be.City> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.vmesteonline.be.City elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.vmesteonline.be.City>();
      }
      this.success.add(elem);
    }

    public List<com.vmesteonline.be.City> getSuccess() {
      return this.success;
    }

    public getCities_result setSuccess(List<com.vmesteonline.be.City> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getCities_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.vmesteonline.be.City>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCities_result)
        return this.equals((getCities_result)that);
      return false;
    }

    public boolean equals(getCities_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getCities_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCities_resultStandardSchemeFactory implements SchemeFactory {
      public getCities_resultStandardScheme getScheme() {
        return new getCities_resultStandardScheme();
      }
    }

    private static class getCities_resultStandardScheme extends StandardScheme<getCities_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCities_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.vmesteonline.be.City>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    com.vmesteonline.be.City _elem58;
                    _elem58 = new com.vmesteonline.be.City();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCities_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.vmesteonline.be.City _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCities_resultTupleSchemeFactory implements SchemeFactory {
      public getCities_resultTupleScheme getScheme() {
        return new getCities_resultTupleScheme();
      }
    }

    private static class getCities_resultTupleScheme extends TupleScheme<getCities_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.vmesteonline.be.City _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCities_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.vmesteonline.be.City>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              com.vmesteonline.be.City _elem63;
              _elem63 = new com.vmesteonline.be.City();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getStreets_args implements org.apache.thrift.TBase<getStreets_args, getStreets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStreets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreets_args");

    private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreets_argsTupleSchemeFactory());
    }

    public long cityId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CITY_ID((short)1, "cityId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CITY_ID
            return CITY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CITYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreets_args.class, metaDataMap);
    }

    public getStreets_args() {
    }

    public getStreets_args(
      long cityId)
    {
      this();
      this.cityId = cityId;
      setCityIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreets_args(getStreets_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cityId = other.cityId;
    }

    public getStreets_args deepCopy() {
      return new getStreets_args(this);
    }

    @Override
    public void clear() {
      setCityIdIsSet(false);
      this.cityId = 0;
    }

    public long getCityId() {
      return this.cityId;
    }

    public getStreets_args setCityId(long cityId) {
      this.cityId = cityId;
      setCityIdIsSet(true);
      return this;
    }

    public void unsetCityId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
    public boolean isSetCityId() {
      return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
    }

    public void setCityIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CITY_ID:
        if (value == null) {
          unsetCityId();
        } else {
          setCityId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CITY_ID:
        return Long.valueOf(getCityId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CITY_ID:
        return isSetCityId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreets_args)
        return this.equals((getStreets_args)that);
      return false;
    }

    public boolean equals(getStreets_args that) {
      if (that == null)
        return false;

      boolean this_present_cityId = true;
      boolean that_present_cityId = true;
      if (this_present_cityId || that_present_cityId) {
        if (!(this_present_cityId && that_present_cityId))
          return false;
        if (this.cityId != that.cityId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStreets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreets_args(");
      boolean first = true;

      sb.append("cityId:");
      sb.append(this.cityId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreets_argsStandardSchemeFactory implements SchemeFactory {
      public getStreets_argsStandardScheme getScheme() {
        return new getStreets_argsStandardScheme();
      }
    }

    private static class getStreets_argsStandardScheme extends StandardScheme<getStreets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CITY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.cityId = iprot.readI64();
                struct.setCityIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
        oprot.writeI64(struct.cityId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreets_argsTupleSchemeFactory implements SchemeFactory {
      public getStreets_argsTupleScheme getScheme() {
        return new getStreets_argsTupleScheme();
      }
    }

    private static class getStreets_argsTupleScheme extends TupleScheme<getStreets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCityId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCityId()) {
          oprot.writeI64(struct.cityId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cityId = iprot.readI64();
          struct.setCityIdIsSet(true);
        }
      }
    }

  }

  public static class getStreets_result implements org.apache.thrift.TBase<getStreets_result, getStreets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStreets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreets_resultTupleSchemeFactory());
    }

    public List<com.vmesteonline.be.Street> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.Street.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreets_result.class, metaDataMap);
    }

    public getStreets_result() {
    }

    public getStreets_result(
      List<com.vmesteonline.be.Street> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreets_result(getStreets_result other) {
      if (other.isSetSuccess()) {
        List<com.vmesteonline.be.Street> __this__success = new ArrayList<com.vmesteonline.be.Street>(other.success.size());
        for (com.vmesteonline.be.Street other_element : other.success) {
          __this__success.add(new com.vmesteonline.be.Street(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getStreets_result deepCopy() {
      return new getStreets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.vmesteonline.be.Street> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.vmesteonline.be.Street elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.vmesteonline.be.Street>();
      }
      this.success.add(elem);
    }

    public List<com.vmesteonline.be.Street> getSuccess() {
      return this.success;
    }

    public getStreets_result setSuccess(List<com.vmesteonline.be.Street> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getStreets_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.vmesteonline.be.Street>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreets_result)
        return this.equals((getStreets_result)that);
      return false;
    }

    public boolean equals(getStreets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getStreets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreets_resultStandardSchemeFactory implements SchemeFactory {
      public getStreets_resultStandardScheme getScheme() {
        return new getStreets_resultStandardScheme();
      }
    }

    private static class getStreets_resultStandardScheme extends StandardScheme<getStreets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<com.vmesteonline.be.Street>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    com.vmesteonline.be.Street _elem66;
                    _elem66 = new com.vmesteonline.be.Street();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.vmesteonline.be.Street _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreets_resultTupleSchemeFactory implements SchemeFactory {
      public getStreets_resultTupleScheme getScheme() {
        return new getStreets_resultTupleScheme();
      }
    }

    private static class getStreets_resultTupleScheme extends TupleScheme<getStreets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.vmesteonline.be.Street _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.vmesteonline.be.Street>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              com.vmesteonline.be.Street _elem71;
              _elem71 = new com.vmesteonline.be.Street();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getBuildings_args implements org.apache.thrift.TBase<getBuildings_args, getBuildings_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBuildings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuildings_args");

    private static final org.apache.thrift.protocol.TField STREET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("streetId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuildings_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuildings_argsTupleSchemeFactory());
    }

    public long streetId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREET_ID((short)1, "streetId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREET_ID
            return STREET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STREETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREET_ID, new org.apache.thrift.meta_data.FieldMetaData("streetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuildings_args.class, metaDataMap);
    }

    public getBuildings_args() {
    }

    public getBuildings_args(
      long streetId)
    {
      this();
      this.streetId = streetId;
      setStreetIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuildings_args(getBuildings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.streetId = other.streetId;
    }

    public getBuildings_args deepCopy() {
      return new getBuildings_args(this);
    }

    @Override
    public void clear() {
      setStreetIdIsSet(false);
      this.streetId = 0;
    }

    public long getStreetId() {
      return this.streetId;
    }

    public getBuildings_args setStreetId(long streetId) {
      this.streetId = streetId;
      setStreetIdIsSet(true);
      return this;
    }

    public void unsetStreetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STREETID_ISSET_ID);
    }

    /** Returns true if field streetId is set (has been assigned a value) and false otherwise */
    public boolean isSetStreetId() {
      return EncodingUtils.testBit(__isset_bitfield, __STREETID_ISSET_ID);
    }

    public void setStreetIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STREETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREET_ID:
        if (value == null) {
          unsetStreetId();
        } else {
          setStreetId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREET_ID:
        return Long.valueOf(getStreetId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREET_ID:
        return isSetStreetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuildings_args)
        return this.equals((getBuildings_args)that);
      return false;
    }

    public boolean equals(getBuildings_args that) {
      if (that == null)
        return false;

      boolean this_present_streetId = true;
      boolean that_present_streetId = true;
      if (this_present_streetId || that_present_streetId) {
        if (!(this_present_streetId && that_present_streetId))
          return false;
        if (this.streetId != that.streetId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBuildings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStreetId()).compareTo(other.isSetStreetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streetId, other.streetId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuildings_args(");
      boolean first = true;

      sb.append("streetId:");
      sb.append(this.streetId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuildings_argsStandardSchemeFactory implements SchemeFactory {
      public getBuildings_argsStandardScheme getScheme() {
        return new getBuildings_argsStandardScheme();
      }
    }

    private static class getBuildings_argsStandardScheme extends StandardScheme<getBuildings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuildings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.streetId = iprot.readI64();
                struct.setStreetIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuildings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STREET_ID_FIELD_DESC);
        oprot.writeI64(struct.streetId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuildings_argsTupleSchemeFactory implements SchemeFactory {
      public getBuildings_argsTupleScheme getScheme() {
        return new getBuildings_argsTupleScheme();
      }
    }

    private static class getBuildings_argsTupleScheme extends TupleScheme<getBuildings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuildings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreetId()) {
          oprot.writeI64(struct.streetId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuildings_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.streetId = iprot.readI64();
          struct.setStreetIdIsSet(true);
        }
      }
    }

  }

  public static class getBuildings_result implements org.apache.thrift.TBase<getBuildings_result, getBuildings_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBuildings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBuildings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBuildings_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBuildings_resultTupleSchemeFactory());
    }

    public List<com.vmesteonline.be.Building> success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.Building.class))));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBuildings_result.class, metaDataMap);
    }

    public getBuildings_result() {
    }

    public getBuildings_result(
      List<com.vmesteonline.be.Building> success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuildings_result(getBuildings_result other) {
      if (other.isSetSuccess()) {
        List<com.vmesteonline.be.Building> __this__success = new ArrayList<com.vmesteonline.be.Building>(other.success.size());
        for (com.vmesteonline.be.Building other_element : other.success) {
          __this__success.add(new com.vmesteonline.be.Building(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getBuildings_result deepCopy() {
      return new getBuildings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.vmesteonline.be.Building> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.vmesteonline.be.Building elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.vmesteonline.be.Building>();
      }
      this.success.add(elem);
    }

    public List<com.vmesteonline.be.Building> getSuccess() {
      return this.success;
    }

    public getBuildings_result setSuccess(List<com.vmesteonline.be.Building> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getBuildings_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.vmesteonline.be.Building>)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuildings_result)
        return this.equals((getBuildings_result)that);
      return false;
    }

    public boolean equals(getBuildings_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getBuildings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBuildings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBuildings_resultStandardSchemeFactory implements SchemeFactory {
      public getBuildings_resultStandardScheme getScheme() {
        return new getBuildings_resultStandardScheme();
      }
    }

    private static class getBuildings_resultStandardScheme extends StandardScheme<getBuildings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBuildings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.vmesteonline.be.Building>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    com.vmesteonline.be.Building _elem74;
                    _elem74 = new com.vmesteonline.be.Building();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBuildings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.vmesteonline.be.Building _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBuildings_resultTupleSchemeFactory implements SchemeFactory {
      public getBuildings_resultTupleScheme getScheme() {
        return new getBuildings_resultTupleScheme();
      }
    }

    private static class getBuildings_resultTupleScheme extends TupleScheme<getBuildings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBuildings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.vmesteonline.be.Building _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBuildings_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.vmesteonline.be.Building>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              com.vmesteonline.be.Building _elem79;
              _elem79 = new com.vmesteonline.be.Building();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class getAddressCatalogue_args implements org.apache.thrift.TBase<getAddressCatalogue_args, getAddressCatalogue_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAddressCatalogue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddressCatalogue_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddressCatalogue_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddressCatalogue_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddressCatalogue_args.class, metaDataMap);
    }

    public getAddressCatalogue_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddressCatalogue_args(getAddressCatalogue_args other) {
    }

    public getAddressCatalogue_args deepCopy() {
      return new getAddressCatalogue_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddressCatalogue_args)
        return this.equals((getAddressCatalogue_args)that);
      return false;
    }

    public boolean equals(getAddressCatalogue_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAddressCatalogue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddressCatalogue_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddressCatalogue_argsStandardSchemeFactory implements SchemeFactory {
      public getAddressCatalogue_argsStandardScheme getScheme() {
        return new getAddressCatalogue_argsStandardScheme();
      }
    }

    private static class getAddressCatalogue_argsStandardScheme extends StandardScheme<getAddressCatalogue_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddressCatalogue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddressCatalogue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddressCatalogue_argsTupleSchemeFactory implements SchemeFactory {
      public getAddressCatalogue_argsTupleScheme getScheme() {
        return new getAddressCatalogue_argsTupleScheme();
      }
    }

    private static class getAddressCatalogue_argsTupleScheme extends TupleScheme<getAddressCatalogue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddressCatalogue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddressCatalogue_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAddressCatalogue_result implements org.apache.thrift.TBase<getAddressCatalogue_result, getAddressCatalogue_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAddressCatalogue_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAddressCatalogue_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAddressCatalogue_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAddressCatalogue_resultTupleSchemeFactory());
    }

    public FullAddressCatalogue success; // required
    public com.vmesteonline.be.InvalidOperation exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FullAddressCatalogue.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAddressCatalogue_result.class, metaDataMap);
    }

    public getAddressCatalogue_result() {
    }

    public getAddressCatalogue_result(
      FullAddressCatalogue success,
      com.vmesteonline.be.InvalidOperation exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAddressCatalogue_result(getAddressCatalogue_result other) {
      if (other.isSetSuccess()) {
        this.success = new FullAddressCatalogue(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new com.vmesteonline.be.InvalidOperation(other.exc);
      }
    }

    public getAddressCatalogue_result deepCopy() {
      return new getAddressCatalogue_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public FullAddressCatalogue getSuccess() {
      return this.success;
    }

    public getAddressCatalogue_result setSuccess(FullAddressCatalogue success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.vmesteonline.be.InvalidOperation getExc() {
      return this.exc;
    }

    public getAddressCatalogue_result setExc(com.vmesteonline.be.InvalidOperation exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FullAddressCatalogue)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((com.vmesteonline.be.InvalidOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAddressCatalogue_result)
        return this.equals((getAddressCatalogue_result)that);
      return false;
    }

    public boolean equals(getAddressCatalogue_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAddressCatalogue_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAddressCatalogue_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAddressCatalogue_resultStandardSchemeFactory implements SchemeFactory {
      public getAddressCatalogue_resultStandardScheme getScheme() {
        return new getAddressCatalogue_resultStandardScheme();
      }
    }

    private static class getAddressCatalogue_resultStandardScheme extends StandardScheme<getAddressCatalogue_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAddressCatalogue_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FullAddressCatalogue();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new com.vmesteonline.be.InvalidOperation();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAddressCatalogue_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAddressCatalogue_resultTupleSchemeFactory implements SchemeFactory {
      public getAddressCatalogue_resultTupleScheme getScheme() {
        return new getAddressCatalogue_resultTupleScheme();
      }
    }

    private static class getAddressCatalogue_resultTupleScheme extends TupleScheme<getAddressCatalogue_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAddressCatalogue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAddressCatalogue_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FullAddressCatalogue();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new com.vmesteonline.be.InvalidOperation();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class setUserAddress_args implements org.apache.thrift.TBase<setUserAddress_args, setUserAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<setUserAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserAddress_args");

    private static final org.apache.thrift.protocol.TField NEW_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("newAddress", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserAddress_argsTupleSchemeFactory());
    }

    public com.vmesteonline.be.PostalAddress newAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_ADDRESS((short)1, "newAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_ADDRESS
            return NEW_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("newAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.PostalAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserAddress_args.class, metaDataMap);
    }

    public setUserAddress_args() {
    }

    public setUserAddress_args(
      com.vmesteonline.be.PostalAddress newAddress)
    {
      this();
      this.newAddress = newAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserAddress_args(setUserAddress_args other) {
      if (other.isSetNewAddress()) {
        this.newAddress = new com.vmesteonline.be.PostalAddress(other.newAddress);
      }
    }

    public setUserAddress_args deepCopy() {
      return new setUserAddress_args(this);
    }

    @Override
    public void clear() {
      this.newAddress = null;
    }

    public com.vmesteonline.be.PostalAddress getNewAddress() {
      return this.newAddress;
    }

    public setUserAddress_args setNewAddress(com.vmesteonline.be.PostalAddress newAddress) {
      this.newAddress = newAddress;
      return this;
    }

    public void unsetNewAddress() {
      this.newAddress = null;
    }

    /** Returns true if field newAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetNewAddress() {
      return this.newAddress != null;
    }

    public void setNewAddressIsSet(boolean value) {
      if (!value) {
        this.newAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_ADDRESS:
        if (value == null) {
          unsetNewAddress();
        } else {
          setNewAddress((com.vmesteonline.be.PostalAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_ADDRESS:
        return getNewAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_ADDRESS:
        return isSetNewAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserAddress_args)
        return this.equals((setUserAddress_args)that);
      return false;
    }

    public boolean equals(setUserAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_newAddress = true && this.isSetNewAddress();
      boolean that_present_newAddress = true && that.isSetNewAddress();
      if (this_present_newAddress || that_present_newAddress) {
        if (!(this_present_newAddress && that_present_newAddress))
          return false;
        if (!this.newAddress.equals(that.newAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setUserAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewAddress()).compareTo(other.isSetNewAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newAddress, other.newAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserAddress_args(");
      boolean first = true;

      sb.append("newAddress:");
      if (this.newAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.newAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newAddress != null) {
        newAddress.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserAddress_argsStandardSchemeFactory implements SchemeFactory {
      public setUserAddress_argsStandardScheme getScheme() {
        return new setUserAddress_argsStandardScheme();
      }
    }

    private static class setUserAddress_argsStandardScheme extends StandardScheme<setUserAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newAddress = new com.vmesteonline.be.PostalAddress();
                struct.newAddress.read(iprot);
                struct.setNewAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newAddress != null) {
          oprot.writeFieldBegin(NEW_ADDRESS_FIELD_DESC);
          struct.newAddress.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserAddress_argsTupleSchemeFactory implements SchemeFactory {
      public setUserAddress_argsTupleScheme getScheme() {
        return new setUserAddress_argsTupleScheme();
      }
    }

    private static class setUserAddress_argsTupleScheme extends TupleScheme<setUserAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewAddress()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewAddress()) {
          struct.newAddress.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newAddress = new com.vmesteonline.be.PostalAddress();
          struct.newAddress.read(iprot);
          struct.setNewAddressIsSet(true);
        }
      }
    }

  }

  public static class setUserAddress_result implements org.apache.thrift.TBase<setUserAddress_result, setUserAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<setUserAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setUserAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setUserAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setUserAddress_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserAddress_result.class, metaDataMap);
    }

    public setUserAddress_result() {
    }

    public setUserAddress_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setUserAddress_result(setUserAddress_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setUserAddress_result deepCopy() {
      return new setUserAddress_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setUserAddress_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setUserAddress_result)
        return this.equals((setUserAddress_result)that);
      return false;
    }

    public boolean equals(setUserAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setUserAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setUserAddress_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setUserAddress_resultStandardSchemeFactory implements SchemeFactory {
      public setUserAddress_resultStandardScheme getScheme() {
        return new setUserAddress_resultStandardScheme();
      }
    }

    private static class setUserAddress_resultStandardScheme extends StandardScheme<setUserAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setUserAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setUserAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setUserAddress_resultTupleSchemeFactory implements SchemeFactory {
      public setUserAddress_resultTupleScheme getScheme() {
        return new setUserAddress_resultTupleScheme();
      }
    }

    private static class setUserAddress_resultTupleScheme extends TupleScheme<setUserAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setUserAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setUserAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
