/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField RECIPIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recipientId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField EDITED_FIELD_DESC = new org.apache.thrift.protocol.TField("edited", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField APPROVED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("approvedBy", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField LIKES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("likesNum", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UNLIKES_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikesNum", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LINKED_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("linkedMessages", org.apache.thrift.protocol.TType.MAP, (short)14);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField USER_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("userMessage", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField USER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("userInfo", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField CHILD_MSGS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("childMsgsNum", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField CHILD_UNREAD_MSGS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("childUnreadMsgsNum", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public long id; // required
  public long parentId; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType type; // required
  public long topicId; // required
  public long groupId; // required
  public long authorId; // required
  public long recipientId; // optional
  public int created; // required
  public int edited; // required
  public long approvedBy; // optional
  public String content; // required
  public int likesNum; // required
  public int unlikesNum; // required
  public Map<MessageType,Long> linkedMessages; // required
  public Map<Long,String> tags; // required
  public UserMessage userMessage; // required
  public int offset; // required
  public com.vmesteonline.be.ShortUserInfo userInfo; // required
  public int childMsgsNum; // optional
  public int childUnreadMsgsNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARENT_ID((short)2, "parentId"),
    /**
     * 
     * @see MessageType
     */
    TYPE((short)3, "type"),
    TOPIC_ID((short)4, "topicId"),
    GROUP_ID((short)5, "groupId"),
    AUTHOR_ID((short)6, "authorId"),
    RECIPIENT_ID((short)7, "recipientId"),
    CREATED((short)8, "created"),
    EDITED((short)9, "edited"),
    APPROVED_BY((short)10, "approvedBy"),
    CONTENT((short)11, "content"),
    LIKES_NUM((short)12, "likesNum"),
    UNLIKES_NUM((short)13, "unlikesNum"),
    LINKED_MESSAGES((short)14, "linkedMessages"),
    TAGS((short)15, "tags"),
    USER_MESSAGE((short)16, "userMessage"),
    OFFSET((short)17, "offset"),
    USER_INFO((short)18, "userInfo"),
    CHILD_MSGS_NUM((short)19, "childMsgsNum"),
    CHILD_UNREAD_MSGS_NUM((short)20, "childUnreadMsgsNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // TOPIC_ID
          return TOPIC_ID;
        case 5: // GROUP_ID
          return GROUP_ID;
        case 6: // AUTHOR_ID
          return AUTHOR_ID;
        case 7: // RECIPIENT_ID
          return RECIPIENT_ID;
        case 8: // CREATED
          return CREATED;
        case 9: // EDITED
          return EDITED;
        case 10: // APPROVED_BY
          return APPROVED_BY;
        case 11: // CONTENT
          return CONTENT;
        case 12: // LIKES_NUM
          return LIKES_NUM;
        case 13: // UNLIKES_NUM
          return UNLIKES_NUM;
        case 14: // LINKED_MESSAGES
          return LINKED_MESSAGES;
        case 15: // TAGS
          return TAGS;
        case 16: // USER_MESSAGE
          return USER_MESSAGE;
        case 17: // OFFSET
          return OFFSET;
        case 18: // USER_INFO
          return USER_INFO;
        case 19: // CHILD_MSGS_NUM
          return CHILD_MSGS_NUM;
        case 20: // CHILD_UNREAD_MSGS_NUM
          return CHILD_UNREAD_MSGS_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENTID_ISSET_ID = 1;
  private static final int __TOPICID_ISSET_ID = 2;
  private static final int __GROUPID_ISSET_ID = 3;
  private static final int __AUTHORID_ISSET_ID = 4;
  private static final int __RECIPIENTID_ISSET_ID = 5;
  private static final int __CREATED_ISSET_ID = 6;
  private static final int __EDITED_ISSET_ID = 7;
  private static final int __APPROVEDBY_ISSET_ID = 8;
  private static final int __LIKESNUM_ISSET_ID = 9;
  private static final int __UNLIKESNUM_ISSET_ID = 10;
  private static final int __OFFSET_ISSET_ID = 11;
  private static final int __CHILDMSGSNUM_ISSET_ID = 12;
  private static final int __CHILDUNREADMSGSNUM_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RECIPIENT_ID,_Fields.APPROVED_BY,_Fields.CHILD_MSGS_NUM,_Fields.CHILD_UNREAD_MSGS_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECIPIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("recipientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDITED, new org.apache.thrift.meta_data.FieldMetaData("edited", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVED_BY, new org.apache.thrift.meta_data.FieldMetaData("approvedBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIKES_NUM, new org.apache.thrift.meta_data.FieldMetaData("likesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIKES_NUM, new org.apache.thrift.meta_data.FieldMetaData("unlikesNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINKED_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("linkedMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USER_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("userMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserMessage.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_INFO, new org.apache.thrift.meta_data.FieldMetaData("userInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.vmesteonline.be.ShortUserInfo.class)));
    tmpMap.put(_Fields.CHILD_MSGS_NUM, new org.apache.thrift.meta_data.FieldMetaData("childMsgsNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHILD_UNREAD_MSGS_NUM, new org.apache.thrift.meta_data.FieldMetaData("childUnreadMsgsNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    long id,
    long parentId,
    MessageType type,
    long topicId,
    long groupId,
    long authorId,
    int created,
    int edited,
    String content,
    int likesNum,
    int unlikesNum,
    Map<MessageType,Long> linkedMessages,
    Map<Long,String> tags,
    UserMessage userMessage,
    int offset,
    com.vmesteonline.be.ShortUserInfo userInfo)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.type = type;
    this.topicId = topicId;
    setTopicIdIsSet(true);
    this.groupId = groupId;
    setGroupIdIsSet(true);
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    this.created = created;
    setCreatedIsSet(true);
    this.edited = edited;
    setEditedIsSet(true);
    this.content = content;
    this.likesNum = likesNum;
    setLikesNumIsSet(true);
    this.unlikesNum = unlikesNum;
    setUnlikesNumIsSet(true);
    this.linkedMessages = linkedMessages;
    this.tags = tags;
    this.userMessage = userMessage;
    this.offset = offset;
    setOffsetIsSet(true);
    this.userInfo = userInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.parentId = other.parentId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.topicId = other.topicId;
    this.groupId = other.groupId;
    this.authorId = other.authorId;
    this.recipientId = other.recipientId;
    this.created = other.created;
    this.edited = other.edited;
    this.approvedBy = other.approvedBy;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.likesNum = other.likesNum;
    this.unlikesNum = other.unlikesNum;
    if (other.isSetLinkedMessages()) {
      Map<MessageType,Long> __this__linkedMessages = new HashMap<MessageType,Long>(other.linkedMessages.size());
      for (Map.Entry<MessageType, Long> other_element : other.linkedMessages.entrySet()) {

        MessageType other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        MessageType __this__linkedMessages_copy_key = other_element_key;

        Long __this__linkedMessages_copy_value = other_element_value;

        __this__linkedMessages.put(__this__linkedMessages_copy_key, __this__linkedMessages_copy_value);
      }
      this.linkedMessages = __this__linkedMessages;
    }
    if (other.isSetTags()) {
      Map<Long,String> __this__tags = new HashMap<Long,String>(other.tags);
      this.tags = __this__tags;
    }
    if (other.isSetUserMessage()) {
      this.userMessage = new UserMessage(other.userMessage);
    }
    this.offset = other.offset;
    if (other.isSetUserInfo()) {
      this.userInfo = new com.vmesteonline.be.ShortUserInfo(other.userInfo);
    }
    this.childMsgsNum = other.childMsgsNum;
    this.childUnreadMsgsNum = other.childUnreadMsgsNum;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.type = null;
    setTopicIdIsSet(false);
    this.topicId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    setAuthorIdIsSet(false);
    this.authorId = 0;
    setRecipientIdIsSet(false);
    this.recipientId = 0;
    setCreatedIsSet(false);
    this.created = 0;
    setEditedIsSet(false);
    this.edited = 0;
    setApprovedByIsSet(false);
    this.approvedBy = 0;
    this.content = null;
    setLikesNumIsSet(false);
    this.likesNum = 0;
    setUnlikesNumIsSet(false);
    this.unlikesNum = 0;
    this.linkedMessages = null;
    this.tags = null;
    this.userMessage = null;
    setOffsetIsSet(false);
    this.offset = 0;
    this.userInfo = null;
    setChildMsgsNumIsSet(false);
    this.childMsgsNum = 0;
    setChildUnreadMsgsNumIsSet(false);
    this.childUnreadMsgsNum = 0;
  }

  public long getId() {
    return this.id;
  }

  public Message setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public long getParentId() {
    return this.parentId;
  }

  public Message setParentId(long parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageType
   */
  public Message setType(MessageType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getTopicId() {
    return this.topicId;
  }

  public Message setTopicId(long topicId) {
    this.topicId = topicId;
    setTopicIdIsSet(true);
    return this;
  }

  public void unsetTopicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicId() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  public void setTopicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
  }

  public long getGroupId() {
    return this.groupId;
  }

  public Message setGroupId(long groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public long getAuthorId() {
    return this.authorId;
  }

  public Message setAuthorId(long authorId) {
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    return this;
  }

  public void unsetAuthorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHORID_ISSET_ID);
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHORID_ISSET_ID);
  }

  public void setAuthorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHORID_ISSET_ID, value);
  }

  public long getRecipientId() {
    return this.recipientId;
  }

  public Message setRecipientId(long recipientId) {
    this.recipientId = recipientId;
    setRecipientIdIsSet(true);
    return this;
  }

  public void unsetRecipientId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
  }

  /** Returns true if field recipientId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipientId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
  }

  public void setRecipientIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPIENTID_ISSET_ID, value);
  }

  public int getCreated() {
    return this.created;
  }

  public Message setCreated(int created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public int getEdited() {
    return this.edited;
  }

  public Message setEdited(int edited) {
    this.edited = edited;
    setEditedIsSet(true);
    return this;
  }

  public void unsetEdited() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  /** Returns true if field edited is set (has been assigned a value) and false otherwise */
  public boolean isSetEdited() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  public void setEditedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITED_ISSET_ID, value);
  }

  public long getApprovedBy() {
    return this.approvedBy;
  }

  public Message setApprovedBy(long approvedBy) {
    this.approvedBy = approvedBy;
    setApprovedByIsSet(true);
    return this;
  }

  public void unsetApprovedBy() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEDBY_ISSET_ID);
  }

  /** Returns true if field approvedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovedBy() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEDBY_ISSET_ID);
  }

  public void setApprovedByIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEDBY_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public Message setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getLikesNum() {
    return this.likesNum;
  }

  public Message setLikesNum(int likesNum) {
    this.likesNum = likesNum;
    setLikesNumIsSet(true);
    return this;
  }

  public void unsetLikesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKESNUM_ISSET_ID);
  }

  /** Returns true if field likesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLikesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKESNUM_ISSET_ID);
  }

  public void setLikesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKESNUM_ISSET_ID, value);
  }

  public int getUnlikesNum() {
    return this.unlikesNum;
  }

  public Message setUnlikesNum(int unlikesNum) {
    this.unlikesNum = unlikesNum;
    setUnlikesNumIsSet(true);
    return this;
  }

  public void unsetUnlikesNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID);
  }

  /** Returns true if field unlikesNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikesNum() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID);
  }

  public void setUnlikesNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKESNUM_ISSET_ID, value);
  }

  public int getLinkedMessagesSize() {
    return (this.linkedMessages == null) ? 0 : this.linkedMessages.size();
  }

  public void putToLinkedMessages(MessageType key, long val) {
    if (this.linkedMessages == null) {
      this.linkedMessages = new HashMap<MessageType,Long>();
    }
    this.linkedMessages.put(key, val);
  }

  public Map<MessageType,Long> getLinkedMessages() {
    return this.linkedMessages;
  }

  public Message setLinkedMessages(Map<MessageType,Long> linkedMessages) {
    this.linkedMessages = linkedMessages;
    return this;
  }

  public void unsetLinkedMessages() {
    this.linkedMessages = null;
  }

  /** Returns true if field linkedMessages is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkedMessages() {
    return this.linkedMessages != null;
  }

  public void setLinkedMessagesIsSet(boolean value) {
    if (!value) {
      this.linkedMessages = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(long key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<Long,String>();
    }
    this.tags.put(key, val);
  }

  public Map<Long,String> getTags() {
    return this.tags;
  }

  public Message setTags(Map<Long,String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public UserMessage getUserMessage() {
    return this.userMessage;
  }

  public Message setUserMessage(UserMessage userMessage) {
    this.userMessage = userMessage;
    return this;
  }

  public void unsetUserMessage() {
    this.userMessage = null;
  }

  /** Returns true if field userMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetUserMessage() {
    return this.userMessage != null;
  }

  public void setUserMessageIsSet(boolean value) {
    if (!value) {
      this.userMessage = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public Message setOffset(int offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public com.vmesteonline.be.ShortUserInfo getUserInfo() {
    return this.userInfo;
  }

  public Message setUserInfo(com.vmesteonline.be.ShortUserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  public void unsetUserInfo() {
    this.userInfo = null;
  }

  /** Returns true if field userInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetUserInfo() {
    return this.userInfo != null;
  }

  public void setUserInfoIsSet(boolean value) {
    if (!value) {
      this.userInfo = null;
    }
  }

  public int getChildMsgsNum() {
    return this.childMsgsNum;
  }

  public Message setChildMsgsNum(int childMsgsNum) {
    this.childMsgsNum = childMsgsNum;
    setChildMsgsNumIsSet(true);
    return this;
  }

  public void unsetChildMsgsNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILDMSGSNUM_ISSET_ID);
  }

  /** Returns true if field childMsgsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetChildMsgsNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHILDMSGSNUM_ISSET_ID);
  }

  public void setChildMsgsNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILDMSGSNUM_ISSET_ID, value);
  }

  public int getChildUnreadMsgsNum() {
    return this.childUnreadMsgsNum;
  }

  public Message setChildUnreadMsgsNum(int childUnreadMsgsNum) {
    this.childUnreadMsgsNum = childUnreadMsgsNum;
    setChildUnreadMsgsNumIsSet(true);
    return this;
  }

  public void unsetChildUnreadMsgsNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILDUNREADMSGSNUM_ISSET_ID);
  }

  /** Returns true if field childUnreadMsgsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetChildUnreadMsgsNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CHILDUNREADMSGSNUM_ISSET_ID);
  }

  public void setChildUnreadMsgsNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILDUNREADMSGSNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MessageType)value);
      }
      break;

    case TOPIC_ID:
      if (value == null) {
        unsetTopicId();
      } else {
        setTopicId((Long)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Long)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((Long)value);
      }
      break;

    case RECIPIENT_ID:
      if (value == null) {
        unsetRecipientId();
      } else {
        setRecipientId((Long)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Integer)value);
      }
      break;

    case EDITED:
      if (value == null) {
        unsetEdited();
      } else {
        setEdited((Integer)value);
      }
      break;

    case APPROVED_BY:
      if (value == null) {
        unsetApprovedBy();
      } else {
        setApprovedBy((Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case LIKES_NUM:
      if (value == null) {
        unsetLikesNum();
      } else {
        setLikesNum((Integer)value);
      }
      break;

    case UNLIKES_NUM:
      if (value == null) {
        unsetUnlikesNum();
      } else {
        setUnlikesNum((Integer)value);
      }
      break;

    case LINKED_MESSAGES:
      if (value == null) {
        unsetLinkedMessages();
      } else {
        setLinkedMessages((Map<MessageType,Long>)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<Long,String>)value);
      }
      break;

    case USER_MESSAGE:
      if (value == null) {
        unsetUserMessage();
      } else {
        setUserMessage((UserMessage)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case USER_INFO:
      if (value == null) {
        unsetUserInfo();
      } else {
        setUserInfo((com.vmesteonline.be.ShortUserInfo)value);
      }
      break;

    case CHILD_MSGS_NUM:
      if (value == null) {
        unsetChildMsgsNum();
      } else {
        setChildMsgsNum((Integer)value);
      }
      break;

    case CHILD_UNREAD_MSGS_NUM:
      if (value == null) {
        unsetChildUnreadMsgsNum();
      } else {
        setChildUnreadMsgsNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case PARENT_ID:
      return Long.valueOf(getParentId());

    case TYPE:
      return getType();

    case TOPIC_ID:
      return Long.valueOf(getTopicId());

    case GROUP_ID:
      return Long.valueOf(getGroupId());

    case AUTHOR_ID:
      return Long.valueOf(getAuthorId());

    case RECIPIENT_ID:
      return Long.valueOf(getRecipientId());

    case CREATED:
      return Integer.valueOf(getCreated());

    case EDITED:
      return Integer.valueOf(getEdited());

    case APPROVED_BY:
      return Long.valueOf(getApprovedBy());

    case CONTENT:
      return getContent();

    case LIKES_NUM:
      return Integer.valueOf(getLikesNum());

    case UNLIKES_NUM:
      return Integer.valueOf(getUnlikesNum());

    case LINKED_MESSAGES:
      return getLinkedMessages();

    case TAGS:
      return getTags();

    case USER_MESSAGE:
      return getUserMessage();

    case OFFSET:
      return Integer.valueOf(getOffset());

    case USER_INFO:
      return getUserInfo();

    case CHILD_MSGS_NUM:
      return Integer.valueOf(getChildMsgsNum());

    case CHILD_UNREAD_MSGS_NUM:
      return Integer.valueOf(getChildUnreadMsgsNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParentId();
    case TYPE:
      return isSetType();
    case TOPIC_ID:
      return isSetTopicId();
    case GROUP_ID:
      return isSetGroupId();
    case AUTHOR_ID:
      return isSetAuthorId();
    case RECIPIENT_ID:
      return isSetRecipientId();
    case CREATED:
      return isSetCreated();
    case EDITED:
      return isSetEdited();
    case APPROVED_BY:
      return isSetApprovedBy();
    case CONTENT:
      return isSetContent();
    case LIKES_NUM:
      return isSetLikesNum();
    case UNLIKES_NUM:
      return isSetUnlikesNum();
    case LINKED_MESSAGES:
      return isSetLinkedMessages();
    case TAGS:
      return isSetTags();
    case USER_MESSAGE:
      return isSetUserMessage();
    case OFFSET:
      return isSetOffset();
    case USER_INFO:
      return isSetUserInfo();
    case CHILD_MSGS_NUM:
      return isSetChildMsgsNum();
    case CHILD_UNREAD_MSGS_NUM:
      return isSetChildUnreadMsgsNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_topicId = true;
    boolean that_present_topicId = true;
    if (this_present_topicId || that_present_topicId) {
      if (!(this_present_topicId && that_present_topicId))
        return false;
      if (this.topicId != that.topicId)
        return false;
    }

    boolean this_present_groupId = true;
    boolean that_present_groupId = true;
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_authorId = true;
    boolean that_present_authorId = true;
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (this.authorId != that.authorId)
        return false;
    }

    boolean this_present_recipientId = true && this.isSetRecipientId();
    boolean that_present_recipientId = true && that.isSetRecipientId();
    if (this_present_recipientId || that_present_recipientId) {
      if (!(this_present_recipientId && that_present_recipientId))
        return false;
      if (this.recipientId != that.recipientId)
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_edited = true;
    boolean that_present_edited = true;
    if (this_present_edited || that_present_edited) {
      if (!(this_present_edited && that_present_edited))
        return false;
      if (this.edited != that.edited)
        return false;
    }

    boolean this_present_approvedBy = true && this.isSetApprovedBy();
    boolean that_present_approvedBy = true && that.isSetApprovedBy();
    if (this_present_approvedBy || that_present_approvedBy) {
      if (!(this_present_approvedBy && that_present_approvedBy))
        return false;
      if (this.approvedBy != that.approvedBy)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_likesNum = true;
    boolean that_present_likesNum = true;
    if (this_present_likesNum || that_present_likesNum) {
      if (!(this_present_likesNum && that_present_likesNum))
        return false;
      if (this.likesNum != that.likesNum)
        return false;
    }

    boolean this_present_unlikesNum = true;
    boolean that_present_unlikesNum = true;
    if (this_present_unlikesNum || that_present_unlikesNum) {
      if (!(this_present_unlikesNum && that_present_unlikesNum))
        return false;
      if (this.unlikesNum != that.unlikesNum)
        return false;
    }

    boolean this_present_linkedMessages = true && this.isSetLinkedMessages();
    boolean that_present_linkedMessages = true && that.isSetLinkedMessages();
    if (this_present_linkedMessages || that_present_linkedMessages) {
      if (!(this_present_linkedMessages && that_present_linkedMessages))
        return false;
      if (!this.linkedMessages.equals(that.linkedMessages))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_userMessage = true && this.isSetUserMessage();
    boolean that_present_userMessage = true && that.isSetUserMessage();
    if (this_present_userMessage || that_present_userMessage) {
      if (!(this_present_userMessage && that_present_userMessage))
        return false;
      if (!this.userMessage.equals(that.userMessage))
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_userInfo = true && this.isSetUserInfo();
    boolean that_present_userInfo = true && that.isSetUserInfo();
    if (this_present_userInfo || that_present_userInfo) {
      if (!(this_present_userInfo && that_present_userInfo))
        return false;
      if (!this.userInfo.equals(that.userInfo))
        return false;
    }

    boolean this_present_childMsgsNum = true && this.isSetChildMsgsNum();
    boolean that_present_childMsgsNum = true && that.isSetChildMsgsNum();
    if (this_present_childMsgsNum || that_present_childMsgsNum) {
      if (!(this_present_childMsgsNum && that_present_childMsgsNum))
        return false;
      if (this.childMsgsNum != that.childMsgsNum)
        return false;
    }

    boolean this_present_childUnreadMsgsNum = true && this.isSetChildUnreadMsgsNum();
    boolean that_present_childUnreadMsgsNum = true && that.isSetChildUnreadMsgsNum();
    if (this_present_childUnreadMsgsNum || that_present_childUnreadMsgsNum) {
      if (!(this_present_childUnreadMsgsNum && that_present_childUnreadMsgsNum))
        return false;
      if (this.childUnreadMsgsNum != that.childUnreadMsgsNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(other.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, other.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipientId()).compareTo(other.isSetRecipientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipientId, other.recipientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdited()).compareTo(other.isSetEdited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edited, other.edited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovedBy()).compareTo(other.isSetApprovedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvedBy, other.approvedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikesNum()).compareTo(other.isSetLikesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likesNum, other.likesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikesNum()).compareTo(other.isSetUnlikesNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikesNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikesNum, other.unlikesNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkedMessages()).compareTo(other.isSetLinkedMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkedMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkedMessages, other.linkedMessages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserMessage()).compareTo(other.isSetUserMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userMessage, other.userMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserInfo()).compareTo(other.isSetUserInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userInfo, other.userInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildMsgsNum()).compareTo(other.isSetChildMsgsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildMsgsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childMsgsNum, other.childMsgsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChildUnreadMsgsNum()).compareTo(other.isSetChildUnreadMsgsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChildUnreadMsgsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.childUnreadMsgsNum, other.childUnreadMsgsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicId:");
    sb.append(this.topicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupId:");
    sb.append(this.groupId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorId:");
    sb.append(this.authorId);
    first = false;
    if (isSetRecipientId()) {
      if (!first) sb.append(", ");
      sb.append("recipientId:");
      sb.append(this.recipientId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("edited:");
    sb.append(this.edited);
    first = false;
    if (isSetApprovedBy()) {
      if (!first) sb.append(", ");
      sb.append("approvedBy:");
      sb.append(this.approvedBy);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("likesNum:");
    sb.append(this.likesNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikesNum:");
    sb.append(this.unlikesNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkedMessages:");
    if (this.linkedMessages == null) {
      sb.append("null");
    } else {
      sb.append(this.linkedMessages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userMessage:");
    if (this.userMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.userMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userInfo:");
    if (this.userInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.userInfo);
    }
    first = false;
    if (isSetChildMsgsNum()) {
      if (!first) sb.append(", ");
      sb.append("childMsgsNum:");
      sb.append(this.childMsgsNum);
      first = false;
    }
    if (isSetChildUnreadMsgsNum()) {
      if (!first) sb.append(", ");
      sb.append("childUnreadMsgsNum:");
      sb.append(this.childUnreadMsgsNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userMessage != null) {
      userMessage.validate();
    }
    if (userInfo != null) {
      userInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentId = iprot.readI64();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.topicId = iprot.readI64();
              struct.setTopicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.groupId = iprot.readI64();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.authorId = iprot.readI64();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECIPIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recipientId = iprot.readI64();
              struct.setRecipientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.created = iprot.readI32();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EDITED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.edited = iprot.readI32();
              struct.setEditedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // APPROVED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.approvedBy = iprot.readI64();
              struct.setApprovedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIKES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likesNum = iprot.readI32();
              struct.setLikesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UNLIKES_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlikesNum = iprot.readI32();
              struct.setUnlikesNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LINKED_MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.linkedMessages = new HashMap<MessageType,Long>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  MessageType _key2;
                  long _val3;
                  _key2 = MessageType.findByValue(iprot.readI32());
                  _val3 = iprot.readI64();
                  struct.linkedMessages.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setLinkedMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.tags = new HashMap<Long,String>(2*_map4.size);
                for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                {
                  long _key6;
                  String _val7;
                  _key6 = iprot.readI64();
                  _val7 = iprot.readString();
                  struct.tags.put(_key6, _val7);
                }
                iprot.readMapEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USER_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userMessage = new UserMessage();
              struct.userMessage.read(iprot);
              struct.setUserMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offset = iprot.readI32();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userInfo = new com.vmesteonline.be.ShortUserInfo();
              struct.userInfo.read(iprot);
              struct.setUserInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHILD_MSGS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.childMsgsNum = iprot.readI32();
              struct.setChildMsgsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CHILD_UNREAD_MSGS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.childUnreadMsgsNum = iprot.readI32();
              struct.setChildUnreadMsgsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
      oprot.writeI64(struct.topicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI64(struct.groupId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
      oprot.writeI64(struct.authorId);
      oprot.writeFieldEnd();
      if (struct.isSetRecipientId()) {
        oprot.writeFieldBegin(RECIPIENT_ID_FIELD_DESC);
        oprot.writeI64(struct.recipientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI32(struct.created);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDITED_FIELD_DESC);
      oprot.writeI32(struct.edited);
      oprot.writeFieldEnd();
      if (struct.isSetApprovedBy()) {
        oprot.writeFieldBegin(APPROVED_BY_FIELD_DESC);
        oprot.writeI64(struct.approvedBy);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIKES_NUM_FIELD_DESC);
      oprot.writeI32(struct.likesNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_NUM_FIELD_DESC);
      oprot.writeI32(struct.unlikesNum);
      oprot.writeFieldEnd();
      if (struct.linkedMessages != null) {
        oprot.writeFieldBegin(LINKED_MESSAGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.linkedMessages.size()));
          for (Map.Entry<MessageType, Long> _iter8 : struct.linkedMessages.entrySet())
          {
            oprot.writeI32(_iter8.getKey().getValue());
            oprot.writeI64(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (Map.Entry<Long, String> _iter9 : struct.tags.entrySet())
          {
            oprot.writeI64(_iter9.getKey());
            oprot.writeString(_iter9.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userMessage != null) {
        oprot.writeFieldBegin(USER_MESSAGE_FIELD_DESC);
        struct.userMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(struct.offset);
      oprot.writeFieldEnd();
      if (struct.userInfo != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        struct.userInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChildMsgsNum()) {
        oprot.writeFieldBegin(CHILD_MSGS_NUM_FIELD_DESC);
        oprot.writeI32(struct.childMsgsNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChildUnreadMsgsNum()) {
        oprot.writeFieldBegin(CHILD_UNREAD_MSGS_NUM_FIELD_DESC);
        oprot.writeI32(struct.childUnreadMsgsNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetParentId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetTopicId()) {
        optionals.set(3);
      }
      if (struct.isSetGroupId()) {
        optionals.set(4);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(5);
      }
      if (struct.isSetRecipientId()) {
        optionals.set(6);
      }
      if (struct.isSetCreated()) {
        optionals.set(7);
      }
      if (struct.isSetEdited()) {
        optionals.set(8);
      }
      if (struct.isSetApprovedBy()) {
        optionals.set(9);
      }
      if (struct.isSetContent()) {
        optionals.set(10);
      }
      if (struct.isSetLikesNum()) {
        optionals.set(11);
      }
      if (struct.isSetUnlikesNum()) {
        optionals.set(12);
      }
      if (struct.isSetLinkedMessages()) {
        optionals.set(13);
      }
      if (struct.isSetTags()) {
        optionals.set(14);
      }
      if (struct.isSetUserMessage()) {
        optionals.set(15);
      }
      if (struct.isSetOffset()) {
        optionals.set(16);
      }
      if (struct.isSetUserInfo()) {
        optionals.set(17);
      }
      if (struct.isSetChildMsgsNum()) {
        optionals.set(18);
      }
      if (struct.isSetChildUnreadMsgsNum()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetParentId()) {
        oprot.writeI64(struct.parentId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTopicId()) {
        oprot.writeI64(struct.topicId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI64(struct.groupId);
      }
      if (struct.isSetAuthorId()) {
        oprot.writeI64(struct.authorId);
      }
      if (struct.isSetRecipientId()) {
        oprot.writeI64(struct.recipientId);
      }
      if (struct.isSetCreated()) {
        oprot.writeI32(struct.created);
      }
      if (struct.isSetEdited()) {
        oprot.writeI32(struct.edited);
      }
      if (struct.isSetApprovedBy()) {
        oprot.writeI64(struct.approvedBy);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetLikesNum()) {
        oprot.writeI32(struct.likesNum);
      }
      if (struct.isSetUnlikesNum()) {
        oprot.writeI32(struct.unlikesNum);
      }
      if (struct.isSetLinkedMessages()) {
        {
          oprot.writeI32(struct.linkedMessages.size());
          for (Map.Entry<MessageType, Long> _iter10 : struct.linkedMessages.entrySet())
          {
            oprot.writeI32(_iter10.getKey().getValue());
            oprot.writeI64(_iter10.getValue());
          }
        }
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (Map.Entry<Long, String> _iter11 : struct.tags.entrySet())
          {
            oprot.writeI64(_iter11.getKey());
            oprot.writeString(_iter11.getValue());
          }
        }
      }
      if (struct.isSetUserMessage()) {
        struct.userMessage.write(oprot);
      }
      if (struct.isSetOffset()) {
        oprot.writeI32(struct.offset);
      }
      if (struct.isSetUserInfo()) {
        struct.userInfo.write(oprot);
      }
      if (struct.isSetChildMsgsNum()) {
        oprot.writeI32(struct.childMsgsNum);
      }
      if (struct.isSetChildUnreadMsgsNum()) {
        oprot.writeI32(struct.childUnreadMsgsNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentId = iprot.readI64();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = MessageType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topicId = iprot.readI64();
        struct.setTopicIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.groupId = iprot.readI64();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.authorId = iprot.readI64();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.recipientId = iprot.readI64();
        struct.setRecipientIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.created = iprot.readI32();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.edited = iprot.readI32();
        struct.setEditedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.approvedBy = iprot.readI64();
        struct.setApprovedByIsSet(true);
      }
      if (incoming.get(10)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(11)) {
        struct.likesNum = iprot.readI32();
        struct.setLikesNumIsSet(true);
      }
      if (incoming.get(12)) {
        struct.unlikesNum = iprot.readI32();
        struct.setUnlikesNumIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.linkedMessages = new HashMap<MessageType,Long>(2*_map12.size);
          for (int _i13 = 0; _i13 < _map12.size; ++_i13)
          {
            MessageType _key14;
            long _val15;
            _key14 = MessageType.findByValue(iprot.readI32());
            _val15 = iprot.readI64();
            struct.linkedMessages.put(_key14, _val15);
          }
        }
        struct.setLinkedMessagesIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tags = new HashMap<Long,String>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            long _key18;
            String _val19;
            _key18 = iprot.readI64();
            _val19 = iprot.readString();
            struct.tags.put(_key18, _val19);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.userMessage = new UserMessage();
        struct.userMessage.read(iprot);
        struct.setUserMessageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.offset = iprot.readI32();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(17)) {
        struct.userInfo = new com.vmesteonline.be.ShortUserInfo();
        struct.userInfo.read(iprot);
        struct.setUserInfoIsSet(true);
      }
      if (incoming.get(18)) {
        struct.childMsgsNum = iprot.readI32();
        struct.setChildMsgsNumIsSet(true);
      }
      if (incoming.get(19)) {
        struct.childUnreadMsgsNum = iprot.readI32();
        struct.setChildUnreadMsgsNumIsSet(true);
      }
    }
  }

}

