/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("parent", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECIPIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("recipient", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EDITED_FIELD_DESC = new org.apache.thrift.protocol.TField("edited", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField APPROVED_FIELD_DESC = new org.apache.thrift.protocol.TField("approved", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("likes", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UNLIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikes", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public int id; // required
  public int parent; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType type; // required
  public int topic; // required
  public int author; // required
  public int recipient; // optional
  public int created; // required
  public int edited; // required
  public int approved; // optional
  public String content; // required
  public int likes; // required
  public int unlikes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARENT((short)2, "parent"),
    /**
     * 
     * @see MessageType
     */
    TYPE((short)3, "type"),
    TOPIC((short)4, "topic"),
    AUTHOR((short)5, "author"),
    RECIPIENT((short)6, "recipient"),
    CREATED((short)7, "created"),
    EDITED((short)8, "edited"),
    APPROVED((short)9, "approved"),
    CONTENT((short)10, "content"),
    LIKES((short)11, "likes"),
    UNLIKES((short)12, "unlikes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT
          return PARENT;
        case 3: // TYPE
          return TYPE;
        case 4: // TOPIC
          return TOPIC;
        case 5: // AUTHOR
          return AUTHOR;
        case 6: // RECIPIENT
          return RECIPIENT;
        case 7: // CREATED
          return CREATED;
        case 8: // EDITED
          return EDITED;
        case 9: // APPROVED
          return APPROVED;
        case 10: // CONTENT
          return CONTENT;
        case 11: // LIKES
          return LIKES;
        case 12: // UNLIKES
          return UNLIKES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENT_ISSET_ID = 1;
  private static final int __TOPIC_ISSET_ID = 2;
  private static final int __AUTHOR_ISSET_ID = 3;
  private static final int __RECIPIENT_ISSET_ID = 4;
  private static final int __CREATED_ISSET_ID = 5;
  private static final int __EDITED_ISSET_ID = 6;
  private static final int __APPROVED_ISSET_ID = 7;
  private static final int __LIKES_ISSET_ID = 8;
  private static final int __UNLIKES_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RECIPIENT,_Fields.APPROVED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT, new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECIPIENT, new org.apache.thrift.meta_data.FieldMetaData("recipient", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDITED, new org.apache.thrift.meta_data.FieldMetaData("edited", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVED, new org.apache.thrift.meta_data.FieldMetaData("approved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIKES, new org.apache.thrift.meta_data.FieldMetaData("likes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIKES, new org.apache.thrift.meta_data.FieldMetaData("unlikes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    int id,
    int parent,
    MessageType type,
    int topic,
    int author,
    int created,
    int edited,
    String content,
    int likes,
    int unlikes)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.parent = parent;
    setParentIsSet(true);
    this.type = type;
    this.topic = topic;
    setTopicIsSet(true);
    this.author = author;
    setAuthorIsSet(true);
    this.created = created;
    setCreatedIsSet(true);
    this.edited = edited;
    setEditedIsSet(true);
    this.content = content;
    this.likes = likes;
    setLikesIsSet(true);
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.parent = other.parent;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.topic = other.topic;
    this.author = other.author;
    this.recipient = other.recipient;
    this.created = other.created;
    this.edited = other.edited;
    this.approved = other.approved;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.likes = other.likes;
    this.unlikes = other.unlikes;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setParentIsSet(false);
    this.parent = 0;
    this.type = null;
    setTopicIsSet(false);
    this.topic = 0;
    setAuthorIsSet(false);
    this.author = 0;
    setRecipientIsSet(false);
    this.recipient = 0;
    setCreatedIsSet(false);
    this.created = 0;
    setEditedIsSet(false);
    this.edited = 0;
    setApprovedIsSet(false);
    this.approved = 0;
    this.content = null;
    setLikesIsSet(false);
    this.likes = 0;
    setUnlikesIsSet(false);
    this.unlikes = 0;
  }

  public int getId() {
    return this.id;
  }

  public Message setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getParent() {
    return this.parent;
  }

  public Message setParent(int parent) {
    this.parent = parent;
    setParentIsSet(true);
    return this;
  }

  public void unsetParent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  /** Returns true if field parent is set (has been assigned a value) and false otherwise */
  public boolean isSetParent() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_ISSET_ID);
  }

  public void setParentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageType
   */
  public Message setType(MessageType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getTopic() {
    return this.topic;
  }

  public Message setTopic(int topic) {
    this.topic = topic;
    setTopicIsSet(true);
    return this;
  }

  public void unsetTopic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPIC_ISSET_ID);
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPIC_ISSET_ID);
  }

  public void setTopicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPIC_ISSET_ID, value);
  }

  public int getAuthor() {
    return this.author;
  }

  public Message setAuthor(int author) {
    this.author = author;
    setAuthorIsSet(true);
    return this;
  }

  public void unsetAuthor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHOR_ISSET_ID);
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHOR_ISSET_ID);
  }

  public void setAuthorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHOR_ISSET_ID, value);
  }

  public int getRecipient() {
    return this.recipient;
  }

  public Message setRecipient(int recipient) {
    this.recipient = recipient;
    setRecipientIsSet(true);
    return this;
  }

  public void unsetRecipient() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPIENT_ISSET_ID);
  }

  /** Returns true if field recipient is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipient() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIPIENT_ISSET_ID);
  }

  public void setRecipientIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPIENT_ISSET_ID, value);
  }

  public int getCreated() {
    return this.created;
  }

  public Message setCreated(int created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public int getEdited() {
    return this.edited;
  }

  public Message setEdited(int edited) {
    this.edited = edited;
    setEditedIsSet(true);
    return this;
  }

  public void unsetEdited() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  /** Returns true if field edited is set (has been assigned a value) and false otherwise */
  public boolean isSetEdited() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  public void setEditedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITED_ISSET_ID, value);
  }

  public int getApproved() {
    return this.approved;
  }

  public Message setApproved(int approved) {
    this.approved = approved;
    setApprovedIsSet(true);
    return this;
  }

  public void unsetApproved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVED_ISSET_ID);
  }

  /** Returns true if field approved is set (has been assigned a value) and false otherwise */
  public boolean isSetApproved() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVED_ISSET_ID);
  }

  public void setApprovedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVED_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public Message setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getLikes() {
    return this.likes;
  }

  public Message setLikes(int likes) {
    this.likes = likes;
    setLikesIsSet(true);
    return this;
  }

  public void unsetLikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  /** Returns true if field likes is set (has been assigned a value) and false otherwise */
  public boolean isSetLikes() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  public void setLikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKES_ISSET_ID, value);
  }

  public int getUnlikes() {
    return this.unlikes;
  }

  public Message setUnlikes(int unlikes) {
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
    return this;
  }

  public void unsetUnlikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  /** Returns true if field unlikes is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikes() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  public void setUnlikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PARENT:
      if (value == null) {
        unsetParent();
      } else {
        setParent((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MessageType)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((Integer)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((Integer)value);
      }
      break;

    case RECIPIENT:
      if (value == null) {
        unsetRecipient();
      } else {
        setRecipient((Integer)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Integer)value);
      }
      break;

    case EDITED:
      if (value == null) {
        unsetEdited();
      } else {
        setEdited((Integer)value);
      }
      break;

    case APPROVED:
      if (value == null) {
        unsetApproved();
      } else {
        setApproved((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case LIKES:
      if (value == null) {
        unsetLikes();
      } else {
        setLikes((Integer)value);
      }
      break;

    case UNLIKES:
      if (value == null) {
        unsetUnlikes();
      } else {
        setUnlikes((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PARENT:
      return Integer.valueOf(getParent());

    case TYPE:
      return getType();

    case TOPIC:
      return Integer.valueOf(getTopic());

    case AUTHOR:
      return Integer.valueOf(getAuthor());

    case RECIPIENT:
      return Integer.valueOf(getRecipient());

    case CREATED:
      return Integer.valueOf(getCreated());

    case EDITED:
      return Integer.valueOf(getEdited());

    case APPROVED:
      return Integer.valueOf(getApproved());

    case CONTENT:
      return getContent();

    case LIKES:
      return Integer.valueOf(getLikes());

    case UNLIKES:
      return Integer.valueOf(getUnlikes());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT:
      return isSetParent();
    case TYPE:
      return isSetType();
    case TOPIC:
      return isSetTopic();
    case AUTHOR:
      return isSetAuthor();
    case RECIPIENT:
      return isSetRecipient();
    case CREATED:
      return isSetCreated();
    case EDITED:
      return isSetEdited();
    case APPROVED:
      return isSetApproved();
    case CONTENT:
      return isSetContent();
    case LIKES:
      return isSetLikes();
    case UNLIKES:
      return isSetUnlikes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_parent = true;
    boolean that_present_parent = true;
    if (this_present_parent || that_present_parent) {
      if (!(this_present_parent && that_present_parent))
        return false;
      if (this.parent != that.parent)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_topic = true;
    boolean that_present_topic = true;
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (this.topic != that.topic)
        return false;
    }

    boolean this_present_author = true;
    boolean that_present_author = true;
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (this.author != that.author)
        return false;
    }

    boolean this_present_recipient = true && this.isSetRecipient();
    boolean that_present_recipient = true && that.isSetRecipient();
    if (this_present_recipient || that_present_recipient) {
      if (!(this_present_recipient && that_present_recipient))
        return false;
      if (this.recipient != that.recipient)
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_edited = true;
    boolean that_present_edited = true;
    if (this_present_edited || that_present_edited) {
      if (!(this_present_edited && that_present_edited))
        return false;
      if (this.edited != that.edited)
        return false;
    }

    boolean this_present_approved = true && this.isSetApproved();
    boolean that_present_approved = true && that.isSetApproved();
    if (this_present_approved || that_present_approved) {
      if (!(this_present_approved && that_present_approved))
        return false;
      if (this.approved != that.approved)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_likes = true;
    boolean that_present_likes = true;
    if (this_present_likes || that_present_likes) {
      if (!(this_present_likes && that_present_likes))
        return false;
      if (this.likes != that.likes)
        return false;
    }

    boolean this_present_unlikes = true;
    boolean that_present_unlikes = true;
    if (this_present_unlikes || that_present_unlikes) {
      if (!(this_present_unlikes && that_present_unlikes))
        return false;
      if (this.unlikes != that.unlikes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipient()).compareTo(other.isSetRecipient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipient, other.recipient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdited()).compareTo(other.isSetEdited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edited, other.edited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproved()).compareTo(other.isSetApproved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approved, other.approved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikes()).compareTo(other.isSetLikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likes, other.likes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikes()).compareTo(other.isSetUnlikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikes, other.unlikes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parent:");
    sb.append(this.parent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    sb.append(this.topic);
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    sb.append(this.author);
    first = false;
    if (isSetRecipient()) {
      if (!first) sb.append(", ");
      sb.append("recipient:");
      sb.append(this.recipient);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("edited:");
    sb.append(this.edited);
    first = false;
    if (isSetApproved()) {
      if (!first) sb.append(", ");
      sb.append("approved:");
      sb.append(this.approved);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("likes:");
    sb.append(this.likes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikes:");
    sb.append(this.unlikes);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parent = iprot.readI32();
              struct.setParentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topic = iprot.readI32();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.author = iprot.readI32();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECIPIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recipient = iprot.readI32();
              struct.setRecipientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.created = iprot.readI32();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EDITED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.edited = iprot.readI32();
              struct.setEditedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPROVED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approved = iprot.readI32();
              struct.setApprovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likes = iprot.readI32();
              struct.setLikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNLIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlikes = iprot.readI32();
              struct.setUnlikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_FIELD_DESC);
      oprot.writeI32(struct.parent);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOPIC_FIELD_DESC);
      oprot.writeI32(struct.topic);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
      oprot.writeI32(struct.author);
      oprot.writeFieldEnd();
      if (struct.isSetRecipient()) {
        oprot.writeFieldBegin(RECIPIENT_FIELD_DESC);
        oprot.writeI32(struct.recipient);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI32(struct.created);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDITED_FIELD_DESC);
      oprot.writeI32(struct.edited);
      oprot.writeFieldEnd();
      if (struct.isSetApproved()) {
        oprot.writeFieldBegin(APPROVED_FIELD_DESC);
        oprot.writeI32(struct.approved);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIKES_FIELD_DESC);
      oprot.writeI32(struct.likes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_FIELD_DESC);
      oprot.writeI32(struct.unlikes);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetParent()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetTopic()) {
        optionals.set(3);
      }
      if (struct.isSetAuthor()) {
        optionals.set(4);
      }
      if (struct.isSetRecipient()) {
        optionals.set(5);
      }
      if (struct.isSetCreated()) {
        optionals.set(6);
      }
      if (struct.isSetEdited()) {
        optionals.set(7);
      }
      if (struct.isSetApproved()) {
        optionals.set(8);
      }
      if (struct.isSetContent()) {
        optionals.set(9);
      }
      if (struct.isSetLikes()) {
        optionals.set(10);
      }
      if (struct.isSetUnlikes()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetParent()) {
        oprot.writeI32(struct.parent);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTopic()) {
        oprot.writeI32(struct.topic);
      }
      if (struct.isSetAuthor()) {
        oprot.writeI32(struct.author);
      }
      if (struct.isSetRecipient()) {
        oprot.writeI32(struct.recipient);
      }
      if (struct.isSetCreated()) {
        oprot.writeI32(struct.created);
      }
      if (struct.isSetEdited()) {
        oprot.writeI32(struct.edited);
      }
      if (struct.isSetApproved()) {
        oprot.writeI32(struct.approved);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetLikes()) {
        oprot.writeI32(struct.likes);
      }
      if (struct.isSetUnlikes()) {
        oprot.writeI32(struct.unlikes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parent = iprot.readI32();
        struct.setParentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = MessageType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topic = iprot.readI32();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(4)) {
        struct.author = iprot.readI32();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recipient = iprot.readI32();
        struct.setRecipientIsSet(true);
      }
      if (incoming.get(6)) {
        struct.created = iprot.readI32();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.edited = iprot.readI32();
        struct.setEditedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.approved = iprot.readI32();
        struct.setApprovedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.likes = iprot.readI32();
        struct.setLikesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.unlikes = iprot.readI32();
        struct.setUnlikesIsSet(true);
      }
    }
  }

}

