/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topicId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("authorId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECIPIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recipientId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EDITED_FIELD_DESC = new org.apache.thrift.protocol.TField("edited", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField APPROVED_FIELD_DESC = new org.apache.thrift.protocol.TField("approved", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("likes", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UNLIKES_FIELD_DESC = new org.apache.thrift.protocol.TField("unlikes", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ID_FORUM_FIELD_DESC = new org.apache.thrift.protocol.TField("idForum", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ID_SHOP_FIELD_DESC = new org.apache.thrift.protocol.TField("idShop", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ID_DIALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("idDialog", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ID_NEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("idNews", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public int id; // required
  public int parentId; // required
  /**
   * 
   * @see MessageType
   */
  public MessageType type; // required
  public int topicId; // required
  public int authorId; // required
  public int recipientId; // optional
  public int created; // required
  public int edited; // required
  public int approved; // optional
  public String content; // required
  public int likes; // required
  public int unlikes; // required
  public int groupId; // required
  public int idForum; // optional
  public int idShop; // optional
  public int idDialog; // optional
  public int idNews; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARENT_ID((short)2, "parentId"),
    /**
     * 
     * @see MessageType
     */
    TYPE((short)3, "type"),
    TOPIC_ID((short)4, "topicId"),
    AUTHOR_ID((short)5, "authorId"),
    RECIPIENT_ID((short)6, "recipientId"),
    CREATED((short)7, "created"),
    EDITED((short)8, "edited"),
    APPROVED((short)9, "approved"),
    CONTENT((short)10, "content"),
    LIKES((short)11, "likes"),
    UNLIKES((short)12, "unlikes"),
    GROUP_ID((short)13, "groupId"),
    ID_FORUM((short)14, "idForum"),
    ID_SHOP((short)15, "idShop"),
    ID_DIALOG((short)16, "idDialog"),
    ID_NEWS((short)17, "idNews");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // TOPIC_ID
          return TOPIC_ID;
        case 5: // AUTHOR_ID
          return AUTHOR_ID;
        case 6: // RECIPIENT_ID
          return RECIPIENT_ID;
        case 7: // CREATED
          return CREATED;
        case 8: // EDITED
          return EDITED;
        case 9: // APPROVED
          return APPROVED;
        case 10: // CONTENT
          return CONTENT;
        case 11: // LIKES
          return LIKES;
        case 12: // UNLIKES
          return UNLIKES;
        case 13: // GROUP_ID
          return GROUP_ID;
        case 14: // ID_FORUM
          return ID_FORUM;
        case 15: // ID_SHOP
          return ID_SHOP;
        case 16: // ID_DIALOG
          return ID_DIALOG;
        case 17: // ID_NEWS
          return ID_NEWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __PARENTID_ISSET_ID = 1;
  private static final int __TOPICID_ISSET_ID = 2;
  private static final int __AUTHORID_ISSET_ID = 3;
  private static final int __RECIPIENTID_ISSET_ID = 4;
  private static final int __CREATED_ISSET_ID = 5;
  private static final int __EDITED_ISSET_ID = 6;
  private static final int __APPROVED_ISSET_ID = 7;
  private static final int __LIKES_ISSET_ID = 8;
  private static final int __UNLIKES_ISSET_ID = 9;
  private static final int __GROUPID_ISSET_ID = 10;
  private static final int __IDFORUM_ISSET_ID = 11;
  private static final int __IDSHOP_ISSET_ID = 12;
  private static final int __IDDIALOG_ISSET_ID = 13;
  private static final int __IDNEWS_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RECIPIENT_ID,_Fields.APPROVED,_Fields.ID_FORUM,_Fields.ID_SHOP,_Fields.ID_DIALOG,_Fields.ID_NEWS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MessageType.class)));
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topicId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("authorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECIPIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("recipientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EDITED, new org.apache.thrift.meta_data.FieldMetaData("edited", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVED, new org.apache.thrift.meta_data.FieldMetaData("approved", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIKES, new org.apache.thrift.meta_data.FieldMetaData("likes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIKES, new org.apache.thrift.meta_data.FieldMetaData("unlikes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_FORUM, new org.apache.thrift.meta_data.FieldMetaData("idForum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_SHOP, new org.apache.thrift.meta_data.FieldMetaData("idShop", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_DIALOG, new org.apache.thrift.meta_data.FieldMetaData("idDialog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID_NEWS, new org.apache.thrift.meta_data.FieldMetaData("idNews", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    int id,
    int parentId,
    MessageType type,
    int topicId,
    int authorId,
    int created,
    int edited,
    String content,
    int likes,
    int unlikes,
    int groupId)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.parentId = parentId;
    setParentIdIsSet(true);
    this.type = type;
    this.topicId = topicId;
    setTopicIdIsSet(true);
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    this.created = created;
    setCreatedIsSet(true);
    this.edited = edited;
    setEditedIsSet(true);
    this.content = content;
    this.likes = likes;
    setLikesIsSet(true);
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
    this.groupId = groupId;
    setGroupIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.parentId = other.parentId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.topicId = other.topicId;
    this.authorId = other.authorId;
    this.recipientId = other.recipientId;
    this.created = other.created;
    this.edited = other.edited;
    this.approved = other.approved;
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.likes = other.likes;
    this.unlikes = other.unlikes;
    this.groupId = other.groupId;
    this.idForum = other.idForum;
    this.idShop = other.idShop;
    this.idDialog = other.idDialog;
    this.idNews = other.idNews;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setParentIdIsSet(false);
    this.parentId = 0;
    this.type = null;
    setTopicIdIsSet(false);
    this.topicId = 0;
    setAuthorIdIsSet(false);
    this.authorId = 0;
    setRecipientIdIsSet(false);
    this.recipientId = 0;
    setCreatedIsSet(false);
    this.created = 0;
    setEditedIsSet(false);
    this.edited = 0;
    setApprovedIsSet(false);
    this.approved = 0;
    this.content = null;
    setLikesIsSet(false);
    this.likes = 0;
    setUnlikesIsSet(false);
    this.unlikes = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    setIdForumIsSet(false);
    this.idForum = 0;
    setIdShopIsSet(false);
    this.idShop = 0;
    setIdDialogIsSet(false);
    this.idDialog = 0;
    setIdNewsIsSet(false);
    this.idNews = 0;
  }

  public int getId() {
    return this.id;
  }

  public Message setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getParentId() {
    return this.parentId;
  }

  public Message setParentId(int parentId) {
    this.parentId = parentId;
    setParentIdIsSet(true);
    return this;
  }

  public void unsetParentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTID_ISSET_ID);
  }

  public void setParentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTID_ISSET_ID, value);
  }

  /**
   * 
   * @see MessageType
   */
  public MessageType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageType
   */
  public Message setType(MessageType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getTopicId() {
    return this.topicId;
  }

  public Message setTopicId(int topicId) {
    this.topicId = topicId;
    setTopicIdIsSet(true);
    return this;
  }

  public void unsetTopicId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  /** Returns true if field topicId is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicId() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPICID_ISSET_ID);
  }

  public void setTopicIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPICID_ISSET_ID, value);
  }

  public int getAuthorId() {
    return this.authorId;
  }

  public Message setAuthorId(int authorId) {
    this.authorId = authorId;
    setAuthorIdIsSet(true);
    return this;
  }

  public void unsetAuthorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTHORID_ISSET_ID);
  }

  /** Returns true if field authorId is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorId() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTHORID_ISSET_ID);
  }

  public void setAuthorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTHORID_ISSET_ID, value);
  }

  public int getRecipientId() {
    return this.recipientId;
  }

  public Message setRecipientId(int recipientId) {
    this.recipientId = recipientId;
    setRecipientIdIsSet(true);
    return this;
  }

  public void unsetRecipientId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
  }

  /** Returns true if field recipientId is set (has been assigned a value) and false otherwise */
  public boolean isSetRecipientId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECIPIENTID_ISSET_ID);
  }

  public void setRecipientIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECIPIENTID_ISSET_ID, value);
  }

  public int getCreated() {
    return this.created;
  }

  public Message setCreated(int created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  public int getEdited() {
    return this.edited;
  }

  public Message setEdited(int edited) {
    this.edited = edited;
    setEditedIsSet(true);
    return this;
  }

  public void unsetEdited() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  /** Returns true if field edited is set (has been assigned a value) and false otherwise */
  public boolean isSetEdited() {
    return EncodingUtils.testBit(__isset_bitfield, __EDITED_ISSET_ID);
  }

  public void setEditedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EDITED_ISSET_ID, value);
  }

  public int getApproved() {
    return this.approved;
  }

  public Message setApproved(int approved) {
    this.approved = approved;
    setApprovedIsSet(true);
    return this;
  }

  public void unsetApproved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVED_ISSET_ID);
  }

  /** Returns true if field approved is set (has been assigned a value) and false otherwise */
  public boolean isSetApproved() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVED_ISSET_ID);
  }

  public void setApprovedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVED_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public Message setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getLikes() {
    return this.likes;
  }

  public Message setLikes(int likes) {
    this.likes = likes;
    setLikesIsSet(true);
    return this;
  }

  public void unsetLikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  /** Returns true if field likes is set (has been assigned a value) and false otherwise */
  public boolean isSetLikes() {
    return EncodingUtils.testBit(__isset_bitfield, __LIKES_ISSET_ID);
  }

  public void setLikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIKES_ISSET_ID, value);
  }

  public int getUnlikes() {
    return this.unlikes;
  }

  public Message setUnlikes(int unlikes) {
    this.unlikes = unlikes;
    setUnlikesIsSet(true);
    return this;
  }

  public void unsetUnlikes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  /** Returns true if field unlikes is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlikes() {
    return EncodingUtils.testBit(__isset_bitfield, __UNLIKES_ISSET_ID);
  }

  public void setUnlikesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNLIKES_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.groupId;
  }

  public Message setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getIdForum() {
    return this.idForum;
  }

  public Message setIdForum(int idForum) {
    this.idForum = idForum;
    setIdForumIsSet(true);
    return this;
  }

  public void unsetIdForum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDFORUM_ISSET_ID);
  }

  /** Returns true if field idForum is set (has been assigned a value) and false otherwise */
  public boolean isSetIdForum() {
    return EncodingUtils.testBit(__isset_bitfield, __IDFORUM_ISSET_ID);
  }

  public void setIdForumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDFORUM_ISSET_ID, value);
  }

  public int getIdShop() {
    return this.idShop;
  }

  public Message setIdShop(int idShop) {
    this.idShop = idShop;
    setIdShopIsSet(true);
    return this;
  }

  public void unsetIdShop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDSHOP_ISSET_ID);
  }

  /** Returns true if field idShop is set (has been assigned a value) and false otherwise */
  public boolean isSetIdShop() {
    return EncodingUtils.testBit(__isset_bitfield, __IDSHOP_ISSET_ID);
  }

  public void setIdShopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDSHOP_ISSET_ID, value);
  }

  public int getIdDialog() {
    return this.idDialog;
  }

  public Message setIdDialog(int idDialog) {
    this.idDialog = idDialog;
    setIdDialogIsSet(true);
    return this;
  }

  public void unsetIdDialog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDDIALOG_ISSET_ID);
  }

  /** Returns true if field idDialog is set (has been assigned a value) and false otherwise */
  public boolean isSetIdDialog() {
    return EncodingUtils.testBit(__isset_bitfield, __IDDIALOG_ISSET_ID);
  }

  public void setIdDialogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDDIALOG_ISSET_ID, value);
  }

  public int getIdNews() {
    return this.idNews;
  }

  public Message setIdNews(int idNews) {
    this.idNews = idNews;
    setIdNewsIsSet(true);
    return this;
  }

  public void unsetIdNews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IDNEWS_ISSET_ID);
  }

  /** Returns true if field idNews is set (has been assigned a value) and false otherwise */
  public boolean isSetIdNews() {
    return EncodingUtils.testBit(__isset_bitfield, __IDNEWS_ISSET_ID);
  }

  public void setIdNewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IDNEWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((MessageType)value);
      }
      break;

    case TOPIC_ID:
      if (value == null) {
        unsetTopicId();
      } else {
        setTopicId((Integer)value);
      }
      break;

    case AUTHOR_ID:
      if (value == null) {
        unsetAuthorId();
      } else {
        setAuthorId((Integer)value);
      }
      break;

    case RECIPIENT_ID:
      if (value == null) {
        unsetRecipientId();
      } else {
        setRecipientId((Integer)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((Integer)value);
      }
      break;

    case EDITED:
      if (value == null) {
        unsetEdited();
      } else {
        setEdited((Integer)value);
      }
      break;

    case APPROVED:
      if (value == null) {
        unsetApproved();
      } else {
        setApproved((Integer)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case LIKES:
      if (value == null) {
        unsetLikes();
      } else {
        setLikes((Integer)value);
      }
      break;

    case UNLIKES:
      if (value == null) {
        unsetUnlikes();
      } else {
        setUnlikes((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case ID_FORUM:
      if (value == null) {
        unsetIdForum();
      } else {
        setIdForum((Integer)value);
      }
      break;

    case ID_SHOP:
      if (value == null) {
        unsetIdShop();
      } else {
        setIdShop((Integer)value);
      }
      break;

    case ID_DIALOG:
      if (value == null) {
        unsetIdDialog();
      } else {
        setIdDialog((Integer)value);
      }
      break;

    case ID_NEWS:
      if (value == null) {
        unsetIdNews();
      } else {
        setIdNews((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PARENT_ID:
      return Integer.valueOf(getParentId());

    case TYPE:
      return getType();

    case TOPIC_ID:
      return Integer.valueOf(getTopicId());

    case AUTHOR_ID:
      return Integer.valueOf(getAuthorId());

    case RECIPIENT_ID:
      return Integer.valueOf(getRecipientId());

    case CREATED:
      return Integer.valueOf(getCreated());

    case EDITED:
      return Integer.valueOf(getEdited());

    case APPROVED:
      return Integer.valueOf(getApproved());

    case CONTENT:
      return getContent();

    case LIKES:
      return Integer.valueOf(getLikes());

    case UNLIKES:
      return Integer.valueOf(getUnlikes());

    case GROUP_ID:
      return Integer.valueOf(getGroupId());

    case ID_FORUM:
      return Integer.valueOf(getIdForum());

    case ID_SHOP:
      return Integer.valueOf(getIdShop());

    case ID_DIALOG:
      return Integer.valueOf(getIdDialog());

    case ID_NEWS:
      return Integer.valueOf(getIdNews());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParentId();
    case TYPE:
      return isSetType();
    case TOPIC_ID:
      return isSetTopicId();
    case AUTHOR_ID:
      return isSetAuthorId();
    case RECIPIENT_ID:
      return isSetRecipientId();
    case CREATED:
      return isSetCreated();
    case EDITED:
      return isSetEdited();
    case APPROVED:
      return isSetApproved();
    case CONTENT:
      return isSetContent();
    case LIKES:
      return isSetLikes();
    case UNLIKES:
      return isSetUnlikes();
    case GROUP_ID:
      return isSetGroupId();
    case ID_FORUM:
      return isSetIdForum();
    case ID_SHOP:
      return isSetIdShop();
    case ID_DIALOG:
      return isSetIdDialog();
    case ID_NEWS:
      return isSetIdNews();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_parentId = true;
    boolean that_present_parentId = true;
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (this.parentId != that.parentId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_topicId = true;
    boolean that_present_topicId = true;
    if (this_present_topicId || that_present_topicId) {
      if (!(this_present_topicId && that_present_topicId))
        return false;
      if (this.topicId != that.topicId)
        return false;
    }

    boolean this_present_authorId = true;
    boolean that_present_authorId = true;
    if (this_present_authorId || that_present_authorId) {
      if (!(this_present_authorId && that_present_authorId))
        return false;
      if (this.authorId != that.authorId)
        return false;
    }

    boolean this_present_recipientId = true && this.isSetRecipientId();
    boolean that_present_recipientId = true && that.isSetRecipientId();
    if (this_present_recipientId || that_present_recipientId) {
      if (!(this_present_recipientId && that_present_recipientId))
        return false;
      if (this.recipientId != that.recipientId)
        return false;
    }

    boolean this_present_created = true;
    boolean that_present_created = true;
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    boolean this_present_edited = true;
    boolean that_present_edited = true;
    if (this_present_edited || that_present_edited) {
      if (!(this_present_edited && that_present_edited))
        return false;
      if (this.edited != that.edited)
        return false;
    }

    boolean this_present_approved = true && this.isSetApproved();
    boolean that_present_approved = true && that.isSetApproved();
    if (this_present_approved || that_present_approved) {
      if (!(this_present_approved && that_present_approved))
        return false;
      if (this.approved != that.approved)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_likes = true;
    boolean that_present_likes = true;
    if (this_present_likes || that_present_likes) {
      if (!(this_present_likes && that_present_likes))
        return false;
      if (this.likes != that.likes)
        return false;
    }

    boolean this_present_unlikes = true;
    boolean that_present_unlikes = true;
    if (this_present_unlikes || that_present_unlikes) {
      if (!(this_present_unlikes && that_present_unlikes))
        return false;
      if (this.unlikes != that.unlikes)
        return false;
    }

    boolean this_present_groupId = true;
    boolean that_present_groupId = true;
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_idForum = true && this.isSetIdForum();
    boolean that_present_idForum = true && that.isSetIdForum();
    if (this_present_idForum || that_present_idForum) {
      if (!(this_present_idForum && that_present_idForum))
        return false;
      if (this.idForum != that.idForum)
        return false;
    }

    boolean this_present_idShop = true && this.isSetIdShop();
    boolean that_present_idShop = true && that.isSetIdShop();
    if (this_present_idShop || that_present_idShop) {
      if (!(this_present_idShop && that_present_idShop))
        return false;
      if (this.idShop != that.idShop)
        return false;
    }

    boolean this_present_idDialog = true && this.isSetIdDialog();
    boolean that_present_idDialog = true && that.isSetIdDialog();
    if (this_present_idDialog || that_present_idDialog) {
      if (!(this_present_idDialog && that_present_idDialog))
        return false;
      if (this.idDialog != that.idDialog)
        return false;
    }

    boolean this_present_idNews = true && this.isSetIdNews();
    boolean that_present_idNews = true && that.isSetIdNews();
    if (this_present_idNews || that_present_idNews) {
      if (!(this_present_idNews && that_present_idNews))
        return false;
      if (this.idNews != that.idNews)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(other.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, other.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopicId()).compareTo(other.isSetTopicId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicId, other.topicId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorId()).compareTo(other.isSetAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorId, other.authorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecipientId()).compareTo(other.isSetRecipientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecipientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recipientId, other.recipientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreated()).compareTo(other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdited()).compareTo(other.isSetEdited());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdited()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edited, other.edited);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproved()).compareTo(other.isSetApproved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approved, other.approved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLikes()).compareTo(other.isSetLikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.likes, other.likes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnlikes()).compareTo(other.isSetUnlikes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlikes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlikes, other.unlikes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdForum()).compareTo(other.isSetIdForum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdForum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idForum, other.idForum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdShop()).compareTo(other.isSetIdShop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdShop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idShop, other.idShop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdDialog()).compareTo(other.isSetIdDialog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdDialog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idDialog, other.idDialog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdNews()).compareTo(other.isSetIdNews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdNews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.idNews, other.idNews);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentId:");
    sb.append(this.parentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicId:");
    sb.append(this.topicId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorId:");
    sb.append(this.authorId);
    first = false;
    if (isSetRecipientId()) {
      if (!first) sb.append(", ");
      sb.append("recipientId:");
      sb.append(this.recipientId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("created:");
    sb.append(this.created);
    first = false;
    if (!first) sb.append(", ");
    sb.append("edited:");
    sb.append(this.edited);
    first = false;
    if (isSetApproved()) {
      if (!first) sb.append(", ");
      sb.append("approved:");
      sb.append(this.approved);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("likes:");
    sb.append(this.likes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlikes:");
    sb.append(this.unlikes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupId:");
    sb.append(this.groupId);
    first = false;
    if (isSetIdForum()) {
      if (!first) sb.append(", ");
      sb.append("idForum:");
      sb.append(this.idForum);
      first = false;
    }
    if (isSetIdShop()) {
      if (!first) sb.append(", ");
      sb.append("idShop:");
      sb.append(this.idShop);
      first = false;
    }
    if (isSetIdDialog()) {
      if (!first) sb.append(", ");
      sb.append("idDialog:");
      sb.append(this.idDialog);
      first = false;
    }
    if (isSetIdNews()) {
      if (!first) sb.append(", ");
      sb.append("idNews:");
      sb.append(this.idNews);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentId = iprot.readI32();
              struct.setParentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = MessageType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topicId = iprot.readI32();
              struct.setTopicIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.authorId = iprot.readI32();
              struct.setAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECIPIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recipientId = iprot.readI32();
              struct.setRecipientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.created = iprot.readI32();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EDITED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.edited = iprot.readI32();
              struct.setEditedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPROVED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approved = iprot.readI32();
              struct.setApprovedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.likes = iprot.readI32();
              struct.setLikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UNLIKES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlikes = iprot.readI32();
              struct.setUnlikesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ID_FORUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idForum = iprot.readI32();
              struct.setIdForumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ID_SHOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idShop = iprot.readI32();
              struct.setIdShopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ID_DIALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idDialog = iprot.readI32();
              struct.setIdDialogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ID_NEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.idNews = iprot.readI32();
              struct.setIdNewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentId);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
      oprot.writeI32(struct.topicId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTHOR_ID_FIELD_DESC);
      oprot.writeI32(struct.authorId);
      oprot.writeFieldEnd();
      if (struct.isSetRecipientId()) {
        oprot.writeFieldBegin(RECIPIENT_ID_FIELD_DESC);
        oprot.writeI32(struct.recipientId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATED_FIELD_DESC);
      oprot.writeI32(struct.created);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EDITED_FIELD_DESC);
      oprot.writeI32(struct.edited);
      oprot.writeFieldEnd();
      if (struct.isSetApproved()) {
        oprot.writeFieldBegin(APPROVED_FIELD_DESC);
        oprot.writeI32(struct.approved);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIKES_FIELD_DESC);
      oprot.writeI32(struct.likes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIKES_FIELD_DESC);
      oprot.writeI32(struct.unlikes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.groupId);
      oprot.writeFieldEnd();
      if (struct.isSetIdForum()) {
        oprot.writeFieldBegin(ID_FORUM_FIELD_DESC);
        oprot.writeI32(struct.idForum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdShop()) {
        oprot.writeFieldBegin(ID_SHOP_FIELD_DESC);
        oprot.writeI32(struct.idShop);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdDialog()) {
        oprot.writeFieldBegin(ID_DIALOG_FIELD_DESC);
        oprot.writeI32(struct.idDialog);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIdNews()) {
        oprot.writeFieldBegin(ID_NEWS_FIELD_DESC);
        oprot.writeI32(struct.idNews);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetParentId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetTopicId()) {
        optionals.set(3);
      }
      if (struct.isSetAuthorId()) {
        optionals.set(4);
      }
      if (struct.isSetRecipientId()) {
        optionals.set(5);
      }
      if (struct.isSetCreated()) {
        optionals.set(6);
      }
      if (struct.isSetEdited()) {
        optionals.set(7);
      }
      if (struct.isSetApproved()) {
        optionals.set(8);
      }
      if (struct.isSetContent()) {
        optionals.set(9);
      }
      if (struct.isSetLikes()) {
        optionals.set(10);
      }
      if (struct.isSetUnlikes()) {
        optionals.set(11);
      }
      if (struct.isSetGroupId()) {
        optionals.set(12);
      }
      if (struct.isSetIdForum()) {
        optionals.set(13);
      }
      if (struct.isSetIdShop()) {
        optionals.set(14);
      }
      if (struct.isSetIdDialog()) {
        optionals.set(15);
      }
      if (struct.isSetIdNews()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetParentId()) {
        oprot.writeI32(struct.parentId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTopicId()) {
        oprot.writeI32(struct.topicId);
      }
      if (struct.isSetAuthorId()) {
        oprot.writeI32(struct.authorId);
      }
      if (struct.isSetRecipientId()) {
        oprot.writeI32(struct.recipientId);
      }
      if (struct.isSetCreated()) {
        oprot.writeI32(struct.created);
      }
      if (struct.isSetEdited()) {
        oprot.writeI32(struct.edited);
      }
      if (struct.isSetApproved()) {
        oprot.writeI32(struct.approved);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetLikes()) {
        oprot.writeI32(struct.likes);
      }
      if (struct.isSetUnlikes()) {
        oprot.writeI32(struct.unlikes);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetIdForum()) {
        oprot.writeI32(struct.idForum);
      }
      if (struct.isSetIdShop()) {
        oprot.writeI32(struct.idShop);
      }
      if (struct.isSetIdDialog()) {
        oprot.writeI32(struct.idDialog);
      }
      if (struct.isSetIdNews()) {
        oprot.writeI32(struct.idNews);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.parentId = iprot.readI32();
        struct.setParentIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = MessageType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topicId = iprot.readI32();
        struct.setTopicIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.authorId = iprot.readI32();
        struct.setAuthorIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recipientId = iprot.readI32();
        struct.setRecipientIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.created = iprot.readI32();
        struct.setCreatedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.edited = iprot.readI32();
        struct.setEditedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.approved = iprot.readI32();
        struct.setApprovedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.likes = iprot.readI32();
        struct.setLikesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.unlikes = iprot.readI32();
        struct.setUnlikesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.idForum = iprot.readI32();
        struct.setIdForumIsSet(true);
      }
      if (incoming.get(14)) {
        struct.idShop = iprot.readI32();
        struct.setIdShopIsSet(true);
      }
      if (incoming.get(15)) {
        struct.idDialog = iprot.readI32();
        struct.setIdDialogIsSet(true);
      }
      if (incoming.get(16)) {
        struct.idNews = iprot.readI32();
        struct.setIdNewsIsSet(true);
      }
    }
  }

}

