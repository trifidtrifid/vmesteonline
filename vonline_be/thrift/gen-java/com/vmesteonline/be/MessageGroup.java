/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MessageGroup implements org.apache.thrift.TBase<MessageGroup, MessageGroup._Fields>, java.io.Serializable, Cloneable, Comparable<MessageGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageGroup");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CANSEE_FIELD_DESC = new org.apache.thrift.protocol.TField("cansee", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CANRESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("canresponse", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageGroupTupleSchemeFactory());
  }

  public int message; // required
  public int group; // required
  public boolean cansee; // required
  public boolean canresponse; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    GROUP((short)2, "group"),
    CANSEE((short)3, "cansee"),
    CANRESPONSE((short)4, "canresponse");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // GROUP
          return GROUP;
        case 3: // CANSEE
          return CANSEE;
        case 4: // CANRESPONSE
          return CANRESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MESSAGE_ISSET_ID = 0;
  private static final int __GROUP_ISSET_ID = 1;
  private static final int __CANSEE_ISSET_ID = 2;
  private static final int __CANRESPONSE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANSEE, new org.apache.thrift.meta_data.FieldMetaData("cansee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CANRESPONSE, new org.apache.thrift.meta_data.FieldMetaData("canresponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageGroup.class, metaDataMap);
  }

  public MessageGroup() {
  }

  public MessageGroup(
    int message,
    int group,
    boolean cansee,
    boolean canresponse)
  {
    this();
    this.message = message;
    setMessageIsSet(true);
    this.group = group;
    setGroupIsSet(true);
    this.cansee = cansee;
    setCanseeIsSet(true);
    this.canresponse = canresponse;
    setCanresponseIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageGroup(MessageGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.message = other.message;
    this.group = other.group;
    this.cansee = other.cansee;
    this.canresponse = other.canresponse;
  }

  public MessageGroup deepCopy() {
    return new MessageGroup(this);
  }

  @Override
  public void clear() {
    setMessageIsSet(false);
    this.message = 0;
    setGroupIsSet(false);
    this.group = 0;
    setCanseeIsSet(false);
    this.cansee = false;
    setCanresponseIsSet(false);
    this.canresponse = false;
  }

  public int getMessage() {
    return this.message;
  }

  public MessageGroup setMessage(int message) {
    this.message = message;
    setMessageIsSet(true);
    return this;
  }

  public void unsetMessage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGE_ISSET_ID);
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return EncodingUtils.testBit(__isset_bitfield, __MESSAGE_ISSET_ID);
  }

  public void setMessageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGE_ISSET_ID, value);
  }

  public int getGroup() {
    return this.group;
  }

  public MessageGroup setGroup(int group) {
    this.group = group;
    setGroupIsSet(true);
    return this;
  }

  public void unsetGroup() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ISSET_ID);
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_ISSET_ID);
  }

  public void setGroupIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ISSET_ID, value);
  }

  public boolean isCansee() {
    return this.cansee;
  }

  public MessageGroup setCansee(boolean cansee) {
    this.cansee = cansee;
    setCanseeIsSet(true);
    return this;
  }

  public void unsetCansee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANSEE_ISSET_ID);
  }

  /** Returns true if field cansee is set (has been assigned a value) and false otherwise */
  public boolean isSetCansee() {
    return EncodingUtils.testBit(__isset_bitfield, __CANSEE_ISSET_ID);
  }

  public void setCanseeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANSEE_ISSET_ID, value);
  }

  public boolean isCanresponse() {
    return this.canresponse;
  }

  public MessageGroup setCanresponse(boolean canresponse) {
    this.canresponse = canresponse;
    setCanresponseIsSet(true);
    return this;
  }

  public void unsetCanresponse() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANRESPONSE_ISSET_ID);
  }

  /** Returns true if field canresponse is set (has been assigned a value) and false otherwise */
  public boolean isSetCanresponse() {
    return EncodingUtils.testBit(__isset_bitfield, __CANRESPONSE_ISSET_ID);
  }

  public void setCanresponseIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANRESPONSE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Integer)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((Integer)value);
      }
      break;

    case CANSEE:
      if (value == null) {
        unsetCansee();
      } else {
        setCansee((Boolean)value);
      }
      break;

    case CANRESPONSE:
      if (value == null) {
        unsetCanresponse();
      } else {
        setCanresponse((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return Integer.valueOf(getMessage());

    case GROUP:
      return Integer.valueOf(getGroup());

    case CANSEE:
      return Boolean.valueOf(isCansee());

    case CANRESPONSE:
      return Boolean.valueOf(isCanresponse());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case GROUP:
      return isSetGroup();
    case CANSEE:
      return isSetCansee();
    case CANRESPONSE:
      return isSetCanresponse();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageGroup)
      return this.equals((MessageGroup)that);
    return false;
  }

  public boolean equals(MessageGroup that) {
    if (that == null)
      return false;

    boolean this_present_message = true;
    boolean that_present_message = true;
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (this.message != that.message)
        return false;
    }

    boolean this_present_group = true;
    boolean that_present_group = true;
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (this.group != that.group)
        return false;
    }

    boolean this_present_cansee = true;
    boolean that_present_cansee = true;
    if (this_present_cansee || that_present_cansee) {
      if (!(this_present_cansee && that_present_cansee))
        return false;
      if (this.cansee != that.cansee)
        return false;
    }

    boolean this_present_canresponse = true;
    boolean that_present_canresponse = true;
    if (this_present_canresponse || that_present_canresponse) {
      if (!(this_present_canresponse && that_present_canresponse))
        return false;
      if (this.canresponse != that.canresponse)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MessageGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCansee()).compareTo(other.isSetCansee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCansee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cansee, other.cansee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCanresponse()).compareTo(other.isSetCanresponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCanresponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canresponse, other.canresponse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageGroup(");
    boolean first = true;

    sb.append("message:");
    sb.append(this.message);
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    sb.append(this.group);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cansee:");
    sb.append(this.cansee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("canresponse:");
    sb.append(this.canresponse);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageGroupStandardSchemeFactory implements SchemeFactory {
    public MessageGroupStandardScheme getScheme() {
      return new MessageGroupStandardScheme();
    }
  }

  private static class MessageGroupStandardScheme extends StandardScheme<MessageGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.message = iprot.readI32();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group = iprot.readI32();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CANSEE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.cansee = iprot.readBool();
              struct.setCanseeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CANRESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.canresponse = iprot.readBool();
              struct.setCanresponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeI32(struct.message);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_FIELD_DESC);
      oprot.writeI32(struct.group);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANSEE_FIELD_DESC);
      oprot.writeBool(struct.cansee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CANRESPONSE_FIELD_DESC);
      oprot.writeBool(struct.canresponse);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageGroupTupleSchemeFactory implements SchemeFactory {
    public MessageGroupTupleScheme getScheme() {
      return new MessageGroupTupleScheme();
    }
  }

  private static class MessageGroupTupleScheme extends TupleScheme<MessageGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetGroup()) {
        optionals.set(1);
      }
      if (struct.isSetCansee()) {
        optionals.set(2);
      }
      if (struct.isSetCanresponse()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMessage()) {
        oprot.writeI32(struct.message);
      }
      if (struct.isSetGroup()) {
        oprot.writeI32(struct.group);
      }
      if (struct.isSetCansee()) {
        oprot.writeBool(struct.cansee);
      }
      if (struct.isSetCanresponse()) {
        oprot.writeBool(struct.canresponse);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.message = iprot.readI32();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.group = iprot.readI32();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cansee = iprot.readBool();
        struct.setCanseeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.canresponse = iprot.readBool();
        struct.setCanresponseIsSet(true);
      }
    }
  }

}

