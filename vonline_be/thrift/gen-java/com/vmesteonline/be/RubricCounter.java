/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vmesteonline.be;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RubricCounter implements org.apache.thrift.TBase<RubricCounter, RubricCounter._Fields>, java.io.Serializable, Cloneable, Comparable<RubricCounter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RubricCounter");

  private static final org.apache.thrift.protocol.TField RUBRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("rubric", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_TOPIC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("newTopicNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_MESSAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("newMessageNum", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RubricCounterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RubricCounterTupleSchemeFactory());
  }

  public int rubric; // required
  /**
   * 
   * @see com.vmesteonline.be.MessageType
   */
  public com.vmesteonline.be.MessageType messageType; // required
  public int newTopicNum; // required
  public int newMessageNum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RUBRIC((short)1, "rubric"),
    /**
     * 
     * @see com.vmesteonline.be.MessageType
     */
    MESSAGE_TYPE((short)2, "messageType"),
    NEW_TOPIC_NUM((short)3, "newTopicNum"),
    NEW_MESSAGE_NUM((short)4, "newMessageNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RUBRIC
          return RUBRIC;
        case 2: // MESSAGE_TYPE
          return MESSAGE_TYPE;
        case 3: // NEW_TOPIC_NUM
          return NEW_TOPIC_NUM;
        case 4: // NEW_MESSAGE_NUM
          return NEW_MESSAGE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RUBRIC_ISSET_ID = 0;
  private static final int __NEWTOPICNUM_ISSET_ID = 1;
  private static final int __NEWMESSAGENUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RUBRIC, new org.apache.thrift.meta_data.FieldMetaData("rubric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.vmesteonline.be.MessageType.class)));
    tmpMap.put(_Fields.NEW_TOPIC_NUM, new org.apache.thrift.meta_data.FieldMetaData("newTopicNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_MESSAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("newMessageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RubricCounter.class, metaDataMap);
  }

  public RubricCounter() {
  }

  public RubricCounter(
    int rubric,
    com.vmesteonline.be.MessageType messageType,
    int newTopicNum,
    int newMessageNum)
  {
    this();
    this.rubric = rubric;
    setRubricIsSet(true);
    this.messageType = messageType;
    this.newTopicNum = newTopicNum;
    setNewTopicNumIsSet(true);
    this.newMessageNum = newMessageNum;
    setNewMessageNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RubricCounter(RubricCounter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rubric = other.rubric;
    if (other.isSetMessageType()) {
      this.messageType = other.messageType;
    }
    this.newTopicNum = other.newTopicNum;
    this.newMessageNum = other.newMessageNum;
  }

  public RubricCounter deepCopy() {
    return new RubricCounter(this);
  }

  @Override
  public void clear() {
    setRubricIsSet(false);
    this.rubric = 0;
    this.messageType = null;
    setNewTopicNumIsSet(false);
    this.newTopicNum = 0;
    setNewMessageNumIsSet(false);
    this.newMessageNum = 0;
  }

  public int getRubric() {
    return this.rubric;
  }

  public RubricCounter setRubric(int rubric) {
    this.rubric = rubric;
    setRubricIsSet(true);
    return this;
  }

  public void unsetRubric() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  /** Returns true if field rubric is set (has been assigned a value) and false otherwise */
  public boolean isSetRubric() {
    return EncodingUtils.testBit(__isset_bitfield, __RUBRIC_ISSET_ID);
  }

  public void setRubricIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RUBRIC_ISSET_ID, value);
  }

  /**
   * 
   * @see com.vmesteonline.be.MessageType
   */
  public com.vmesteonline.be.MessageType getMessageType() {
    return this.messageType;
  }

  /**
   * 
   * @see com.vmesteonline.be.MessageType
   */
  public RubricCounter setMessageType(com.vmesteonline.be.MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  public void unsetMessageType() {
    this.messageType = null;
  }

  /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageType() {
    return this.messageType != null;
  }

  public void setMessageTypeIsSet(boolean value) {
    if (!value) {
      this.messageType = null;
    }
  }

  public int getNewTopicNum() {
    return this.newTopicNum;
  }

  public RubricCounter setNewTopicNum(int newTopicNum) {
    this.newTopicNum = newTopicNum;
    setNewTopicNumIsSet(true);
    return this;
  }

  public void unsetNewTopicNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWTOPICNUM_ISSET_ID);
  }

  /** Returns true if field newTopicNum is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTopicNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWTOPICNUM_ISSET_ID);
  }

  public void setNewTopicNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWTOPICNUM_ISSET_ID, value);
  }

  public int getNewMessageNum() {
    return this.newMessageNum;
  }

  public RubricCounter setNewMessageNum(int newMessageNum) {
    this.newMessageNum = newMessageNum;
    setNewMessageNumIsSet(true);
    return this;
  }

  public void unsetNewMessageNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWMESSAGENUM_ISSET_ID);
  }

  /** Returns true if field newMessageNum is set (has been assigned a value) and false otherwise */
  public boolean isSetNewMessageNum() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWMESSAGENUM_ISSET_ID);
  }

  public void setNewMessageNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWMESSAGENUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RUBRIC:
      if (value == null) {
        unsetRubric();
      } else {
        setRubric((Integer)value);
      }
      break;

    case MESSAGE_TYPE:
      if (value == null) {
        unsetMessageType();
      } else {
        setMessageType((com.vmesteonline.be.MessageType)value);
      }
      break;

    case NEW_TOPIC_NUM:
      if (value == null) {
        unsetNewTopicNum();
      } else {
        setNewTopicNum((Integer)value);
      }
      break;

    case NEW_MESSAGE_NUM:
      if (value == null) {
        unsetNewMessageNum();
      } else {
        setNewMessageNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RUBRIC:
      return Integer.valueOf(getRubric());

    case MESSAGE_TYPE:
      return getMessageType();

    case NEW_TOPIC_NUM:
      return Integer.valueOf(getNewTopicNum());

    case NEW_MESSAGE_NUM:
      return Integer.valueOf(getNewMessageNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RUBRIC:
      return isSetRubric();
    case MESSAGE_TYPE:
      return isSetMessageType();
    case NEW_TOPIC_NUM:
      return isSetNewTopicNum();
    case NEW_MESSAGE_NUM:
      return isSetNewMessageNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RubricCounter)
      return this.equals((RubricCounter)that);
    return false;
  }

  public boolean equals(RubricCounter that) {
    if (that == null)
      return false;

    boolean this_present_rubric = true;
    boolean that_present_rubric = true;
    if (this_present_rubric || that_present_rubric) {
      if (!(this_present_rubric && that_present_rubric))
        return false;
      if (this.rubric != that.rubric)
        return false;
    }

    boolean this_present_messageType = true && this.isSetMessageType();
    boolean that_present_messageType = true && that.isSetMessageType();
    if (this_present_messageType || that_present_messageType) {
      if (!(this_present_messageType && that_present_messageType))
        return false;
      if (!this.messageType.equals(that.messageType))
        return false;
    }

    boolean this_present_newTopicNum = true;
    boolean that_present_newTopicNum = true;
    if (this_present_newTopicNum || that_present_newTopicNum) {
      if (!(this_present_newTopicNum && that_present_newTopicNum))
        return false;
      if (this.newTopicNum != that.newTopicNum)
        return false;
    }

    boolean this_present_newMessageNum = true;
    boolean that_present_newMessageNum = true;
    if (this_present_newMessageNum || that_present_newMessageNum) {
      if (!(this_present_newMessageNum && that_present_newMessageNum))
        return false;
      if (this.newMessageNum != that.newMessageNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RubricCounter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRubric()).compareTo(other.isSetRubric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRubric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rubric, other.rubric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTopicNum()).compareTo(other.isSetNewTopicNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTopicNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTopicNum, other.newTopicNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewMessageNum()).compareTo(other.isSetNewMessageNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewMessageNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newMessageNum, other.newMessageNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RubricCounter(");
    boolean first = true;

    sb.append("rubric:");
    sb.append(this.rubric);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageType:");
    if (this.messageType == null) {
      sb.append("null");
    } else {
      sb.append(this.messageType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newTopicNum:");
    sb.append(this.newTopicNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newMessageNum:");
    sb.append(this.newMessageNum);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RubricCounterStandardSchemeFactory implements SchemeFactory {
    public RubricCounterStandardScheme getScheme() {
      return new RubricCounterStandardScheme();
    }
  }

  private static class RubricCounterStandardScheme extends StandardScheme<RubricCounter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RubricCounter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RUBRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rubric = iprot.readI32();
              struct.setRubricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.messageType = com.vmesteonline.be.MessageType.findByValue(iprot.readI32());
              struct.setMessageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_TOPIC_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newTopicNum = iprot.readI32();
              struct.setNewTopicNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_MESSAGE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newMessageNum = iprot.readI32();
              struct.setNewMessageNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RubricCounter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RUBRIC_FIELD_DESC);
      oprot.writeI32(struct.rubric);
      oprot.writeFieldEnd();
      if (struct.messageType != null) {
        oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.messageType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEW_TOPIC_NUM_FIELD_DESC);
      oprot.writeI32(struct.newTopicNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_MESSAGE_NUM_FIELD_DESC);
      oprot.writeI32(struct.newMessageNum);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RubricCounterTupleSchemeFactory implements SchemeFactory {
    public RubricCounterTupleScheme getScheme() {
      return new RubricCounterTupleScheme();
    }
  }

  private static class RubricCounterTupleScheme extends TupleScheme<RubricCounter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RubricCounter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRubric()) {
        optionals.set(0);
      }
      if (struct.isSetMessageType()) {
        optionals.set(1);
      }
      if (struct.isSetNewTopicNum()) {
        optionals.set(2);
      }
      if (struct.isSetNewMessageNum()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetRubric()) {
        oprot.writeI32(struct.rubric);
      }
      if (struct.isSetMessageType()) {
        oprot.writeI32(struct.messageType.getValue());
      }
      if (struct.isSetNewTopicNum()) {
        oprot.writeI32(struct.newTopicNum);
      }
      if (struct.isSetNewMessageNum()) {
        oprot.writeI32(struct.newMessageNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RubricCounter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.rubric = iprot.readI32();
        struct.setRubricIsSet(true);
      }
      if (incoming.get(1)) {
        struct.messageType = com.vmesteonline.be.MessageType.findByValue(iprot.readI32());
        struct.setMessageTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.newTopicNum = iprot.readI32();
        struct.setNewTopicNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.newMessageNum = iprot.readI32();
        struct.setNewMessageNumIsSet(true);
      }
    }
  }

}

