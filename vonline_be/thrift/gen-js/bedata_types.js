//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof com === 'undefined') {
  com = {};
}
if (typeof com.vmesteonline === 'undefined') {
  com.vmesteonline = {};
}
if (typeof com.vmesteonline.be === 'undefined') {
  com.vmesteonline.be = {};
}
com.vmesteonline.be.FriendshipType = {
'UNCONFIRMED' : 0,
'CONFIRMED' : 1,
'REQUESTED' : 2,
'WAIT_CONFIRMATION' : 3,
'HIDE' : 4
};
com.vmesteonline.be.Country = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
com.vmesteonline.be.Country.prototype = {};
com.vmesteonline.be.Country.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Country.prototype.write = function(output) {
  output.writeStructBegin('Country');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.City = function(args) {
  this.id = null;
  this.countryId = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.countryId !== undefined) {
      this.countryId = args.countryId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
com.vmesteonline.be.City.prototype = {};
com.vmesteonline.be.City.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.countryId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.City.prototype.write = function(output) {
  output.writeStructBegin('City');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.countryId !== null && this.countryId !== undefined) {
    output.writeFieldBegin('countryId', Thrift.Type.I64, 2);
    output.writeI64(this.countryId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.Street = function(args) {
  this.id = null;
  this.cityId = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.cityId !== undefined) {
      this.cityId = args.cityId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
com.vmesteonline.be.Street.prototype = {};
com.vmesteonline.be.Street.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.cityId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Street.prototype.write = function(output) {
  output.writeStructBegin('Street');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.cityId !== null && this.cityId !== undefined) {
    output.writeFieldBegin('cityId', Thrift.Type.I64, 2);
    output.writeI64(this.cityId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.Building = function(args) {
  this.id = null;
  this.streetId = null;
  this.fullNo = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.streetId !== undefined) {
      this.streetId = args.streetId;
    }
    if (args.fullNo !== undefined) {
      this.fullNo = args.fullNo;
    }
  }
};
com.vmesteonline.be.Building.prototype = {};
com.vmesteonline.be.Building.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.streetId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fullNo = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Building.prototype.write = function(output) {
  output.writeStructBegin('Building');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.streetId !== null && this.streetId !== undefined) {
    output.writeFieldBegin('streetId', Thrift.Type.I64, 2);
    output.writeI64(this.streetId);
    output.writeFieldEnd();
  }
  if (this.fullNo !== null && this.fullNo !== undefined) {
    output.writeFieldBegin('fullNo', Thrift.Type.STRING, 3);
    output.writeString(this.fullNo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.PostalAddress = function(args) {
  this.country = null;
  this.city = null;
  this.street = null;
  this.building = null;
  this.staircase = null;
  this.floor = null;
  this.flatNo = null;
  this.comment = null;
  if (args) {
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.street !== undefined) {
      this.street = args.street;
    }
    if (args.building !== undefined) {
      this.building = args.building;
    }
    if (args.staircase !== undefined) {
      this.staircase = args.staircase;
    }
    if (args.floor !== undefined) {
      this.floor = args.floor;
    }
    if (args.flatNo !== undefined) {
      this.flatNo = args.flatNo;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
  }
};
com.vmesteonline.be.PostalAddress.prototype = {};
com.vmesteonline.be.PostalAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.country = new com.vmesteonline.be.Country();
        this.country.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.city = new com.vmesteonline.be.City();
        this.city.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.street = new com.vmesteonline.be.Street();
        this.street.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.building = new com.vmesteonline.be.Building();
        this.building.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.staircase = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.floor = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.flatNo = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.PostalAddress.prototype.write = function(output) {
  output.writeStructBegin('PostalAddress');
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRUCT, 1);
    this.country.write(output);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRUCT, 2);
    this.city.write(output);
    output.writeFieldEnd();
  }
  if (this.street !== null && this.street !== undefined) {
    output.writeFieldBegin('street', Thrift.Type.STRUCT, 3);
    this.street.write(output);
    output.writeFieldEnd();
  }
  if (this.building !== null && this.building !== undefined) {
    output.writeFieldBegin('building', Thrift.Type.STRUCT, 4);
    this.building.write(output);
    output.writeFieldEnd();
  }
  if (this.staircase !== null && this.staircase !== undefined) {
    output.writeFieldBegin('staircase', Thrift.Type.BYTE, 5);
    output.writeByte(this.staircase);
    output.writeFieldEnd();
  }
  if (this.floor !== null && this.floor !== undefined) {
    output.writeFieldBegin('floor', Thrift.Type.BYTE, 6);
    output.writeByte(this.floor);
    output.writeFieldEnd();
  }
  if (this.flatNo !== null && this.flatNo !== undefined) {
    output.writeFieldBegin('flatNo', Thrift.Type.I32, 7);
    output.writeI32(this.flatNo);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 8);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.Friendship = function(args) {
  this.userId = null;
  this.friendId = null;
  this.state = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.friendId !== undefined) {
      this.friendId = args.friendId;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
com.vmesteonline.be.Friendship.prototype = {};
com.vmesteonline.be.Friendship.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.friendId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Friendship.prototype.write = function(output) {
  output.writeStructBegin('Friendship');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 1);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.friendId !== null && this.friendId !== undefined) {
    output.writeFieldBegin('friendId', Thrift.Type.I64, 2);
    output.writeI64(this.friendId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

