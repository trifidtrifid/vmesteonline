//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof com === 'undefined') {
  com = {};
}
if (typeof com.vmesteonline === 'undefined') {
  com.vmesteonline = {};
}
if (typeof com.vmesteonline.be === 'undefined') {
  com.vmesteonline.be = {};
}
com.vmesteonline.be.Session = function(args) {
  this.salt = null;
  this.userId = null;
  this.userAgent = null;
  this.cookie = null;
  this.accessGranted = null;
  this.error = null;
  if (args) {
    if (args.salt !== undefined) {
      this.salt = args.salt;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.userAgent !== undefined) {
      this.userAgent = args.userAgent;
    }
    if (args.cookie !== undefined) {
      this.cookie = args.cookie;
    }
    if (args.accessGranted !== undefined) {
      this.accessGranted = args.accessGranted;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
com.vmesteonline.be.Session.prototype = {};
com.vmesteonline.be.Session.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.salt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.accessGranted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Session.prototype.write = function(output) {
  output.writeStructBegin('Session');
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.STRING, 1);
    output.writeString(this.salt);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.userAgent !== null && this.userAgent !== undefined) {
    output.writeFieldBegin('userAgent', Thrift.Type.STRING, 4);
    output.writeString(this.userAgent);
    output.writeFieldEnd();
  }
  if (this.cookie !== null && this.cookie !== undefined) {
    output.writeFieldBegin('cookie', Thrift.Type.STRING, 5);
    output.writeString(this.cookie);
    output.writeFieldEnd();
  }
  if (this.accessGranted !== null && this.accessGranted !== undefined) {
    output.writeFieldBegin('accessGranted', Thrift.Type.BOOL, 6);
    output.writeBool(this.accessGranted);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 7);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.InvalidOperation = function(args) {
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(com.vmesteonline.be.InvalidOperation, Thrift.TException);
com.vmesteonline.be.InvalidOperation.prototype.name = 'InvalidOperation';
com.vmesteonline.be.InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

