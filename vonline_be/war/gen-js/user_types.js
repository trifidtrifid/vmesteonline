//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


if (typeof com === 'undefined') {
  com = {};
}
if (typeof com.vmesteonline === 'undefined') {
  com.vmesteonline = {};
}
if (typeof com.vmesteonline.be === 'undefined') {
  com.vmesteonline.be = {};
}
com.vmesteonline.be.LocationType = {
'FLAT' : 1,
'FLOOR' : 2,
'HOUSE' : 3,
'BLOCK' : 4,
'DISTRICT' : 5,
'CITY' : 6,
'REGION' : 7,
'COUNTRY' : 8,
'WORLD' : 9
};
com.vmesteonline.be.UserInfo = function(args) {
  this.name = null;
  this.secondName = null;
  this.dob = null;
  this.sex = null;
  this.intrests = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.secondName !== undefined) {
      this.secondName = args.secondName;
    }
    if (args.dob !== undefined) {
      this.dob = args.dob;
    }
    if (args.sex !== undefined) {
      this.sex = args.sex;
    }
    if (args.intrests !== undefined) {
      this.intrests = args.intrests;
    }
  }
};
com.vmesteonline.be.UserInfo.prototype = {};
com.vmesteonline.be.UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.secondName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dob = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sex = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.intrests = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.secondName !== null && this.secondName !== undefined) {
    output.writeFieldBegin('secondName', Thrift.Type.STRING, 2);
    output.writeString(this.secondName);
    output.writeFieldEnd();
  }
  if (this.dob !== null && this.dob !== undefined) {
    output.writeFieldBegin('dob', Thrift.Type.I32, 3);
    output.writeI32(this.dob);
    output.writeFieldEnd();
  }
  if (this.sex !== null && this.sex !== undefined) {
    output.writeFieldBegin('sex', Thrift.Type.BOOL, 4);
    output.writeBool(this.sex);
    output.writeFieldEnd();
  }
  if (this.intrests !== null && this.intrests !== undefined) {
    output.writeFieldBegin('intrests', Thrift.Type.STRING, 5);
    output.writeString(this.intrests);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.User = function(args) {
  this.id = null;
  this.locationId = null;
  this.userInfo = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.locationId !== undefined) {
      this.locationId = args.locationId;
    }
    if (args.userInfo !== undefined) {
      this.userInfo = args.userInfo;
    }
  }
};
com.vmesteonline.be.User.prototype = {};
com.vmesteonline.be.User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.locationId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.userInfo = new com.vmesteonline.be.UserInfo();
        this.userInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.I32, 2);
    output.writeI32(this.locationId);
    output.writeFieldEnd();
  }
  if (this.userInfo !== null && this.userInfo !== undefined) {
    output.writeFieldBegin('userInfo', Thrift.Type.STRUCT, 3);
    this.userInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.Session = function(args) {
  this.salt = null;
  this.user = null;
  this.created = null;
  this.userAgent = null;
  this.cookie = null;
  this.accessGranted = null;
  this.error = null;
  if (args) {
    if (args.salt !== undefined) {
      this.salt = args.salt;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.created !== undefined) {
      this.created = args.created;
    }
    if (args.userAgent !== undefined) {
      this.userAgent = args.userAgent;
    }
    if (args.cookie !== undefined) {
      this.cookie = args.cookie;
    }
    if (args.accessGranted !== undefined) {
      this.accessGranted = args.accessGranted;
    }
    if (args.error !== undefined) {
      this.error = args.error;
    }
  }
};
com.vmesteonline.be.Session.prototype = {};
com.vmesteonline.be.Session.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.salt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new com.vmesteonline.be.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.created = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.cookie = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.accessGranted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Session.prototype.write = function(output) {
  output.writeStructBegin('Session');
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.STRING, 1);
    output.writeString(this.salt);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.I32, 3);
    output.writeI32(this.created);
    output.writeFieldEnd();
  }
  if (this.userAgent !== null && this.userAgent !== undefined) {
    output.writeFieldBegin('userAgent', Thrift.Type.STRING, 4);
    output.writeString(this.userAgent);
    output.writeFieldEnd();
  }
  if (this.cookie !== null && this.cookie !== undefined) {
    output.writeFieldBegin('cookie', Thrift.Type.STRING, 5);
    output.writeString(this.cookie);
    output.writeFieldEnd();
  }
  if (this.accessGranted !== null && this.accessGranted !== undefined) {
    output.writeFieldBegin('accessGranted', Thrift.Type.BOOL, 6);
    output.writeBool(this.accessGranted);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 7);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.Location = function(args) {
  this.id = null;
  this.parent = null;
  this.name = null;
  this.type = null;
  this.longitude = null;
  this.attitude = null;
  this.altitude = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.parent !== undefined) {
      this.parent = args.parent;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.attitude !== undefined) {
      this.attitude = args.attitude;
    }
    if (args.altitude !== undefined) {
      this.altitude = args.altitude;
    }
  }
};
com.vmesteonline.be.Location.prototype = {};
com.vmesteonline.be.Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.parent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.attitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.altitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.I32, 2);
    output.writeI32(this.parent);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.attitude !== null && this.attitude !== undefined) {
    output.writeFieldBegin('attitude', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.attitude);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin('altitude', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

com.vmesteonline.be.InvalidOperation = function(args) {
  this.what = null;
  this.why = null;
  if (args) {
    if (args.what !== undefined) {
      this.what = args.what;
    }
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(com.vmesteonline.be.InvalidOperation, Thrift.TException);
com.vmesteonline.be.InvalidOperation.prototype.name = 'InvalidOperation';
com.vmesteonline.be.InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.what = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

com.vmesteonline.be.InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.what !== null && this.what !== undefined) {
    output.writeFieldBegin('what', Thrift.Type.I32, 1);
    output.writeI32(this.what);
    output.writeFieldEnd();
  }
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 2);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

